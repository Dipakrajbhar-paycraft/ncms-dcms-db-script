CREATE OR REPLACE PROCEDURE account_balance_update(p_hash_card_number character varying, p_total_txn_amount numeric DEFAULT 0, p_hold_amount numeric DEFAULT 0, p_drcr_flag character varying, p_negative_allow_flag character varying DEFAULT 'N'::character varying, p_wallet_id numeric DEFAULT 0, p_txn_type character varying, OUT p_code character varying, OUT p_msg character varying, OUT p_settled_flag character varying, OUT p_available_balance numeric, OUT p_hold_balance numeric, OUT p_current_balance numeric, OUT p_previous_balance numeric)
 SECURITY DEFINER
AS $procedure$

v_account_number account_details.account_number%type:=0;
--v_available_balc account_details.available_balance%type:=0;
--v_hold_balc account_details.hold_balance%type:=0;
--v_current_balc account_details.current_balance%type:=0;
--v_total_available_balc account_details.available_balance%type:=0;
--v_total_hold_balc account_details.hold_balance%type:=0;
--v_total_current_balc account_details.current_balance%type:=0;

v_available_balc numeric:=0;
v_hold_balc numeric:=0;
v_current_balc numeric:=0;
v_total_available_balc numeric:=0;
v_total_hold_balc numeric:=0;
v_total_current_balc numeric:=0;

	BEGIN

select ad.account_number,available_balance,hold_balance,current_balance 
into v_account_number,v_available_balc,v_hold_balc,v_current_balc 
from card_detail cd join account_details ad
on(cd.prep_account_number = ad.account_number) 		
where cd.hash_Card_number=p_hash_card_number
and ad.wallet_id = p_wallet_id;

dbms_output.put_line('account_number '||v_account_number||' available_balance '||v_available_balc||' hold balance '||v_hold_balc||' current_balance '||v_current_balc);

p_previous_balance := v_available_balc;

if p_drcr_flag ='D' then

dbms_output.put_line('Inside debit flag');

 IF p_txn_type = '21000'  then  

  v_total_available_balc=v_available_balc-p_total_txn_amount;
  v_total_hold_balc = v_hold_balc + p_hold_amount;
  v_total_current_balc=v_total_available_balc + v_total_hold_balc;

 else 
 
  v_total_available_balc=v_available_balc-p_total_txn_amount;
  v_total_hold_balc := v_hold_balc;
  v_total_current_balc=v_total_available_balc + v_total_hold_balc;
 
 end if;


dbms_output.put_line('v_total_available_balc '||v_total_available_balc||' v_total_hold_balc '||v_total_hold_balc||' v_total_current_balc '||v_total_current_balc);


if v_total_available_balc < 0  then

if p_negative_allow_flag='Y' then

 	v_total_hold_balc = v_total_hold_balc + p_total_txn_amount;
	v_total_current_balc=v_total_available_balc + v_total_hold_balc;

dbms_output.put_line('To debit as negative balance');

update account_details set available_balance=v_total_available_balc,
                           hold_balance=v_total_hold_balc,
                           current_balance=v_total_current_balc
                          where account_number=v_account_number
                          and wallet_id = p_wallet_id;
p_code :='00';
p_msg :='Success';
p_settled_flag :='N';
p_available_balance:=v_total_available_balc;
p_hold_balance :=v_total_hold_balc;
p_current_balance:=v_total_current_balc;

dbms_output.put_line('p_code '||p_code||' p_msg '||p_msg||' p_available_balance '||p_available_balance||' p_hold_balance '||p_hold_balance||' p_current_balance '||p_current_balance);

else

p_code :='01';
p_msg :='Insufficient Balance';
p_settled_flag :=null;
p_available_balance:=null;
p_hold_balance :=null;
p_current_balance:=null;

end if;


else -----positive bal

dbms_output.put_line('To debit balance available');

update account_details set available_balance=v_total_available_balc,
                           hold_balance=v_total_hold_balc,
                           current_balance=v_total_current_balc
                          where account_number=v_account_number
                          and wallet_id = p_wallet_id;
p_code :='00';
p_msg :='Success';
p_settled_flag :='Y';
p_available_balance:=v_total_available_balc;
p_hold_balance :=v_total_hold_balc;
p_current_balance:=v_total_current_balc;

dbms_output.put_line('p_code '||p_code||' p_msg '||p_msg||' p_available_balance '||p_available_balance||' p_hold_balance '||p_hold_balance||' p_current_balance '||p_current_balance);

end if;  --balance check end

else    ---code for CREDIT

dbms_output.put_line('Inside Credit');

v_total_available_balc=v_available_balc + p_total_txn_amount;
v_total_hold_balc = v_hold_balc;
v_total_current_balc = v_total_available_balc;
--v_total_hold_balc = v_hold_balc - p_hold_amount;
--v_total_current_balc=v_total_available_balc + v_total_hold_balc;


dbms_output.put_line('v_total_available_balc '||v_total_available_balc||' v_total_hold_balc '||v_total_hold_balc||' v_total_current_balc '||v_total_current_balc);


update account_details set available_balance=v_total_available_balc,
                           hold_balance=v_total_hold_balc,
                           current_balance=v_total_current_balc
                          where account_number=v_account_number
                          and wallet_id = p_wallet_id;
p_code :='00';
p_msg :='Success';
p_settled_flag:='Y';
p_available_balance:=v_total_available_balc;
p_hold_balance :=v_total_hold_balc;
p_current_balance:=v_total_current_balc;


dbms_output.put_line('p_code '||p_code||' p_msg '||p_msg||' p_available_balance '||p_available_balance||' p_hold_balance '||p_hold_balance||' p_current_balance '||p_current_balance);


end if;   --drcr flag endif



exception

when others then

dbms_output.put_line('Sql code'||sqlcode||sqlerrm);
p_code :='01';
p_msg :='Account balance update failed.';
p_settled_flag:=null;
p_available_balance:=null;
p_hold_balance :=null;
p_current_balance:=null;
		
		
		
	END;
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE account_hold_balance_update(p_account_number character varying, p_amount numeric, v_wallet_id integer DEFAULT 0, OUT p_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 

v_acc_cnt numeric :=0;
v_avl_bal account_details.available_balance%type:=0;
v_hold_bal account_details.hold_balance%type:=0;
v_curr_bal account_details.current_balance%type:=0;
invalid_account exception;
begin 
	
	select count(1) into v_acc_cnt from account_details where account_number=p_account_number;

if v_acc_cnt > 0 then

select available_balance,hold_balance,current_balance 
into v_avl_bal,v_hold_bal,v_curr_bal
from account_details
where account_number = p_account_number
and wallet_id = v_wallet_id;

 if v_hold_bal  >= p_amount then
 
 v_hold_bal:=v_hold_bal-p_amount;
 v_curr_bal:=v_avl_bal + v_hold_bal;
 
 update account_details set hold_balance=v_hold_bal , current_balance=v_curr_bal
 where account_number=p_account_number
 and wallet_id = v_wallet_id;

p_code :='00';
p_msg :='Success';

else 


p_code :='01';
p_msg :='Insufficient hold amount.';


 end if;



else 

raise invalid_account;

end if;

exception

when invalid_account then

p_code :='01';
p_msg :='Failure';

when others then 

dbms_output.put_line('error code '||sqlcode||' Error msg '||sqlerrm);
p_code :='01';
p_msg :='Failure';


end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE acquirer_settlement_process(p_file_name character varying, p_user_id character varying, OUT p_file_response character varying)
 SECURITY DEFINER
AS $procedure$

        v_file_type           VARCHAR2(100) := NULL;
        v_file_description    VARCHAR2(100) := NULL;
        v_file_code           VARCHAR2(100) := NULL;
        v_netwk               VARCHAR2(100) := NULL;
        v_file_cnt            VARCHAR2(100) := NULL;
        v_start_date          VARCHAR2(100) := NULL;
        v_end_date            VARCHAR2(100) := NULL;
        v_activity_log        VARCHAR2(100) := NULL;
        v_process_id          VARCHAR2(100) := NULL;
        v_scheme_code         VARCHAR2(100) := NULL;
        v_participant_id      VARCHAR2(100) := NULL;
        v_txn_cnt             VARCHAR2(100) := NULL;
        v_txn_amt             VARCHAR2(100) := NULL;
        v_pid                 VARCHAR2(100) := NULL;
        v_file_date           VARCHAR2(100) := NULL;
        v_user_id             VARCHAR2(100) := NULL;
        v_file_desc           VARCHAR2(100) := NULL;
        v_file_name           VARCHAR2(100) := NULL;
        file_cnt              NUMBER;
        v_process_complete    VARCHAR2(100) := NULL;
        v_process_reverse     VARCHAR2(100) := NULL;
        v_rollback_complete   VARCHAR2(100) := NULL;
        
         v_file_gen_date       VARCHAR2(6) := NULL;
        v_file_seq            NUMBER;
        v_seq_flag            VARCHAR2(4) := NULL;
        v_alert_msg           VARCHAR2(100);
        v_roll_count          NUMBER;
        v_rupay_filename      VARCHAR2(21);
        processid_update_fail EXCEPTION;
        invalid_parameter EXCEPTION;
        file_updation EXCEPTION;
        v_complete_status   varchar2(10) := null;
		v_err_msg  varchar2(100);
        
    BEGIN
    
         IF p_file_name IS NULL OR p_user_id IS NULL THEN
            RAISE invalid_parameter;
        END IF;
        
        SELECT
            file_type,
            file_code,
            file_name_description,
            network,
            file_seq,
            seq_flag
        INTO
            v_file_type,
            v_file_code,
            v_file_description,
            v_netwk,
            v_file_seq,
            v_seq_flag
        FROM
            cs_config_filenamemaster
        WHERE
            file_code = substr(p_file_name,1,2);


        dbms_output.put_line('file_code:='
                               || v_file_code
                               || 'File_Type:='
                               || v_file_type);
    -- File Types if
        IF
            v_file_type = 'ACQID' OR v_file_type IS NULL
        THEN
            SELECT
                COUNT(file_name)
            INTO file_cnt
            FROM
                cs_filemaster
            WHERE
                file_name = p_file_name;

            dbms_output.put_line(file_cnt);
            IF
                file_cnt > 0
            THEN
                dbms_output.put_line('File is already process in system');
            ELSE
                dbms_output.put_line('File processing is started');
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    'RAF.'
                    || TO_CHAR(SYSDATE,'DDMMYY')
                    || '.'
                    || lpad(incoming_file_seq.NEXTVAL,5,'0')
                INTO v_process_id
                FROM
                    dual;

                UPDATE cs_rupay_acqid
                SET
                    process_id = v_process_id
                WHERE
                    file_name = p_file_name;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                     RAISE processid_update_fail;
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Creation and application of process ID';
                p_cs_processlogmaster(v_process_id,'Acquirer_ID Management File processing  ',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'5.3',p_file_name);

                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    process_complete,
                    process_reverse,
                    rollback_complete,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_process_complete,
                    v_process_reverse,
                    v_rollback_complete,
                    v_start_date,
                    v_end_date,
                    p_user_id,
                    '5'
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion into cs_filerollback table';
                p_cs_processlogmaster(v_process_id,'Acquirer_ID Management File processing  ',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'5.3',p_file_name);

                INSERT INTO cs_rupay_acqid_history
                    SELECT
                        *
                    FROM
                        cs_rupay_acqid
                    WHERE
                        nvl(identifier,'N/A') NOT IN (
                            'HDR',
                            'TRL'
                        );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion into cs_rupay_acqid_history table';
                p_cs_processlogmaster(v_process_id,'Acquirer_ID Management File processing  ',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'5.3',p_file_name);

                SELECT
                    file_gen_date
                INTO v_file_gen_date
                FROM
                    cs_rupay_acqid
                WHERE
                    process_id = v_process_id
                    AND identifier = 'HDR';

                INSERT INTO cs_hdrtrl (
                    de024,
                    ide001,
                    ide005,
                    process_date,
                    process_id,
                    pds0306,
                    id,
                    ide003,
                    file_name
                )
                    SELECT
                            CASE
                                WHEN nvl(identifier,'N/A') = 'HDR' THEN 670
                                WHEN nvl(identifier,'N/A') = 'TRL' THEN 671
                            END,
                            file_gen_date,
                            version_number,
                            process_date,
                            process_id,
                            record_count,
                            id,
                            file_name,
                            file_name
                    FROM
                        cs_rupay_acqid
                    WHERE
                        nvl(identifier,'N/A') IN (
                            'HDR',
                            'TRL'
                        );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Header and Trailer record movement';
                p_cs_processlogmaster(v_process_id,'Acquirer ID Management File processing  ',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'5.4',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    COUNT(*)
                INTO v_txn_cnt
                FROM
                    cs_rupay_acqid
                WHERE
                    process_id = v_process_id
                    AND nvl(identifier,'N/A') NOT IN (
                        'HDR',
                        'TRL'
                    );

                INSERT INTO cs_filemaster (
                    process_id,
                    file_name,
                    file_description,
                    process_date,
                    process_time,
                    transaction_count,
            --TRANSACTION_AMOUNT,
                    user_id,
                    network,
                    file_priority,
                    file_date
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_file_description,
                    SYSDATE,
                    TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    v_txn_cnt,
            --v_Txn_AMT,
                    p_user_id,
                    v_netwk,
                    CASE
                        WHEN v_seq_flag = 'Y' THEN v_file_seq
                    END,
                    v_file_gen_date
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Completion entry into CS_FILEMASTER table';
                p_cs_processlogmaster(v_process_id,'Acquirer_ID Management File processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'5.5',p_file_name);
        ---file process alert----

                p_file_response := '05, '||p_file_name
                                   || ' '
                                   || v_file_description
                                   || ' is processed successfully';
                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'File process completion message';
                p_cs_processlogmaster(v_process_id,'Acquirer ID Management File processing  ',v_activity_log,v_start_date,v_end_date
,'YES',p_user_id,'5.6',p_file_name);

                dbms_output.put_line(p_file_response);
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                UPDATE cs_filerollback
                SET
                    process_complete = 'YES'
                WHERE
                    process_id = v_process_id;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Process completion update into cs_filerollback table';
                p_cs_processlogmaster(v_process_id,'Acquirer ID Management File processing  ',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'5.7',p_file_name);

            END IF; --end of file check file_cnt

        END IF;   --end of file types

    EXCEPTION
   
   WHEN invalid_parameter THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Parameter Check';
            p_cs_processlogmaster(v_process_id,'Acquirer ID Management File processing  ',v_activity_log,v_start_date
           ,v_end_date,'NO',p_user_id,'5.9',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN file_updation THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File updation into cs_rupay_intemp';
            p_cs_processlogmaster(v_process_id,'Acquirer ID Management File processing  ',v_activity_log,v_start_date
           ,v_end_date,'NO',p_user_id,'5.10',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN processid_update_fail THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Creation and application of process ID';
            p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date
           ,'NO',p_user_id,'5.11',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
   
        WHEN OTHERS THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_err_msg := 'Error Occurred Msg :'
                         || sqlerrm
                         || ' code :'
                         || sqlcode;

            p_cs_processlogmaster(v_process_id,'ERROR IN acquirer_settlement_process  ',v_err_msg,v_start_date,v_end_date
,'NO',NULL,'6.34',p_file_name);

            SELECT
                COUNT(1)
            INTO v_roll_count
            FROM
                cs_filerollback
            WHERE
                process_id = v_process_id;

            IF v_roll_count > 0 THEN
                NULL;
            ELSE
                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    p_user_id,
                    '7'
                );

            END IF;

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
            
            EXECUTE IMMEDIATE 'truncate table cs_rupay_acqid';

    END acquirer_settlement_process$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION balance_check_card(p_hash_card_number character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 
v_count numeric :=0;
v_host_balance varchar(15):='0';
begin 

	select count(1) into v_count from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number;
				   if v_count > 0 then
				   
				   select sum(ad.available_balance)  into v_host_balance from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number;
				   
				   return v_host_balance;
					else 
				   
				   v_host_balance:=0;
				 
				  return v_host_balance;
				 
				 
				   end if;
				   
exception 
when others then

v_host_balance:=0;

return v_host_balance;	
	
end$function$
;

CREATE OR REPLACE FUNCTION balance_check_mobile(p_mobile_no numeric)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 
v_count numeric :=0;
v_host_balance varchar(15):='0';
begin 

	select count(1) 
	into v_count 
	from card_detail cd 
	join account_details ad  on(ad.account_number =cd.prep_account_number)
	where cd.mobile_no=p_mobile_no
	and cd.status <> 'PHL'
	;
			
	if v_count > 0 then				   
      select sum(ad.available_balance)  
	  into v_host_balance 
	  from card_detail cd 
	  join account_details ad  on(ad.account_number =cd.prep_account_number)
	  where cd.mobile_no=p_mobile_no
	  and cd.status <> 'PHL'
	  ;
	  
	return v_host_balance;
	
	else  
	v_host_balance:=0;
    return v_host_balance;	
	
	end if;
				   
exception 
when others then

v_host_balance:=0;

return v_host_balance;	
	
end$function$
;

CREATE OR REPLACE FUNCTION balance_check_wallet(p_hash_card_number character varying, p_wallet_id numeric DEFAULT 0)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 
v_count numeric :=0;
v_avl_balance varchar(15) :='0';
begin 

	select count(1) into v_count from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number;
				   if v_count > 0 then
				   
				   select ad.available_balance  into v_avl_balance from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number
				    and ad.wallet_id = p_wallet_id;
				   
				   return v_avl_balance;
					else 
				   
				   v_avl_balance:=0;
				 
				  return v_avl_balance;
				 
				 
				   end if;
				   
exception 
when others then

v_avl_balance:=0;

return v_avl_balance;	
	
end$function$
;

CREATE OR REPLACE FUNCTION balance_check_wallet(p_hash_card_number character varying, p_wallet_identifier character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
 
v_count numeric :=0;
v_avl_balance varchar(100) ;
begin 

	select count(1) into v_count from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number
				   	and upper(ad.wallet_identifier) = upper(p_wallet_identifier);
				   
				   if v_count > 0 then
				   
				   select ad.available_balance  into v_avl_balance from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number
				    --and ad.wallet_id = p_wallet_id
					and upper(ad.wallet_identifier) = upper(p_wallet_identifier);
				   
				   return v_avl_balance;
					else 
				   
				   v_avl_balance:='Wallet not found.';
				 
				  return v_avl_balance;
				 
				 
				   end if;
				   
exception 
when others then

v_avl_balance:='card not found.';

return v_avl_balance;	
	
end
$function$
;

CREATE OR REPLACE PROCEDURE balance_update(p_hash_card_number character varying, p_amount character varying, p_drcr character varying, OUT p_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 
v_count numeric;
v_prepaid_account_number character varying(200);
begin 
	
	select count(1) into v_count from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number;
				   
				   if v_count > 0 then 
				   
				   select prepaid_account_number into v_prepaid_account_number from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number;
				   
				   if p_drcr='C' then
				   
				   update account_details set host_balance =host_balance + to_number(p_amount) where account_number=v_prepaid_account_number;
				   
				  p_code :='00';
				  
				  p_msg :='SUCCESS';
				  
				   elsif p_drcr='D' then
				   
				    
				    update account_details set host_balance =host_balance - to_number(p_amount) where account_number =v_prepaid_account_number;
					
					p_code :='00';
				  
				  	p_msg :='SUCCESS';
				   end if;
				  
				  else 
				  
				  p_code :='01';
				  
				  	p_msg :='Failure';
				   
				   end if;
exception

when others then

p_code :='01';
				  
p_msg :='Failure'||sqlcode||SQLERRM;
				  
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE balance_update(p_hash_card_number character varying, p_amount character varying, p_drcr character varying, v_wallet_id integer DEFAULT 0, OUT p_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 
v_count numeric;
v_prepaid_account_number character varying(200);
begin 
	
	select count(1) into v_count from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number
				    and ad.wallet_id = v_wallet_id;
				   
				   if v_count > 0 then 
				   
				   select prepaid_account_number into v_prepaid_account_number from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) 
										join account_details ad  on(ad.account_number =cust.prepaid_account_number)
				    where cd.hash_card_number=p_hash_card_number
				    and ad.wallet_id = v_wallet_id;
				   
				   if p_drcr='C' then
				   
				   update account_details set host_balance =host_balance + to_number(p_amount)
				   where account_number=v_prepaid_account_number
				   and wallet_id = v_wallet_id;
				   
				  p_code :='00';
				  
				  p_msg :='SUCCESS';
				  
				   elsif p_drcr='D' then
				   
				    
				    update account_details set host_balance =host_balance - to_number(p_amount)
				    where account_number =v_prepaid_account_number
				    and wallet_id = v_wallet_id;
					
					p_code :='00';
				  
				  	p_msg :='SUCCESS';
				   end if;
				  
				  else 
				  
				  p_code :='01';
				  
				  	p_msg :='Failure';
				   
				   end if;
exception

when others then

p_code :='01';
				  
p_msg :='Failure'||sqlcode||SQLERRM;
				  
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE bc_commission(p_date timestamp without time zone, p_issuer_id numeric)
 SECURITY DEFINER
AS $procedure$

    TYPE t_type IS
        TABLE OF cms_outlet.outlet_id%TYPE;
    v_type                   t_type;
    TYPE t_table IS
        TABLE OF cms_bc_commission%rowtype;
    t_rec                    t_table;
    v_cnt                    NUMBER;
    v_report_cnt             NUMBER;
    v_commission             NUMBER;
    v_capping_app_flag       VARCHAR2(5);
    v_capping_start_range    NUMBER;
    v_capping_end_range      NUMBER;
    v_max_capping_fee        NUMBER;
    v_min_capping_fee_perc   NUMBER;
    v_limit                  PLS_INTEGER := 500;
    CURSOR cur_min_issuance (
        v_commission   NUMBER,
        v_type         VARCHAR2,
        p_date         DATE,
        p_issuer_id    NUMBER
    ) IS
    SELECT
        cde.issued_date      transaction_date,
        v_commission         commission_amount,
        'Card Issuance' transaction_type,
        NULL kyc_status,
        NULL cif_uploaded_on,
        cde.id               reference_id,
        cde.outlet_id,
        cde.mo_id,
        issuer_id,
        digi.fee_amt         txn_amount,
        decrypt_all(digi.card_number, 'HM') mask_card_number,
        lpad(rrn, 16, 0) reference_number,
        cd.card_ref_number   card_ref_number,
        sysdate              insert_date
    FROM
        card_detail                 cd
        JOIN cms_card_detail_extention   cde ON ( cd.card_ref_number = cde.card_ref_no
                                                AND cde.issued_date IS NOT NULL )
        JOIN cs_fee_temp                 digi ON ( cd.hash_card_number = digi.card_number )
    WHERE
        trunc(cde.issued_date) = p_date
        AND cd.issuer_id = p_issuer_id
        AND cde.mo_id = v_type
        AND digi.fee_ind IN (
            'I',
            'P',
            'R',
            '93028',
            '93029',
            '93128',
            '93129'
        );

BEGIN
    dbms_output.put_line('Reach 1');
    SELECT
        COUNT(1)
    INTO v_report_cnt
    FROM
        cms_bc_commission
    WHERE
        trunc(transaction_date) = p_date
        AND issuer_id = p_issuer_id;

    IF v_report_cnt > 0 THEN
        DELETE FROM cms_bc_commission
        WHERE
            trunc(transaction_date) = p_date
            AND issuer_id = p_issuer_id;

    END IF;

    SELECT
        outlet_id
    BULK COLLECT
    INTO v_type
    FROM
        cms_outlet
    WHERE
        parent_id = 0
        AND issuer_id = p_issuer_id
        AND bc_commission_flag = 'Y';

    dbms_output.put_line('Reach 11');
    FOR i IN v_type.first..v_type.last LOOP
        dbms_output.put_line('Reach 12 '
                             || v_type(i)
                             || ' date '
                             || p_date);

        SELECT
            COUNT(1)
        INTO v_cnt
        FROM
            card_detail                 cd
            JOIN cms_card_detail_extention   cde ON ( cd.card_ref_number = cde.card_ref_no
                                                    AND cde.issued_date IS NOT NULL )
            JOIN cs_fee_temp                 digi ON ( cd.hash_card_number = digi.card_number )
        WHERE
            trunc(cde.issued_date) = p_date
            AND cd.issuer_id = p_issuer_id
            AND cde.mo_id = v_type(i)
            AND digi.fee_ind IN (
                'I',
                'P',
                'R',
                '93028',
                '93029',
                '93128',
                '93129'
            );

        IF v_cnt > 0 THEN
            EXECUTE IMMEDIATE 'Select Commission_Amount From Cms_Bc_Commission_Config Where Commission_Code=''100'' and issuer_id ='''
                              || p_issuer_id
                              || ''''
            INTO v_commission;
            dbms_output.put_line('Reach 111');
            OPEN cur_min_issuance(v_commission, v_type(i), p_date, p_issuer_id);
            LOOP
                FETCH cur_min_issuance BULK COLLECT INTO t_rec LIMIT v_limit;
                dbms_output.put_line('Reach 2');
                FORALL i IN t_rec.first..t_rec.last
                    INSERT INTO cms_bc_commission (
                        transaction_date,
                        commission_amount,
                        transaction_type,
                        kyc_status,
                        kyc_updated_on,
                        reference_id,
                        outlet_id,
                        mid,
                        issuer_id,
                        txn_amount,
                        mask_card_number,
                        reference_number,
                        card_ref_number,
                        insert_date
                    ) VALUES (
                        t_rec(i).transaction_date,
                        t_rec(i).commission_amount,
                        t_rec(i).transaction_type,
                        t_rec(i).kyc_status,
                        t_rec(i).kyc_updated_on,
                        t_rec(i).reference_id,
                        t_rec(i).outlet_id,
                        t_rec(i).mid,
                        t_rec(i).issuer_id,
                        t_rec(i).txn_amount,
                        t_rec(i).mask_card_number,
                        t_rec(i).reference_number,
                        t_rec(i).card_ref_number,
                        t_rec(i).insert_date
                    );

                COMMIT;
                EXIT WHEN cur_min_issuance%notfound;
            END LOOP;

            CLOSE cur_min_issuance;
        END IF;

-------top_up commission--------------------------------

        dbms_output.put_line('Reach 3');
        SELECT
            SUM(cnt)
        INTO v_cnt
        FROM
            (
                SELECT
                    COUNT(1) cnt
                FROM
                    digital_txn_authorization   digi
                    JOIN card_detail                 cd ON ( digi.card_enc = cd.hash_card_number )
                WHERE
                    trunc(digi.date_time) = p_date
                    AND digi.mid = v_type(i)
                    AND cd.issuer_id = p_issuer_id
                    AND digi.txn_type IN (
                        '21028',
                        '91028'
                    )
                    AND digi.dr_cr_flag = 'Cr'
                UNION ALL
                SELECT
                    COUNT(1) cnt
                FROM
                    aswt_switch_txn_authrization   aswt
                    JOIN card_detail                    cd ON ( aswt.f002 = cd.hash_card_number )
                WHERE
                    trunc(aswt.sys_txn_date) = p_date
                    AND aswt.txn_type = '21028'
                    AND aswt.f042 = v_type(i)
                    AND aswt.drcr IN (
                        'C'
                    )
                    AND aswt.f039 = '00'
                    AND aswt.f038 IS NOT NULL
            );

        IF v_cnt > 0 THEN
            SELECT
                transaction_date,
                commission_amount,
                transaction_type,
                kyc_status,
                kyc_updated_on,
                reference_id,
                outlet_id,
                mid,
                issuer_id,
                txn_amount,
                mask_card_number,
                reference_number,
                card_ref_number,
                insert_date
            BULK COLLECT
            INTO t_rec
            FROM
                (
                    SELECT
                        digi.date_time       transaction_date,
                        digi.txn_amount      commission_amount,
                        'Top Up' transaction_type,
                        NULL kyc_status,
                        NULL kyc_updated_on,
                        to_char(digi.id) reference_id,
                        digi.branch_id       outlet_id,
                        digi.mid             mid,
                        cd.issuer_id         issuer_id,
                        digi.txn_amount      txn_amount,
                        decrypt_all(digi.card_enc, 'HM') mask_card_number,
                        arn_reference        reference_number,
                        cd.card_ref_number   card_ref_number,
                        sysdate              insert_date
                    FROM
                        digital_txn_authorization   digi
                        JOIN card_detail                 cd ON ( digi.card_enc = cd.hash_card_number )
                    WHERE
                        trunc(digi.date_time) = p_date
                        AND digi.mid = v_type(i)
                        AND cd.issuer_id = p_issuer_id
                        AND digi.txn_type IN (
                            '21028',
                            '91028'
                        )
                        AND digi.dr_cr_flag = 'Cr'
                    UNION ALL
                    SELECT
                        aswt.sys_txn_date    transaction_date,
                        nvl(to_number(aswt.f004) / 100, 0) commission_amount,
                        'Top Up' transaction_type,
                        NULL kyc_status,
                        NULL kyc_updated_on,
                        aswt.unique_txn_id   reference_id,
                        aswt.f041            outlet_id,
                        aswt.f042            mid,
                        cd.issuer_id         issuer_id,
                        nvl(to_number(aswt.f004) / 100, 0) txn_amount,
                        decrypt_all(aswt.f002, 'HM') mask_card_number,
                        aswt.f037            reference_number,
                        cd.card_ref_number   card_ref_number,
                        sysdate              insert_date
                    FROM
                        aswt_switch_txn_authrization   aswt
                        JOIN card_detail                    cd ON ( aswt.f002 = cd.hash_card_number )
                    WHERE
                        trunc(aswt.sys_txn_date) = p_date
                        AND aswt.txn_type = '21028'
                        AND aswt.f042 = v_type(i)
                        AND cd.issuer_id = p_issuer_id
                        AND aswt.drcr IN (
                            'C'
                        )
                        AND aswt.f039 = '00'
                        AND aswt.f038 IS NOT NULL
                );

            FOR i IN 1..t_rec.count LOOP
                dbms_output.put_line('Reach 4');
                SELECT DISTINCT
                    capping_app_flag
                INTO v_capping_app_flag
                FROM
                    cms_bc_commission_config
                WHERE
                    commission_code = '101'
                    AND issuer_id = p_issuer_id;

                IF v_capping_app_flag = 'Y' THEN
                    SELECT
                        capping_start_range,
                        capping_end_range,
                        max_capping_fee,
                        min_capping_fee_perc
                    INTO
                        v_capping_start_range,
                        v_capping_end_range,
                        v_max_capping_fee,
                        v_min_capping_fee_perc
                    FROM
                        cms_bc_commission_config
                    WHERE
                        commission_code = '101'
                        AND t_rec(i).commission_amount BETWEEN capping_start_range AND capping_end_range
                        AND issuer_id = p_issuer_id;

                    SELECT
                        CASE
                            WHEN v_capping_app_flag = 'Y'
                                 AND t_rec(i).commission_amount BETWEEN v_capping_start_range AND v_capping_end_range
                                 AND t_rec(i).commission_amount * ( v_min_capping_fee_perc / 100 ) < v_max_capping_fee THEN
                                t_rec(i).commission_amount * ( v_min_capping_fee_perc / 100 )
                            WHEN v_capping_app_flag = 'Y'
                                 AND t_rec(i).commission_amount BETWEEN v_capping_start_range AND v_capping_end_range
                                 AND t_rec(i).commission_amount * ( v_min_capping_fee_perc / 100 ) > v_max_capping_fee THEN
                                v_max_capping_fee
                            ELSE
                                t_rec(i).commission_amount * ( v_min_capping_fee_perc / 100 )
                        END
                    INTO v_commission
                    FROM
                        dual;

                ELSIF v_capping_app_flag = 'N' THEN
                    EXECUTE IMMEDIATE 'Select Commission_Amount From Cms_Bc_Commission_Config Where Commission_Code=''101'' and issuer_id ='''
                                      || p_issuer_id
                                      || ''''
                    INTO v_commission;
                END IF;

                dbms_output.put_line('Reach 5');
                INSERT INTO cms_bc_commission (
                    transaction_date,
                    commission_amount,
                    transaction_type,
                    kyc_status,
                    kyc_updated_on,
                    reference_id,
                    outlet_id,
                    mid,
                    issuer_id,
                    txn_amount,
                    mask_card_number,
                    reference_number,
                    card_ref_number,
                    insert_date
                ) VALUES (
                    t_rec(i).transaction_date,
                    v_commission,
                    t_rec(i).transaction_type,
                    t_rec(i).kyc_status,
                    t_rec(i).kyc_updated_on,
                    t_rec(i).reference_id,
                    t_rec(i).outlet_id,
                    t_rec(i).mid,
                    t_rec(i).issuer_id,
                    t_rec(i).txn_amount,
                    t_rec(i).mask_card_number,
                    t_rec(i).reference_number,
                    t_rec(i).card_ref_number,
                    t_rec(i).insert_date
                );

            END LOOP;

        END IF;

---------------------MIN TO MAX KYC-----------------------------------------

--     SELECT
--            COUNT(1)
--        INTO v_cnt
--        FROM
--            card_detail cd
--            JOIN cms_card_detail_extention cde ON ( cd.card_ref_number = cde.card_ref_no
--                                                    AND cde.issued_date IS NOT NULL )
--            JOIN cms_cust_details_extension cust ON ( cd.cust_seq_id = cust.cust_seq_id )
--        WHERE
--            trunc(cust.cif_uploaded_on)=p_date
--            AND cde.issued_date IS NOT NULL
--            AND cd.issuer_id = p_issuer_id
--            AND CD.STATUS NOT IN('PHL') AND REPLACEMENT_FLAG NOT IN('Y')
--            AND cde.mo_id = v_type(i)
--            AND cust.axis_kyc_status in('Y4','Y6');
--
--        IF v_cnt > 0 THEN
--
--            EXECUTE IMMEDIATE 'Select Commission_Amount From Cms_Bc_Commission_Config Where Commission_Code=''102'' and issuer_id='''||p_issuer_id||''''
--            INTO v_commission;
--
--            DBMS_OUTPUT.PUT_LINE('Commission_Amount '||v_commission||' v_type(i) '||v_type(i)||' p_date '||p_date||' p_issuer_id '||p_issuer_id);
--
--
--        SELECT
--                cde.issued_date   transaction_date,
--                v_commission      commission_amount,
--                'Min to Full KYC Conversion' transaction_type,
--                DECODE(cust.axis_kyc_status,'Y4','MAX','Y6','MAX') KYC_STATUS,
--                cust.cif_uploaded_on,
--                cde.id reference_id,
--                cde.outlet_id,
--                cde.mo_id,
--                issuer_id,
--                sysdate insert_date 
--              BULK COLLECT INTO t_rec  
--            FROM
--                card_detail cd
--                JOIN cms_card_detail_extention cde ON ( cd.card_ref_number = cde.card_ref_no
--                                                        AND cde.issued_date IS NOT NULL )
--                JOIN cms_cust_details_extension cust ON ( cd.cust_seq_id = cust.cust_seq_id )
--            WHERE 
--                trunc(cust.cif_uploaded_on)=p_date
--                AND cde.issued_date IS NOT NULL
--                AND cd.issuer_id = p_issuer_id
--                AND CD.STATUS NOT IN('PHL') AND REPLACEMENT_FLAG NOT IN('Y')
--                AND cde.mo_id = v_type(i)
--                AND cust.axis_kyc_status IN ('Y4','Y6');   
--
--
--            FORALL i IN INDICES OF t_rec
--                INSERT INTO cms_bc_commission (
--                    transaction_date,
--                    commission_amount,
--                    transaction_type,
--                    kyc_status,
--                    kyc_updated_on,
--                    reference_id,
--                    outlet_id,
--                    mid,
--                    issuer_id,
--                    insert_date 
--                ) VALUES (
--                    t_rec(i).kyc_updated_on,
--                    t_rec(i).commission_amount,
--                    t_rec(i).transaction_type,
--                    t_rec(i).kyc_status,
--                    t_rec(i).kyc_updated_on,
--                    t_rec(i).reference_id,
--                    t_rec(i).outlet_id,
--                    t_rec(i).mid,
--                    t_rec(i).issuer_id,
--                    t_rec(i).insert_date  
--                );    
--
--            COMMIT;
--
--        END IF;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error occurred '
                             || sqlcode
                             || ' '
                             || sqlerrm );
                           --  || ' '
                           --  || dbms_utility.format_error_backtrace);

        proc_processlog('COMM', 'BC_COMMISSION', 'PROCEDURE', 'BC_COMMISSION ERROR ...!!'
                                                              || sqlcode
                                                              || ' '
                                                              || sqlerrm
                                                              --|| ' '
                                                              --|| dbms_utility.format_error_backtrace
						                                    , systimestamp);

        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE card_balance_eod_proc(OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
    p_msg             VARCHAR2(2000);
    p_host_bal        NUMBER;
    p_shadow_bal      NUMBER;
    p_total_bal       NUMBER;
    p_total_credit      NUMBER;
    p_total_debit       NUMBER; 
    p_9f10_chip_bal   NUMBER;
   
   
    cursor c1 is
    SELECT
            cd.hash_card_number,
            cd.product_id,
            cd.issuer_id,
            cd.card_ref_number,
            cd.status,
            cd.prep_account_number,
            cd.cust_seq_id,
            ccde.mask_card_number,
            ccde.issued_date,
            ccde.mo_id
        FROM
            card_detail cd join
            cms_card_detail_extention ccde on ccde.card_ref_no  = cd.card_ref_number ;
            
    type t_eod is table of c1%rowtype;  
    
    tt_eod t_eod;
   
BEGIN
    
    DELETE FROM card_balance_eod_history
    WHERE TRUNC(eod_date) = TRUNC(SYSDATE-1);

     open  c1 ;
    loop
    fetch c1 bulk collect into tt_eod;
    exit when tt_eod.count = 0;
   
   for i in tt_eod.first .. tt_eod.count loop 
      
        get_card_balance_till_p_date(
            tt_eod(i).hash_card_number,
            trunc(SYSDATE),
            p_msg,
            p_host_bal,
            p_shadow_bal,
            p_total_bal,
            p_9f10_chip_bal,
            p_total_credit,
            p_total_debit
        );

        INSERT INTO card_balance_eod_history (
            hash_card_number,
            product_id,
            issuer_id,
            host_bal,
            shadow_bal,
            total_bal,
            update_date,
			eod_date,
            card_ref_number,
            status,
            account_number,
            cust_seq_id,
            mask_no,
            issue_date,
            total_credit,
            total_debit,
            mo_id
        ) VALUES (
            tt_eod(i).hash_card_number,
            tt_eod(i).product_id,
            tt_eod(i).issuer_id,
            p_host_bal,
            p_shadow_bal,
            p_total_bal,
            trunc(SYSDATE),
            trunc(SYSDATE)-1,
            tt_eod(i).card_ref_number,
            tt_eod(i).status,
            tt_eod(i).prep_account_number,
            tt_eod(i).cust_seq_id,
            tt_eod(i).mask_card_number,
            tt_eod(i).issued_date,
            p_total_credit,
            p_total_debit,
            tt_eod(i).mo_id
        );

    END LOOP;
   
   end loop;

    p_out := 'Success';
    dbms_output.put_line('Success');

EXCEPTION
    WHEN OTHERS THEN
        p_out := 'In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm ;

        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE card_balance_eod_proc_bk_d(p_date character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
    p_msg             VARCHAR2(2000);
    p_host_bal        NUMBER;
    p_shadow_bal      NUMBER;
    p_total_bal       NUMBER;
    p_total_credit      NUMBER;
    p_total_debit       NUMBER; 
    p_9f10_chip_bal   NUMBER;
   
   
    cursor c1 is
    SELECT
            cd.hash_card_number,
            cd.product_id,
            cd.issuer_id,
            cd.card_ref_number,
            cd.status,
            cd.prep_account_number,
            cd.cust_seq_id,
            ccde.mask_card_number,
            ccde.issued_date,
            ccde.mo_id
        FROM
            card_detail cd join
            cms_card_detail_extention ccde on ccde.card_ref_no  = cd.card_ref_number ;
            
    type t_eod is table of c1%rowtype;  
    
    tt_eod t_eod;
   
   v_date date := to_date(p_date,'dd-mm-yyyy');
   
BEGIN
    
    DELETE FROM card_balance_eod_history
    WHERE TRUNC(eod_date) = TRUNC(v_date-1);

     open  c1 ;
    loop
    fetch c1 bulk collect into tt_eod;
    exit when tt_eod.count = 0;
   
   for i in tt_eod.first .. tt_eod.count loop 
      
        get_card_balance_till_p_date(
            tt_eod(i).hash_card_number,
            trunc(v_date),
            p_msg,
            p_host_bal,
            p_shadow_bal,
            p_total_bal,
            p_9f10_chip_bal,
            p_total_credit,
            p_total_debit
        );

        INSERT INTO card_balance_eod_history (
            hash_card_number,
            product_id,
            issuer_id,
            host_bal,
            shadow_bal,
            total_bal,
            update_date,
			eod_date,
            card_ref_number,
            status,
            account_number,
            cust_seq_id,
            mask_no,
            issue_date,
            total_credit,
            total_debit,
            mo_id
        ) VALUES (
            tt_eod(i).hash_card_number,
            tt_eod(i).product_id,
            tt_eod(i).issuer_id,
            p_host_bal,
            p_shadow_bal,
            p_total_bal,
            trunc(SYSDATE),
            trunc(v_date)-1,
            tt_eod(i).card_ref_number,
            tt_eod(i).status,
            tt_eod(i).prep_account_number,
            tt_eod(i).cust_seq_id,
            tt_eod(i).mask_card_number,
            tt_eod(i).issued_date,
            p_total_credit,
            p_total_debit,
            tt_eod(i).mo_id
        );

    END LOOP;
   
   end loop;

    p_out := 'Success';
    dbms_output.put_line('Success');

EXCEPTION
    WHEN OTHERS THEN
        p_out := 'In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm ;

        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE card_closer_daily_proc()
 SECURITY DEFINER
AS $procedure$
    v_issuer_id   NUMBER :=  262;
    v_balance     NUMBER;
    v_update_bal_code  varchar2(20);
    v_update_bal_msg varchar2(100);
	v_arn_ref    varchar2(50);
    v_avl_bal numeric:=0;
	v_hold_bal numeric:=0;
	v_curr_bal numeric:=0;
	v_resp_code character varying(5);
	v_resp_msg character varying(50);
	v_settle_flag character varying(1);
    v_prev_bal numeric:=0;

	pragma autonomous_transaction;
BEGIN
-- ALL CARDS WITH DORMANCY
------------------------------
    FOR i IN (
        SELECT
            *
        FROM
            card_detail
        WHERE
            trunc(card_closure_date)=trunc(sysdate)
--            AND issuer_id = v_issuer_id
    ) LOOP
-- DORMANCY FEE
------------------------

    
    v_balance := balance_check(i.hash_card_number);
   
        IF ( v_balance < 0 ) THEN
		
		-- ADDING CREDIT ENTRY TO DIGITAL TABLE
		   -------------------------------------------
            SELECT
                lpad(load_seq.NEXTVAL, 16, 0)
            INTO v_arn_ref
            FROM
                dual;
		   
		   -- DEDUCT FROM SIMBA ACCOUNT
		   --------------------------------		   
            INSERT INTO simba_txn_detail (
                account_no,
                customer_account,
                card_no,
                txn_type,
                original_txn_ref,
                amount,
                txn_desc,
                drcr
            ) VALUES (
                '123456789',
                i.prep_account_number,
                i.hash_card_number,
                '10119',
                v_arn_ref,
                abs(v_balance),
                'txn debit',
                'D'
            );
		   
		
		
           -- MAKING THE BALANCE TO 0    
        -----------------------------
--        balance_update(i.hash_card_number, abs(v_balance)::text, 'D', v_update_bal_code, v_update_bal_msg);
--        IF ( v_update_bal_code = '00' AND v_update_bal_code = 'SUCCESS' ) THEN
--            COMMIT;
--        END IF;

     dbms_output.put_line('before account update proc call '||i.hash_card_number);

      account_balance_update(i.hash_Card_number,abs(v_balance),0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||i.hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code ='00' then
             
           
           
           -- INSERT INTO DIGITAL_TXN_AUTHORIZATION	
           ------------------------------------------		   
            INSERT INTO digital_txn_authorization (
                id,
                arn,
                branch_id,
                card_enc,
                card_token,
                channel_id,
                channel_type,
                date_time,
                dr_cr_flag,
                msg_type,
                response_code,
                txn_amount,
                last_settle_date,
                mid,
                topup_pay_mode,
                topup_txn_refno,
                source_req_id,
                arn_reference,
                pg_mid,
                txn_id,
                ref_tid,
                txn_type,
                prepaid_account_number,
                available_balance ,
                hold_balance ,
                current_balance ,
                settle_flag ,
                settle_date ,
                previous_balance 
            ) VALUES (
                digital_txn_seq.NEXTVAL,
                'SUCCESS',
                NULL,
                i.hash_card_number,
                i.hash_card_number,
                NULL,--channel id
                NULL, --p_channel_type
                sysdate,
                'Cr',
                'adjust',
                '00',
                abs(v_balance),
                sysdate,
                NULL, --mid
                NULL, --p_pay_mode
                NULL, -- p_pay_txn_ref_no
                NULL, --p_src_req_id
                v_arn_ref,
                NULL, --p_pg_mid
                NULL, --p_txn_id
                NULL,  --p_ref_tid
                '10118', -- Txn_type for dormancy    
                i.prep_account_number,
                v_avl_bal,
                v_hold_bal,
                v_curr_bal,
                v_settle_flag,
                systimestamp,
                v_prev_bal
            );            
            
           
		   -- MAKING CARD STATUS PHL
		   --------------------------

            UPDATE card_detail
            SET
                reason_code = '08',  -- reason code for card closure
                status = 'PHL'           -- Status changes to PHL
            WHERE
                card_ref_number = i.card_ref_number;
               
          insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag)
						values 
						(i.card_ref_number,'PHL',sysdate,'Scheduler',i.prep_account_number, null);                  
         

    end if;
        ELSIF ( v_balance = 0 ) then
       
		
		   -- MAKING CARD STATUS PHL
		   ---------------------------
            UPDATE card_detail
            SET
                reason_code = '08',  -- reason code for card closure
                status = 'PHL'           -- Status changes to PHL
            WHERE
                card_ref_number = i.card_ref_number;

        ELSE
		
		-- when balance is possitive
		
          SELECT
                lpad(load_seq.NEXTVAL, 16, 0)
            INTO v_arn_ref
            FROM
                dual;

			
         dbms_output.put_line('before account update proc call '||i.hash_card_number);

      account_balance_update(i.hash_Card_number,abs(v_balance),0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||i.hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code ='00' then 
--    
----  balance_update(i.hash_card_number, -v_balance::text, 'D', v_update_bal_code, v_update_bal_msg);
--        IF ( v_update_bal_code = '00' AND v_update_bal_code = 'SUCCESS' ) THEN
--            COMMIT;
--        END IF;
--        
        INSERT INTO simba_txn_detail (
                account_no,
                customer_account,
                card_no,
                txn_type,
                original_txn_ref,
                amount,
                txn_desc,
                drcr
            ) VALUES (
                '123456789',
                i.prep_account_number,
                i.hash_card_number,
                '10118',
                v_arn_ref,
                abs(v_balance),
                'txn credit',
                'C'
            );
			

      INSERT INTO digital_txn_authorization (
                id,
                arn,
                branch_id,
                card_enc,
                card_token,
                channel_id,
                channel_type,
                date_time,
                dr_cr_flag,
                msg_type,
                response_code,
                txn_amount,
                last_settle_date,
                mid,
                topup_pay_mode,
                topup_txn_refno,
                source_req_id,
                arn_reference,
                pg_mid,
                txn_id,
                ref_tid,
                txn_type,
                prepaid_account_number,
                available_balance ,
                hold_balance ,
                current_balance ,
                settle_flag ,
                settle_date ,
                previous_balance 
            ) VALUES (
                digital_txn_seq.NEXTVAL,
                'SUCCESS',
                NULL,
                i.hash_card_number,
                i.hash_card_number,
                NULL,--channel id
                NULL, --p_channel_type
                sysdate,
                'Dr',
                'adjust',
                '00',
                abs(v_balance),
                sysdate,
                NULL, --mid
                NULL, --p_pay_mode
                NULL, -- p_pay_txn_ref_no
                NULL, --p_src_req_id
                v_arn_ref,
                NULL, --p_pg_mid
                NULL, --p_txn_id
                NULL,  --p_ref_tid
                '10119', -- Txn_type for dormancy    
                i.prep_account_number,
                v_avl_bal,
                v_hold_bal,
                v_curr_bal,
                v_settle_flag,
                systimestamp,
                v_prev_bal
            );            
           
			 -- MAKING CARD STATUS PHL
		   --------------------------

            UPDATE card_detail
            SET
                reason_code = '08',  -- reason code for card closure
                status = 'PHL'           -- Status changes to PHL
            WHERE
                card_ref_number = i.card_ref_number;
               
               
             insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(i.card_ref_number,i.status,sysdate,'Scheduler',i.prep_account_number, 'PH','08');                  
             

			end if;
            
        END IF;

        COMMIT;
    END LOOP;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE check_file_process(p_file_code character varying, p_date character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
    v_cnt   NUMBER;
    v_seq   NUMBER;
BEGIN
    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cs_config_filenamemaster
    WHERE
        file_code = p_file_code;

    IF
        v_cnt = 0
    THEN
        p_out := '1,Invalid File, Do you want to proceed further?'; --Invalid File Code - Failure
        return;
    END IF;

    SELECT
        file_seq
    INTO
        v_seq
    FROM
        cs_config_filenamemaster
    WHERE
        file_code = p_file_code;

    IF
        v_seq = 1
    THEN
        p_out := '0,Success'; --Success
        return;
    END IF;
    
    IF 
        v_seq > 1
    THEN
        SELECT
            COUNT(1)
        INTO
            v_cnt
        FROM
            cs_filemaster
        WHERE
                file_date = p_date
            AND
                file_priority = CASE WHEN v_seq IN (2,3) THEN v_seq - 1 ELSE 2 END;
                
        IF
            v_cnt = 0
        THEN
           -- p_out := '02,Mandatory files missing, Do you want to proceed further?'; --Invalid Date -- Failure
             p_out := '2,Mandatory files missing';
            
            return;
        END IF;                
                
    END IF;
    

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cs_filemaster
    WHERE
        file_date = p_date;

    IF
        v_cnt = 0
    THEN
        p_out := '3,Invalid Date, Do you want to proceed further?'; --Invalid Date -- Failure
        return;
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cs_filemaster
    WHERE
            file_date = p_date
        AND
            file_priority = v_seq - 1;

    IF
        v_cnt = 0
    THEN
        --p_out := '4,File should be processed in sequence, Do you want to proceed further?'; --Earlier processes are not completed yet-- Failure
        p_out := '4,Currently file is not processed in sequence, still do you want to proceed further?'; --Earlier processes are not completed yet-- Failure
        return;
    ELSE
        p_out := '0,Success'; --Success
        return;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        p_out := '5,Error'; --Error

        dbms_output.put_line('In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm);
    
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE country_whitelist_his(p_card_ref_number character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
BEGIN
    INSERT INTO cms_country_whitelist_history (
card_ref_number ,
country_list,
nationality,
entry_date,
update_date,
updated_by 
    )
        SELECT
card_ref_no ,
country_list,
nationality,
entry_date,
update_date,
updated_by 
        FROM
            cms_country_whitelist
        WHERE
          card_ref_no  = p_card_ref_number ;

    p_out := 'success';
EXCEPTION
    WHEN OTHERS THEN
        p_out := 'fail';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION cs_fee_queue_seq_cs_fee_queue()
 RETURNS trigger
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$begin
	   
  if :new.SEQ_ID is null then
  :new.SEQ_ID := TO_CHAR(SYSDATE, 'DDMONYY') || '.' || LPAD(cs_fee_queue_seq.NEXTVAL, 8, '0') ;
end if;

end$function$
;

CREATE OR REPLACE FUNCTION cs_fee_queue_seq_cs_fee_queue()
 RETURNS trigger
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$begin
	   
  if :new.SEQ_ID is null then
  :new.SEQ_ID := TO_CHAR(SYSDATE, 'DDMONYY') || '.' || LPAD(cs_fee_queue_seq.NEXTVAL, 8, '0') ;
end if;

end$function$
;

CREATE OR REPLACE FUNCTION cs_fee_temp_seq_cs_fee_temp()
 RETURNS trigger
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$begin
	   
  if :new.SEQ_ID is null then
  :new.SEQ_ID := TO_CHAR(SYSDATE, 'DDMONYY') || '.' || LPAD(cs_fee_temp_seq.NEXTVAL, 8, '0') ;
end if;

end$function$
;

CREATE OR REPLACE FUNCTION cs_fee_temp_seq_cs_fee_temp()
 RETURNS trigger
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$begin
	   
  if :new.SEQ_ID is null then
  :new.SEQ_ID := TO_CHAR(SYSDATE, 'DDMONYY') || '.' || LPAD(cs_fee_temp_seq.NEXTVAL, 8, '0') ;
end if;

end$function$
;

CREATE OR REPLACE PROCEDURE cust_details_process_perso(p_batch_no character varying, p_userid numeric, p_issuer_id numeric, p_branchid numeric, p_filename character varying, p_rejected numeric, OUT p_out_response character varying)
 SECURITY DEFINER
AS $procedure$
  v_count_cust             NUMBER;
  v_count_temp             NUMBER;
  mmy_cust_mobile_cnt      NUMBER;
  mmy_temp_cust_mobile_cnt NUMBER;
  v_rejected_count         NUMBER := 0;
  v_success_count          NUMBER := 0;
  v_total_count            NUMBER := 0;
  v_flag                   VARCHAR2(1);
  v_cust_id                VARCHAR2(50);
  v_cust_ref_no            VARCHAR2(50);
  v_prepaid_acc_no         VARCHAR2(50);
  v_prod_cnt               NUMBER;
  v_outlet_cnt             NUMBER;
  v_app_count              NUMBER;
  v_prefix                 VARCHAR2(20);
  v_prefix_len             NUMBER;
  v_bin                    NUMBER := 0;
  v_prod_id                NUMBER := 0;
  v_fee_amount             NUMBER;
  --v_reason_code             NUMBER;
  v_cms_batch_summary_cnt NUMBER;
  v_old_card_ref_no       VARCHAR2(20);
  v_old_status            VARCHAR2(20);
  v_old_hash_card_no      VARCHAR2(64);
  v_old_product_id        NUMBER;
  v_old_bin               NUMBER;
  v_old_pan_seq_no        VARCHAR2(20);
  v_bin_cnt               NUMBER;
  --v_reason_message VARCHAR2(100);
  v_status      VARCHAR2(100);
  v_reason_code VARCHAR2(100);
  v_status_cnt number;
  d_dup_p_msg varchar2(100);
  d_dup_msg_code  varchar2(10);
  v_crn_type varchar2(50);
  l_context text;
 
--pragma autonomous_TRANSACTION; 
 

BEGIN

 insert into temp_cust_detail_hist select * from temp_cust_detail where batch_no =p_batch_no;

  SELECT COUNT(bin)
  INTO v_bin_cnt
  FROM temp_cust_detail
  WHERE batch_no = p_batch_no
  AND card_type IN ( 'N', 'R/N');
  IF v_bin_cnt   > 0 THEN
    SELECT DISTINCT NVL(bin,'0'),
      NVL(product_id,'0'),
      crn_type
    INTO v_bin,
      v_prod_id,
      v_crn_type
    FROM temp_cust_detail
    WHERE batch_no = p_batch_no
    AND card_type IN ( 'N', 'R/N');
    SELECT locked
    INTO v_flag
    FROM sequence_master s
    WHERE s.crn_type = v_crn_type
    and s.inst_id = (select cp.inst_id  from cms_product cp where cp.id = v_prod_id)
    --bin      = v_bin
    --and sub_bin = (select sub_bin from prd_sub_bin p where p.product_id = v_prod_id and p.bin = v_bin)
   -- AND product_id = v_prod_id
   ;
  END IF;
  --DBMS_OUTPUT.PUT_LINE(v_bin || ' '|| v_prod_id);
  dbms_output.put_line('Before v_flag'||'    '||v_flag);
  IF v_flag = 'N' THEN
    UPDATE sequence_master s
    SET locked     = 'Y'
    where s.crn_type = v_crn_type
    and s.inst_id = (select cp.inst_id  from cms_product cp where cp.id = v_prod_id) 
    --bin      = v_bin
    --and sub_bin = (select sub_bin from prd_sub_bin p where p.product_id = v_prod_id and p.bin = v_bin)
   -- AND product_id = v_prod_id
   ;
    --      select count(*)
    --      into v_total_count
    --      from TEMP_CUST_DETAIL
    --      where batch_no = P_BATCH_NO;
    --1st loop to check product id is valid or not
    FOR j IN
    (SELECT product_id
    FROM temp_cust_detail
    WHERE batch_no = p_batch_no
    AND card_type IN ( 'N', 'R/N' )
    )
    LOOP
      SELECT COUNT(*)
      INTO v_prod_cnt
      FROM cms_product
      WHERE id      = j.product_id
      AND status    = 'A';
      IF v_prod_cnt = 0 --not valid
        THEN
        INSERT
        INTO cms_rejected_cust_details
          (
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line_1,
            current_address_line_2,
            current_address_line_3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line_1,
            permanent_address_line_2,
            permanent_address_line_3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_land_line,
            permanent_land_line,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line_1,
            company_address_line_2,
            company_address_line_3,
            company_telephone_number1,
            company_fax_number_1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_non_photo,
            branch_id,
            staff_code,
            card_type,
            product_id,
            bin,
            batch_no,
            rejected_reason,
            cust_seq_id,
            issuer_id,
            prepaid_account_number,
            cust_ref_number,
            embossing_line2,
            kyc_required,
            photo_id,
            pass_type,
            pass_amount,
            application_ref_no,
            delivery_dest,
            n_rega_job_card,
            voter_id,
            dnd_flag,
            PRELOADED_AMOUNT
          )
        SELECT salutation,
          first_name,
          middle_name,
          last_name,
          age,
          gender,
          date_of_birth,
          current_address_line1,
          current_address_line2,
          current_address_line3,
          current_pin_code,
          current_city,
          current_state,
          current_country,
          permanent_address_line1,
          permanent_address_line2,
          permanent_address_line3,
          permanent_pin_code,
          permanent_city,
          permanent_state,
          permanent_country,
          current_landline_number,
          permanent_landline_number,
          mobile_number,
          email_id,
          fax_no,
          marital_status,
          minor_flag,
          nre_o,
          occupation,
          pan_number,
          aadhar_number,
          passport_number,
          NULL,
          company_name,
          company_address_line1,
          company_address_line2,
          company_address_line3,
          company_telephone_numbe1,
          company_fax_number1,
          company_url,
          company_city,
          company_state,
          company_country,
          company_code,
          education,
          license_number,
          photo_nonphoto,
          branch_id,
          staf_code,
          card_type,
          product_id,
          bin,
          batch_no,
          'Product does not exist',
          id,
          issuer_id,
          prepaid_account_number,
          cust_ref_number,
          embossing_line2,
          kyc_required,
          photo_id,
          pass_type,
          pass_amount,
          application_ref_no,
          delivery_dest,
          n_rega_job_card,
          voter_id,
          dnd_flag,
          PRELOADED_AMOUNT
        FROM temp_cust_detail
        WHERE batch_no = p_batch_no
        AND product_id = j.product_id;
        dbms_output.put_line('Insert 1');

--        INSERT
--        INTO STATUS_HISTORY
--          (
--            ID,
--            STATUS,
--            REJECT_REASON,
--            CREATED_BY,
--            CREATED_DATE,
--            CUST_SEQ_ID,
--            APPLICATION_REF_NO
--          )
--        SELECT STATUS_HISTORY_ID_SEQ.nextval,
--          'Rejected',
--          'Product does not exist',
--          uploaded_by,
--          uploaded_on,
--          NULL,
--          APPLICATION_REF_NO
--        FROM temp_cust_detail
--        WHERE batch_no    = p_batch_no
--        AND product_id    = j.product_id;
--         dbms_output.put_line('Insert 2');
--        v_rejected_count := v_rejected_count + 1;
--        DELETE
--        FROM temp_cust_detail
--        WHERE batch_no = p_batch_no
--        AND product_id = j.product_id;
      END IF;
    END LOOP;
    --2nd loop to check if outlet id is valid or not
    FOR k IN
    (SELECT outlet_id
    FROM temp_cust_detail
    WHERE batch_no = p_batch_no
    AND card_type IN ( 'N', 'R/N' )
    )
    LOOP
      SELECT COUNT(*)
      INTO v_outlet_cnt
      FROM cms_outlet
      WHERE outlet_id = k.outlet_id
      AND parent_id  <> 0
      AND status      = 'A';
      IF v_outlet_cnt = 0 --not valid.
        THEN
        INSERT
        INTO cms_rejected_cust_details
          (
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line_1,
            current_address_line_2,
            current_address_line_3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line_1,
            permanent_address_line_2,
            permanent_address_line_3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_land_line,
            permanent_land_line,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line_1,
            company_address_line_2,
            company_address_line_3,
            company_telephone_number1,
            company_fax_number_1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_non_photo,
            branch_id,
            staff_code,
            card_type,
            product_id,
            bin,
            batch_no,
            rejected_reason,
            cust_seq_id,
            issuer_id,
            prepaid_account_number,
            cust_ref_number,
            embossing_line2,
            kyc_required,
            photo_id,
            pass_type,
            pass_amount,
            application_ref_no,
            delivery_dest,
            n_rega_job_card,
            voter_id,
            dnd_flag,
            PRELOADED_AMOUNT
          )
        SELECT salutation,
          first_name,
          middle_name,
          last_name,
          age,
          gender,
          date_of_birth,
          current_address_line1,
          current_address_line2,
          current_address_line3,
          current_pin_code,
          current_city,
          current_state,
          current_country,
          permanent_address_line1,
          permanent_address_line2,
          permanent_address_line3,
          permanent_pin_code,
          permanent_city,
          permanent_state,
          permanent_country,
          current_landline_number,
          permanent_landline_number,
          mobile_number,
          email_id,
          fax_no,
          marital_status,
          minor_flag,
          nre_o,
          occupation,
          pan_number,
          aadhar_number,
          passport_number,
          NULL,
          company_name,
          company_address_line1,
          company_address_line2,
          company_address_line3,
          company_telephone_numbe1,
          company_fax_number1,
          company_url,
          company_city,
          company_state,
          company_country,
          company_code,
          education,
          license_number,
          photo_nonphoto,
          branch_id,
          staf_code,
          card_type,
          product_id,
          bin,
          batch_no,
          'Outlet does not exist',
          id,
          issuer_id,
          prepaid_account_number,
          cust_ref_number,
          embossing_line2,
          kyc_required,
          photo_id,
          pass_type,
          pass_amount,
          application_ref_no,
          delivery_dest,
          n_rega_job_card,
          voter_id,
          dnd_flag,
          PRELOADED_AMOUNT
        FROM temp_cust_detail
        WHERE batch_no = p_batch_no
        AND outlet_id  = k.outlet_id;
         dbms_output.put_line('Insert 3');
        
        
--        INSERT
--        INTO STATUS_HISTORY
--          (
--            ID,
--            STATUS,
--            REJECT_REASON,
--            CREATED_BY,
--            CREATED_DATE,
--            CUST_SEQ_ID,
--            APPLICATION_REF_NO
--          )
--        SELECT STATUS_HISTORY_ID_SEQ.nextval,
--          'Rejected',
--          'Outlet does not exist',
--          uploaded_by,
--          uploaded_on,
--          ID,
--          APPLICATION_REF_NO
--        FROM temp_cust_detail
--        WHERE batch_no    = p_batch_no
--        AND outlet_id     = k.outlet_id;
--        v_rejected_count := v_rejected_count + 1;
--        DELETE
--        FROM temp_cust_detail
--        WHERE batch_no = p_batch_no
--        AND outlet_id  = k.outlet_id;
         dbms_output.put_line('Insert 4');
      END IF;
    END LOOP;
        
   --2nd loop to check duplicate application ref no's
  /*  FOR i IN
    (SELECT application_ref_no FROM temp_cust_detail WHERE batch_no = p_batch_no
    )
    --                  and card_type='N')
    LOOP
      SELECT COUNT(*)
      INTO v_app_count
      FROM cms_cust_details
      WHERE lower(application_ref_no) = lower(i.application_ref_no);
      IF v_app_count                  > 0 THEN
        INSERT
        INTO cms_rejected_cust_details
          (
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line_1,
            current_address_line_2,
            current_address_line_3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line_1,
            permanent_address_line_2,
            permanent_address_line_3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_land_line,
            permanent_land_line,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line_1,
            company_address_line_2,
            company_address_line_3,
            company_telephone_number1,
            company_fax_number_1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_non_photo,
            branch_id,
            staff_code,
            card_type,
            product_id,
            bin,
            batch_no,
            rejected_reason,
            cust_seq_id,
            issuer_id,
            prepaid_account_number,
            cust_ref_number,
            embossing_line2,
            kyc_required,
            photo_id,
            pass_type,
            pass_amount,
            application_ref_no,
            delivery_dest,
            n_rega_job_card,
            voter_id,
            dnd_flag,
            PRELOADED_AMOUNT
          )
        SELECT salutation,
          first_name,
          middle_name,
          last_name,
          age,
          gender,
          date_of_birth,
          current_address_line1,
          current_address_line2,
          current_address_line3,
          current_pin_code,
          current_city,
          current_state,
          current_country,
          permanent_address_line1,
          permanent_address_line2,
          permanent_address_line3,
          permanent_pin_code,
          permanent_city,
          permanent_state,
          permanent_country,
          current_landline_number,
          permanent_landline_number,
          mobile_number,
          email_id,
          fax_no,
          marital_status,
          minor_flag,
          nre_o,
          occupation,
          pan_number,
          aadhar_number,
          passport_number,
          NULL,
          company_name,
          company_address_line1,
          company_address_line2,
          company_address_line3,
          company_telephone_numbe1,
          company_fax_number1,
          company_url,
          company_city,
          company_state,
          company_country,
          company_code,
          education,
          license_number,
          photo_nonphoto,
          branch_id,
          staf_code,
          card_type,
          product_id,
          bin,
          batch_no,
          'Reference No. already exists',
          id,
          issuer_id,
          prepaid_account_number,
          cust_ref_number,
          embossing_line2,
          kyc_required,
          photo_id,
          pass_type,
          pass_amount,
          application_ref_no,
          delivery_dest,
          n_rega_job_card,
          voter_id,
          dnd_flag,
          PRELOADED_AMOUNT
        FROM temp_cust_detail
        WHERE batch_no         = p_batch_no
        AND application_ref_no = i.application_ref_no;
         dbms_output.put_line('Insert 7');
        
        v_rejected_count      := v_rejected_count + 1;
        DELETE
        FROM temp_cust_detail
        WHERE batch_no         = p_batch_no
        AND application_ref_no = i.application_ref_no;
      END IF;
    END LOOP;*/
   
    --4th loop for de dup check.
    FOR i  IN
    (SELECT *
    FROM temp_cust_detail
    WHERE batch_no   = p_batch_no
    AND card_type   IN ( 'N', 'R/N' )
    AND active_flag IS NULL
    )
    LOOP
    
      SELECT COUNT(*)
      INTO v_count_cust
      FROM cms_cust_details
      WHERE lower(first_name) = lower(i.first_name)
      AND lower(last_name)    = lower(i.last_name)
      AND date_of_birth       = i.date_of_birth
      AND mobile_number       = i.mobile_number
      AND batch_no           != p_batch_no;
      dbms_output.put_line('v_count_cust ' || v_count_cust);
      /*
      IF v_count_cust > 0
      THEN
      v_reason_message:='Duplicate customer details found';
      END IF;
      */
      SELECT COUNT(*)
      INTO v_count_temp
      FROM temp_cust_detail
      WHERE lower(first_name) = lower(i.first_name)
      AND lower(last_name)    = lower(i.last_name)
      AND date_of_birth       = i.date_of_birth
      AND mobile_number       = i.mobile_number
      AND batch_no           != p_batch_no;
      dbms_output.put_line('v_count_temp ' || v_count_temp);
      
     
      SELECT cust_seq_id,
        cust_ref_number,
        prepaid_account_number,
        prefix,
        LENGTH(prefix)
      INTO v_cust_id,
        v_cust_ref_no,
        v_prepaid_acc_no,
        v_prefix,
        v_prefix_len
      FROM sequence_master s
      WHERE s.crn_type = v_crn_type
    and s.inst_id = (select cp.inst_id  from cms_product cp where cp.id = v_prod_id)      
      --bin         = i.bin
      --and sub_bin = (select sub_bin from prd_sub_bin p where p.product_id = v_prod_id and p.bin = v_bin)
      --AND product_id    = i.product_id
     ;
	   
	  dbms_output.put_line('v_cust_id : '||v_cust_id||'--'||v_prefix_len);
	  dbms_output.put_line('v_cust_id is : '||v_prefix||v_cust_id);
	 
	 
	  
      v_cust_id        := v_prefix || lpad(v_cust_id+1::integer,(20 - v_prefix_len)::integer,0);	
       dbms_output.put_line('v_cust_id new: '||v_cust_id);
      v_cust_ref_no    := v_prefix || lpad(v_cust_ref_no    + 1::integer,(20 - v_prefix_len)::integer,0);
      v_prepaid_acc_no := v_prefix || lpad(v_prepaid_acc_no + 1::integer,(20 - v_prefix_len)::integer,0);
      
     -- d_dup_check(i.mobile_number,i.product_id,p_batch_no,'F',d_dup_msg_code,d_dup_p_msg); or d_dup_msg_code != '00'  --SIRAM
     
     dbms_output.put_line('sp_d_dup_check ');
      
      IF (v_count_cust   > 0 OR v_count_temp > 0) THEN
        dbms_output.put_line('in v_count_cust > 0 or v_count_temp > 0');
        INSERT
        INTO cms_rejected_cust_details
          (
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line_1,
            current_address_line_2,
            current_address_line_3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line_1,
            permanent_address_line_2,
            permanent_address_line_3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_land_line,
            permanent_land_line,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line_1,
            company_address_line_2,
            company_address_line_3,
            company_telephone_number1,
            company_fax_number_1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_non_photo,
            branch_id,
            staff_code,
            card_type,
            product_id,
            bin,
            batch_no,
            rejected_reason,
            cust_seq_id,
            issuer_id,
            prepaid_account_number,
            cust_ref_number,
            embossing_line2,
            kyc_required,
            photo_id,
            pass_type,
            pass_amount,
            application_ref_no,
            delivery_dest,
            n_rega_job_card,
            voter_id,
            dnd_flag,
            PRELOADED_AMOUNT,bin_card_type    ---added bu siram virt/phy 
          )
          VALUES
          (
            i.salutation,
            i.first_name,
            i.middle_name,
            i.last_name,
            i.age,
            i.gender,
            i.date_of_birth,
            i.current_address_line1,
            i.current_address_line2,
            i.current_address_line3,
            i.current_pin_code,
            i.current_city,
            i.current_state,
            i.current_country,
            i.permanent_address_line1,
            i.permanent_address_line2,
            i.permanent_address_line3,
            i.permanent_pin_code,
            i.permanent_city,
            i.permanent_state,
            i.permanent_country,
            i.current_landline_number,
            i.permanent_landline_number,
            i.mobile_number,
            i.email_id,
            i.fax_no,
            i.marital_status,
            i.minor_flag,
            i.nre_o,
            i.occupation,
            i.pan_number,
            i.aadhar_number,
            i.passport_number,
            NULL,
            i.company_name,
            i.company_address_line1,
            i.company_address_line2,
            i.company_address_line3,
            i.company_telephone_numbe1,
            i.company_fax_number1,
            i.company_url,
            i.company_city,
            i.company_state,
            i.company_country,
            i.company_code,
            i.education,
            i.license_number,
            i.photo_nonphoto,
            i.branch_id,
            i.staf_code,
            i.card_type,
            i.product_id,
            i.bin,
            i.batch_no,
            'Duplicate customer details found' ,
            i.id,
            i.issuer_id,
            i.prepaid_account_number,
            i.cust_ref_number,
            i.embossing_line2,
            i.kyc_required,
            i.photo_id,
            i.pass_type,
            i.pass_amount,
            i.application_ref_no,
            i.delivery_dest,
            i.n_rega_job_card,
            i.voter_id,
            i.dnd_flag,
            i.PRELOADED_AMOUNT,i.bin_card_type    -- ---added bu siram virt/phy 
          );
           dbms_output.put_line('Insert 9');

        v_rejected_count := v_rejected_count + 1;
        dbms_output.put_line('v_rejected_count ' || v_rejected_count);
      ELSE
        --insert unique records
        dbms_output.put_line('in ELSE');
        INSERT
        INTO cms_cust_details
          (
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line1,
            current_address_line2,
            current_address_line3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line1,
            permanent_address_line2,
            permanent_address_line3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_landline_number,
            permanent_landline_number,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line1,
            company_address_line2,
            company_address_line3,
            company_telephone_number1,
            company_fax_number1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_nonphoto,
            branch_id,
            staf_code,
            embossing_line2,
            card_type,
            product_id,
            bin,
            batch_no,
            kyc_required,
            cust_ref_number,
            prepaid_account_number,
            uploaded_by,
            uploaded_on,
            card_gen_date,
            card_gen_by,
            pin_gen_date,
            pin_gen_by,
            cvv_gen_date,
            cvv_gen_by,
            embossing_file_gen_date,
            embossing_file_gen_by,
            embossing_file_name,
            cust_seq_id,
            issuer_id,
            dispatch_status,
            checker_status,
            checker_verified_on,
            checker_verified_by,
            tag_generated_by,
            tag_generated_date,
            embossname,
            cheker_description,
            outlet_id,
            application_ref_no,
            photo_id,
            pass_type,
            pass_amount,
            delivery_dest,
            old_to_newaccount_flag,
            old_card_number,
            n_rega_job_card,
            voter_id,
            kyc_flag,
            PRELOADED_AMOUNT,
            requested_kyc_type,bin_card_type,order_type    ---added by siram for card_type_
          )
          VALUES
          (
            i.salutation,
            i.first_name,
            i.middle_name,
            i.last_name,
            i.age,
            i.gender,
            i.date_of_birth,
            i.current_address_line1,
            i.current_address_line2,
            i.current_address_line3,
            i.current_pin_code,
            i.current_city,
            i.current_state,
            i.current_country,
            i.permanent_address_line1,
            i.permanent_address_line2,
            i.permanent_address_line3,
            i.permanent_pin_code,
            i.permanent_city,
            i.permanent_state,
            i.permanent_country,
            i.current_landline_number,
            i.permanent_landline_number,
            i.mobile_number,
            i.email_id,
            i.fax_no,
            i.marital_status,
            i.minor_flag,
            i.nre_o,
            i.occupation,
            case when length(i.pan_number) = 10 then 
            data_encryption_text(i.pan_number)
            else i.pan_number end,
            i.aadhar_number,
            i.passport_number,
            i.image_details,
            i.company_name,
            i.company_address_line1,
            i.company_address_line2,
            i.company_address_line3,
            i.company_telephone_numbe1,
            i.company_fax_number1,
            i.company_url,
            i.company_city,
            i.company_state,
            i.company_country,
            i.company_code,
            i.education,
            i.license_number,
            i.photo_nonphoto,
            i.branch_id,
            i.staf_code,
            i.embossing_line2,
            i.card_type,
            i.product_id,
            i.bin,
            i.batch_no,
            i.kyc_required,
            nvl(i.cust_ref_number,v_cust_ref_no),
            v_prepaid_acc_no,
            p_userid,
            SYSDATE,
            NULL,
            0,
            NULL,
            0,
            NULL,
            0,
            NULL,
            0,
            NULL,
            v_cust_id,
            p_issuer_id,
            NULL,
            'APPROVED',
            SYSDATE,
            p_userid,
            0,
            NULL,
            i.embossname,
            i.cheker_description,
            i.outlet_id,
            i.application_ref_no,
            i.photo_id,
            i.pass_type,
            i.pass_amount,
            i.delivery_dest,
            CASE
              WHEN i.old_card_number IS NULL
              THEN 'N'
              ELSE 'Y'
            END,
            i.old_card_number,
            i.n_rega_job_card,
            i.voter_id,
            'Y',
            i.PRELOADED_AMOUNT,
            i.requested_kyc_type,i.bin_card_type ,i.order_type  ---added bu siram virt/phy 
          );
           dbms_output.put_line('Insert 15');
    
        INSERT
        INTO cms_cust_details_extension
          (
            cust_seq_id,
            --                    dnd_flag,
            kyc_flag,
            created_date,
            created_by,
            updated_date,
            updated_by, cif_id ,beneficiryaccountno 
          )
          VALUES
          (
            v_cust_id,
            --                    i.dnd_flag,
            'MIN',
            SYSDATE,
            p_userid,
            SYSDATE,
            p_userid,I.CIF_ID,I.beneficiryaccountno
          );
        IF i.card_type = 'R/N' THEN
          SELECT fee_amount
          INTO v_fee_amount
          FROM prd_fee_profile
          WHERE instrument_id       = 1
          AND instrument_profile_id =
            (SELECT id
            FROM prd_instrument_profile
            WHERE product_id  = i.product_id
            AND instrument_id = 1
            )
          AND fee_type = 'REPINOC';
          SELECT om.card_ref_number,
            cd.status,
            cd.hash_card_number,
            cd.product_id,
            cd.bin,
            cd.pan_seq_no
          INTO v_old_card_ref_no,
            v_old_status,
            v_old_hash_card_no,
            v_old_product_id,
            v_old_bin,
            v_old_pan_seq_no
          FROM old_to_new_card_migration om,
            card_detail cd
          WHERE om.old_card_number = i.old_card_number
          AND om.card_ref_number   = cd.card_ref_number;
          --                                 insert into cms_perso_card_replacement (id,batch_no,cust_seq_id,old_product_id,old_bin,fee_amount,CARD_GENERATED_BY,EMBOSSING_GENERATED_BY,UPLOADED_BY,NEW_PRODUCT_ID,NEW_BIN)
          --                                 values (replacement_id.nextval,i.BATCH_NO,v_cust_id,i.PRODUCT_ID,i.BIN,v_fee_amount,0,0,0,i.PRODUCT_ID,i.BIN);
          INSERT
          INTO cms_perso_card_replacement
            (
              id,
              batch_no,
              cust_seq_id,
              old_hash_card_no,
              new_hash_card_no,
              old_card_ref_no,
              new_card_ref_no,
              card_generated_by,
              card_generated_date,
              embossing_generated_by,
              embossing_generated_date,
              uploaded_by,
              uploaded_date,
              old_card_status,
              new_card_status,
              old_product_id,
              new_product_id,
              old_bin,
              new_bin,
              pan_seq_no,
              fee_amount,
              fee_type,
              old_application_ref_no,
              new_application_ref_no,
              old_photo_id,
              new_photo_id
            )
            VALUES
            (
              replacement_id.NEXTVAL,
              i.batch_no,
              v_cust_id,
              v_old_hash_card_no,
              NULL,
              v_old_card_ref_no,
              NULL,
              0,
              NULL,
              0,
              NULL,
              0,
              NULL,
              v_old_status,
              NULL,
              v_old_product_id,
              i.product_id,
              v_old_bin,
              i.bin,
              v_old_pan_seq_no,
              v_fee_amount,
              NULL,
              NULL,
              NULL,
              NULL,
              NULL
            );
          UPDATE old_to_new_card_migration
          SET old_card_number = i.old_card_number
            || '_'
            || TO_CHAR(SYSDATE,'DDMMYY_HHmiss')
          WHERE card_ref_number = v_old_card_ref_no;
        END IF;
        UPDATE sequence_master s
        SET cust_ref_number      = cust_ref_number        + 1,
          cust_seq_id            = cust_seq_id            + 1,
          prepaid_account_number = prepaid_account_number + 1
        where s.crn_type = v_crn_type
          and s.inst_id = (select cp.inst_id  from cms_product cp where cp.id = v_prod_id) 
        --bin                = v_bin
        --and sub_bin = (select sub_bin from prd_sub_bin p where p.product_id = v_prod_id and p.bin = v_bin)
       -- AND product_id           = v_prod_id
       ;
        v_success_count         := v_success_count + 1;
      END IF; --main dedup
    END LOOP;
    dbms_output.put_line('v_rejected_count' || v_rejected_count);
    --v_total_count := v_total_count + p_rejected;
    v_rejected_count := v_rejected_count + p_rejected;
    v_total_count    := v_rejected_count + v_success_count;
    SELECT COUNT(                        *)
    INTO v_cms_batch_summary_cnt
    FROM cms_batch_summary_details
    WHERE batch_no                      = p_batch_no;
    IF ( NVL(v_cms_batch_summary_cnt,0) = 0 ) then
    
      INSERT
      INTO cms_batch_summary_details
        (
          batch_no,
          created_on,
          created_by,
          entry_mode,
          upload_file_name,
          total_records,
          rejected_records,
          successful_records,
          checker_verified_on,
          checker_verified_by,
          status,
          process_status,
          issuer_id,
          card_dispatch_flag,
          pin_dispatch_falg,
          card_dispatch_updated_by,
          pin_dispatch_updated_by,
          card_dispatch_date,
          pin_dispatch_date,
          pin_awb_no,
          dispatch_status,
          card_awb_no,
          agency_name,
          card_dispatch_to,
          pin_dispatch_to,
          updated_by,
          branch_id,
          instance_issuance_flag,
          outlet_id,
          card_ack_date
        )
        VALUES
        (
          p_batch_no,
          SYSDATE,
          p_userid,
          'BU',
          p_filename,
          v_total_count,
          v_rejected_count,
          v_success_count,
          SYSDATE,
          p_userid,
          'CPE',
          NULL,
          p_issuer_id,
          NULL,
          NULL,
          0,
          0,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          NULL,
          p_userid,
          p_branchid,
          NULL,
          0,
          NULL
        );
      --DBMS_OUTPUT.PUT_LINE('inserted');
    ELSE
      IF v_total_count = v_success_count THEN
        UPDATE cms_batch_summary_details
        SET process_status   = 'UPE',
          total_records      = v_total_count,
          rejected_records   = v_rejected_count,
          successful_records = v_success_count
        WHERE batch_no       = p_batch_no;
      ELSIF v_total_count    > v_success_count AND v_success_count != 0 THEN
        UPDATE cms_batch_summary_details
        SET process_status   = 'UPP',
          total_records      = v_total_count,
          rejected_records   = v_rejected_count,
          successful_records = v_success_count
        WHERE batch_no       = p_batch_no;
      ELSIF v_total_count    = v_rejected_count AND v_success_count = 0 THEN
        UPDATE cms_batch_summary_details
        SET process_status   = 'UPF',
          total_records      = v_total_count,
          rejected_records   = v_rejected_count,
          successful_records = v_success_count
        WHERE batch_no       = p_batch_no;
      ELSE
        UPDATE cms_batch_summary_details
        SET process_status   = 'UPF',
          total_records      = v_total_count,
          rejected_records   = v_rejected_count,
          successful_records = v_success_count
        WHERE batch_no       = p_batch_no;
      END IF;
    END IF;
    UPDATE sequence_master s
    SET locked     = 'N'
    where s.crn_type = v_crn_type
      and s.inst_id = (select cp.inst_id  from cms_product cp where cp.id = v_prod_id) 
    --bin      = v_bin
    --and sub_bin = (select sub_bin from prd_sub_bin p where p.product_id = v_prod_id and p.bin = v_bin)
   -- AND product_id = v_prod_id
   ;
  END IF; --main if
 
  DELETE
  FROM temp_cust_detail
  WHERE batch_no  = p_batch_no
  AND card_type  IN ( 'N', 'R/N' );
  p_out_response := v_success_count || ':' || v_rejected_count;
EXCEPTION
   when no_data_found then 
      dbms_output.put_line('No record found');
      dbms_output.put_line('SQL CODE' || SQLCODE || ' ' || sqlerrm );
WHEN OTHERS then
 dbms_output.put_line('SQL CODE' || SQLCODE || ' ' || sqlerrm );
--- ROLLBACK;
  UPDATE sequence_master s
  SET locked      = 'N'
  where s.crn_type = v_crn_type
    and s.inst_id = (select cp.inst_id  from cms_product cp where cp.id = v_prod_id) 
  --bin       = v_bin
  --and sub_bin = (select sub_bin from prd_sub_bin p where p.product_id = v_prod_id and p.bin = v_bin)
 -- AND product_id  = v_prod_id
 ;
 GET STACKED DIAGNOSTICS l_context = PG_EXCEPTION_CONTEXT;
   
  p_out_response := 'FAILURE,IN EXCEPTION -' || p_batch_no||'           '||l_context;
 
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE customer_txn_pagination_cc(p_account_no character varying, p_from_date character varying, p_to_date character varying, p_mcc character varying, p_txn_type character varying, p_card_ref_number character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$
--v_first   NUMBER := p_display_start + 1;
--    v_last    NUMBER := p_display_start + p_display_length;
begin
	
	dbms_output.put_line('p_txn_type '||p_txn_type);
	
    OPEN p_out FOR
        WITH all_requests AS (
            SELECT
                ROW_NUMBER() OVER(
                    ORDER BY av.sys_txn_date DESC, av.drcr_flag DESC, f037 DESC
                ) rownum1,
                av.*,
--                cd.*,
                cde.*
            FROM
                (
                    SELECT
                        ROWNUM AS id,
                        ltrim(TO_CHAR(
                            (f004 / 100),
                            999999999999999990.99
                        ) ) f004,
                        nvl(
                            (
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type a
                                WHERE
                                    a.txn_type = txn.txn_type
                            ),
                            'Service Transactions'
                        ) drcr,
                        nvl(
                            f043,
                            (
                                SELECT
                                    name
                                FROM
                                    cms_outlet
                                WHERE
                                    outlet_id = txn.f042
                            )
                        ) f043,
                        f037,
--                        TO_CHAR(sys_txn_date,'DD/MM/YYYY HH24:MI:SS') as SYS_TXN_DATE,
--                        TO_CHAR(sys_txn_date,'DD/MM/YYYY HH24:MI:SS') AS display_date,
                        sys_txn_date as sys_txn_date,
                        sys_txn_date as display_date,
                        DECODE(
                            f039,
                            '00',
                            'Success - '
                             || f038,
                            'Declined -'
                             || errc.response_reason
                        ) f039,
                        f038,
                        errc.response_reason,
                        f042,
                        f002,
                        f041,
                        settle_flag,
                        ticket_id,
                        nvl( remarks ,
                            (
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type a
                                WHERE
                                    a.txn_type = txn.txn_type
                            )) narration,
                        DECODE(
                            drcr,
                            'D',
                            'Debit',
                            'C',
                            'Credit',
                            'Dr',
                            'Debit',
                            'Cr',
                            'Credit'
                        ) drcr_flag,
                        NVL(host_bal,0) host_bal,
                        NVL(shadow_bal,0) shadow_bal,
                        prepaid_account_number,
                        f018,
                        f049,
                        txn_type
                    FROM
                        (
                            SELECT
                                settle_flag,
                                txn_issuer,
                                txn_fwd_inst_1,
                                txn_fwd_inst_2,
                                txn_auth_source,
                                txn_channel,
                                txn_type,
                                txn_code,
                                txn_date,
                                txn_time,
                                fp_masked,
                                fp_type,
                                int_mti,
                                int_ref_no,
                                txn_batch_no,
                                txn_batch_status,
                                (SELECT drcr FROM transaction_type tt WHERE tt.txn_type=off.txn_type) drcr,
                                fp_form_factor,
                                int_seq_no,
                                int_rc,
                                scheme,
                                int_rrn,
                                int_proc_code,
                                int_amt,
                                int_adj_amt1,
                                int_adj_amt2,
                                int_txn_fees1,
                                int_txn_fees2,
                                int_pos_entry_mode,
                                int_void_flag,
                                mti,
                                f002,
                                f003,
                                f004,
                                f005,
                                f006,
                                f007,
                                f008,
                                f009,
                                f010,
                                f011,
                                f012,
                                f013,
                                f014,
                                f015,
                                f016,
                                f017,
                                f018,
                                f019,
                                f020,
                                f021,
                                f022,
                                f023,
                                f024,
                                f025,
                                f026,
                                f027,
                                f028,
                                f029,
                                f030,
                                f031,
                                f032,
                                f033,
                                f034,
                                f035,
                                f036,
                                f037,
                                f038,
                                f039,
                                f040,
                                f041,
                                f042,
                                f043,
                                f044,
                                f045,
                                f046,
                                f047,
                                f048,
                                f049,
                                f050,
                                f051,
                                f052,
                                f053,
                                f054,
                                f055,
                                f056,
                                f057,
                                f058,
                                f059,
                                f060,
                                f061,
                                f062,
                                f063,
                                f064,
                                f065,
                                f066,
                                f067,
                                f068,
                                f069,
                                f070,
                                f071,
                                f072,
                                f073,
                                f074,
                                f075,
                                f076,
                                f077,
                                f078,
                                f079,
                                f080,
                                f081,
                                f082,
                                f083,
                                f084,
                                f085,
                                f086,
                                f087,
                                f088,
                                f089,
                                f090,
                                f091,
                                f092,
                                f093,
                                f094,
                                f095,
                                f096,
                                f097,
                                f098,
                                f099,
                                f100,
                                f101,
                                f102,
                                f103,
                                f104,
                                f105,
                                f106,
                                f107,
                                f108,
                                f109,
                                f110,
                                f111,
                                f112,
                                f113,
                                f114,
                                f115,
                                f116,
                                f117,
                                f118,
                                f119,
                                f120,
                                f121,
                                f122,
                                f123,
                                f124,
                                f125,
                                f126,
                                f127,
                                f128,
                                reversal_flag,
                                txn_acquirer,
                                settle_date,
                                program_id,
                                bank_id,
                                off.sys_txn_date,
                                balance_update_flag,
                                balance_update_date,
                                sub_batch_no,
                                acc_flag,
                                ticket_id,
                                bal.HOST_BAL host_bal,
                                bal.CHIP_BAL shadow_bal,
                                prepaid_account_number,
                                null as file_name,
                                null as batch_no,
                                null as remarks
                            FROM
                                aswt_switch_txn_offline off left join transaction_balance bal on 'OFFL'||off.unique_txn_id = bal.ref_txn_id
                            WHERE
                                prepaid_account_number = p_account_no
                            UNION ALL
                            SELECT
                                settle_flag,
                                txn_issuer,
                                txn_fwd_inst_1,
                                txn_fwd_inst_2,
                                txn_auth_source,
                                txn_channel,
                                txn_type,
                                txn_code,
                                txn_date,
                                txn_time,
                                fp_masked,
                                fp_type,
                                int_mti,
                                int_ref_no,
                                txn_batch_no,
                                txn_batch_status,
                                (SELECT drcr FROM transaction_type tt WHERE tt.txn_type=auth.txn_type) drcr,
                                fp_form_factor,
                                int_seq_no,
                                int_rc,
                                scheme,
                                int_rrn,
                                int_proc_code,
                                int_amt,
                                int_adj_amt1,
                                int_adj_amt2,
                                int_txn_fees1,
                                int_txn_fees2,
                                int_pos_entry_mode,
                                int_void_flag,
                                mti,
                                f002,
                                f003,
                                f004,
                                f005,
                                f006,
                                f007,
                                f008,
                                f009,
                                f010,
                                f011,
                                f012,
                                f013,
                                f014,
                                f015,
                                f016,
                                f017,
                                f018,
                                f019,
                                f020,
                                f021,
                                f022,
                                f023,
                                f024,
                                f025,
                                f026,
                                f027,
                                f028,
                                f029,
                                f030,
                                f031,
                                f032,
                                f033,
                                f034,
                                f035,
                                f036,
                                f037,
                                f038,
                                f039,
                                f040,
                                f041,
                                f042,
                                f043,
                                f044,
                                f045,
                                f046,
                                f047,
                                f048,
                                f049,
                                f050,
                                f051,
                                f052,
                                f053,
                                f054,
                                f055,
                                f056,
                                f057,
                                f058,
                                f059,
                                f060,
                                f061,
                                f062,
                                f063,
                                f064,
                                f065,
                                f066,
                                f067,
                                f068,
                                f069,
                                f070,
                                f071,
                                f072,
                                f073,
                                f074,
                                f075,
                                f076,
                                f077,
                                f078,
                                f079,
                                f080,
                                f081,
                                f082,
                                f083,
                                f084,
                                f085,
                                f086,
                                f087,
                                f088,
                                f089,
                                f090,
                                f091,
                                f092,
                                f093,
                                f094,
                                f095,
                                f096,
                                f097,
                                f098,
                                f099,
                                f100,
                                f101,
                                f102,
                                f103,
                                f104,
                                f105,
                                f106,
                                f107,
                                f108,
                                f109,
                                f110,
                                f111,
                                f112,
                                f113,
                                f114,
                                f115,
                                f116,
                                f117,
                                f118,
                                f119,
                                f120,
                                f121,
                                f122,
                                f123,
                                f124,
                                f125,
                                f126,
                                f127,
                                f128,
                                reversal_flag,
                                txn_acquirer,
                                settle_date,
                                program_id,
                                bank_id,
                                sys_txn_date,
                                balance_update_flag,
                                balance_update_date,
                                sub_batch_no,
                                acc_flag,
                                NULL,
                                0 host_bal,
                                0 shadow_bal,
                                prepaid_account_number,
                                null as file_name,
                                null as batch_no,
                                null as remarks
                            FROM
                                aswt_switch_txn_authrization auth
                            WHERE
                                prepaid_account_number = p_account_no
                            UNION ALL
                            SELECT
                                settlement_flag,
                                '' AS txn_issuer,
                                '' AS txn_fwd_inst_1,
                                '' AS txn_fwd_inst_2,
                                '' AS txn_auth_source,
                                '' AS txn_channel,
                                DECODE(
                                    msg_type,
                                    'TOP UP',
                                    '91028',
                                    'CB',
                                    '92028',
                                    'INITIAL TOP UP',
                                    '91029',
                                    'BALANCE TRANSFER',
                                    '95028',
                                    'BALANCE TRANSFER REVERSAL',
                                    '96028',
                                    'Balance Transfer Replacement',
                                    '97028',
                                    'Balance Mismatch_TopUp Reversal',
                                    '98028',
                                    txn_type
                                ) AS txn_type,
                                '' AS txn_code,
                                TO_CHAR(date_time,'DDMMYYYY') AS txn_date,
                                TO_CHAR(date_time,'hh24miss') AS txn_time,
                                '' AS fp_masked,
                                '' AS fp_type,
                                '' AS int_mti,
                                substr(arn_reference,4,16) AS int_ref_no,
                                '' AS txn_batch_no,
                                '' AS txn_batch_status,
                                dr_cr_flag AS drcr,
                                '' AS fp_form_factor,
                                '' AS int_seq_no,
                                '' AS int_rc,
                                '' AS scheme,
                                substr(arn_reference,4,16) AS int_rrn,
                                '' AS int_proc_code,
                                TO_CHAR(lpad(
                                    (txn_amount * 100),
                                    12,
                                    0
                                ) ) AS int_amt,
                                '' AS int_adj_amt1,
                                '' AS int_adj_amt2,
                                '' AS int_txn_fees1,
                                '' AS int_txn_fees2,
                                channel_id AS int_pos_entry_mode,
                                '' AS int_void_flag,
                                channel_id AS mti,
                                card_token AS f002,
                                '' AS f003,
                                lpad(
                                    (txn_amount * 100),
                                    12,
                                    0
                                ) AS f004,
                                '' AS f005,
                                '' AS f006,
                                '' AS f007,
                                '' AS f008,
                                '' AS f009,
                                '' AS f010,
                                '' AS f011,
                                '' AS f012,
                                '' AS f013,
                                '' AS f014,
                                '' AS f015,
                                '' AS f016,
                                '' AS f017,
                                '' AS f018,
                                '' AS f019,
                                '' AS f020,
                                '' AS f021,
                                '' AS f022,
                                '' AS f023,
                                '' AS f024,
                                '' AS f025,
                                '' AS f026,
                                '' AS f027,
                                '' AS f028,
                                '' AS f029,
                                '' AS f030,
                                '' AS f031,
                                '' AS f032,
                                '' AS f033,
                                '' AS f034,
                                '' AS f035,
                                '' AS f036,
                                arn_reference AS f037,
                                '' AS f038,
                                response_code AS f039,
                                '' AS f040,
                                branch_id AS f041,
                                mid AS f042,
                                '' AS f043,
                                '' AS f044,
                                '' AS f045,
                                '' AS f046,
                                '' AS f047,
                                '' AS f048,
                                '' AS f049,
                                '' AS f050,
                                '' AS f051,
                                '' AS f052,
                                '' AS f053,
                                '' AS f054,
                                '' AS f055,
                                '' AS f056,
                                '' AS f057,
                                '' AS f058,
                                '' AS f059,
                                '' AS f060,
                                '' AS f061,
                                '' AS f062,
                                '' AS f063,
                                '' AS f064,
                                '' AS f065,
                                '' AS f066,
                                '' AS f067,
                                '' AS f068,
                                '' AS f069,
                                '' AS f070,
                                '' AS f071,
                                '' AS f072,
                                '' AS f073,
                                '' AS f074,
                                '' AS f075,
                                '' AS f076,
                                '' AS f077,
                                '' AS f078,
                                '' AS f079,
                                '' AS f080,
                                '' AS f081,
                                '' AS f082,
                                '' AS f083,
                                '' AS f084,
                                '' AS f085,
                                '' AS f086,
                                '' AS f087,
                                '' AS f088,
                                '' AS f089,
                                '' AS f090,
                                '' AS f091,
                                '' AS f092,
                                '' AS f093,
                                '' AS f094,
                                '' AS f095,
                                '' AS f096,
                                '' AS f097,
                                '' AS f098,
                                '' AS f099,
                                '' AS f100,
                                '' AS f101,
                                '' AS f102,
                                '' AS f103,
                                '' AS f104,
                                '' AS f105,
                                '' AS f106,
                                '' AS f107,
                                '' AS f108,
                                '' AS f109,
                                '' AS f110,
                                '' AS f111,
                                '' AS f112,
                                '' AS f113,
                                '' AS f114,
                                '' AS f115,
                                '' AS f116,
                                '' AS f117,
                                '' AS f118,
                                '' AS f119,
                                '' AS f120,
                                '' AS f121,
                                '' AS f122,
                                '' AS f123,
                                '' AS f124,
                                '' AS f125,
                                '' AS f126,
                                '' AS f127,
                                '' AS f128,
                                '' AS reversal_flag,
                                '' AS txn_acquirer,
                                last_settle_date AS settle_date,
                                '' AS program_id,
                                '' AS bank_id,
                                date_time AS sys_txn_date,
                                '' AS balance_update_flag,
                                NULL AS balance_update_date,
                                0 AS sub_batch_no,
                                NULL AS acc_flag,
                                NULL,
                                host_bal,
                                shadow_bal ,
                                prepaid_account_number,
                                file_name as file_name,
                                batch_no as batch_no,
                                remarks as remarks
                            FROM
                                digital_txn_authorization
                            WHERE
                                prepaid_account_number = p_account_no
                              and txn_type not in('91029')

                            UNION ALL
                            SELECT
                                '' settle_flag,
                                '' AS txn_issuer,
                                '' AS txn_fwd_inst_1,
                                '' AS txn_fwd_inst_2,
                                '' AS txn_auth_source,
                                '' AS txn_channel,
                                    CASE
                                        WHEN fee_ind = 'I' THEN '93028'
                                        WHEN fee_ind = 'P' THEN '93029'
                                        WHEN
                                            fee_ind = 'R'
                                        AND
                                            fee_description = 'REPLOST FOR INSTANT'
                                        THEN '93128'
                                        WHEN
                                            fee_ind = 'R'
                                        AND
                                            fee_description = 'REPLOST FOR PERSO'
                                        THEN '93129'
                                        ELSE fee_ind
                                    END
                                AS txn_type,
                                '' AS txn_code,
                                TO_CHAR(date_time,'DDMMYYYY') AS txn_date,
                                TO_CHAR(date_time,'hh24miss') AS txn_time,
                                '' AS fp_masked,
                                '' AS fp_type,
                                '' AS int_mti,
                                rrn AS int_ref_no,
                                '' AS txn_batch_no,
                                '' AS txn_batch_status,
                                drcr AS drcr,
                                '' AS fp_form_factor,
                                '' AS int_seq_no,
                                '' AS int_rc,
                                '' AS scheme,
                                rrn AS int_rrn,
                                '' AS int_proc_code,
                                TO_CHAR(lpad(
                                    (fee_amt * 100),
                                    12,
                                    0
                                ) ) AS int_amt,
                                '' AS int_adj_amt1,
                                '' AS int_adj_amt2,
                                '' AS int_txn_fees1,
                                '' AS int_txn_fees2,
                                '' AS int_pos_entry_mode,
                                '' AS int_void_flag,
                                '' AS mti,
                                card_number AS f002,
                                '' AS f003,
                                lpad(
                                    (fee_amt * 100),
                                    12,
                                    0
                                ) AS f004,
                                '' AS f005,
                                '' AS f006,
                                '' AS f007,
                                '' AS f008,
                                '' AS f009,
                                '' AS f010,
                                '' AS f011,
                                '' AS f012,
                                '' AS f013,
                                '' AS f014,
                                '' AS f015,
                                '' AS f016,
                                '' AS f017,
                                '' AS f018,
                                '' AS f019,
                                '' AS f020,
                                '' AS f021,
                                '' AS f022,
                                '' AS f023,
                                '' AS f024,
                                '' AS f025,
                                '' AS f026,
                                '' AS f027,
                                '' AS f028,
                                '' AS f029,
                                '' AS f030,
                                '' AS f031,
                                '' AS f032,
                                '' AS f033,
                                '' AS f034,
                                '' AS f035,
                                '' AS f036,
                                rrn AS f037,
                                rrn AS f038,
                                '00' AS f039,
                                '' AS f040,
                                tid AS f041,
                                (
                                    SELECT
                                        parent_id
                                    FROM
                                        cms_outlet
                                    WHERE
                                        outlet_id = tid
                                ) AS f042,
                                '' AS f043,
                                '' AS f044,
                                '' AS f045,
                                '' AS f046,
                                '' AS f047,
                                '' AS f048,
                                '' AS f049,
                                '' AS f050,
                                '' AS f051,
                                '' AS f052,
                                '' AS f053,
                                '' AS f054,
                                '' AS f055,
                                '' AS f056,
                                '' AS f057,
                                '' AS f058,
                                '' AS f059,
                                '' AS f060,
                                '' AS f061,
                                '' AS f062,
                                '' AS f063,
                                '' AS f064,
                                '' AS f065,
                                '' AS f066,
                                '' AS f067,
                                '' AS f068,
                                '' AS f069,
                                '' AS f070,
                                '' AS f071,
                                '' AS f072,
                                '' AS f073,
                                '' AS f074,
                                '' AS f075,
                                '' AS f076,
                                '' AS f077,
                                '' AS f078,
                                '' AS f079,
                                '' AS f080,
                                '' AS f081,
                                '' AS f082,
                                '' AS f083,
                                '' AS f084,
                                '' AS f085,
                                '' AS f086,
                                '' AS f087,
                                '' AS f088,
                                '' AS f089,
                                '' AS f090,
                                '' AS f091,
                                '' AS f092,
                                '' AS f093,
                                '' AS f094,
                                '' AS f095,
                                '' AS f096,
                                '' AS f097,
                                '' AS f098,
                                '' AS f099,
                                '' AS f100,
                                '' AS f101,
                                '' AS f102,
                                '' AS f103,
                                '' AS f104,
                                '' AS f105,
                                '' AS f106,
                                '' AS f107,
                                '' AS f108,
                                '' AS f109,
                                '' AS f110,
                                '' AS f111,
                                '' AS f112,
                                '' AS f113,
                                '' AS f114,
                                '' AS f115,
                                '' AS f116,
                                '' AS f117,
                                '' AS f118,
                                '' AS f119,
                                '' AS f120,
                                '' AS f121,
                                '' AS f122,
                                '' AS f123,
                                '' AS f124,
                                '' AS f125,
                                '' AS f126,
                                '' AS f127,
                                '' AS f128,
                                '' AS reversal_flag,
                                '' AS txn_acquirer,
                                date_time AS settle_date,
                                '' AS program_id,
                                '' AS bank_id,
                                date_time AS sys_txn_date,
                                '' AS balance_update_flag,
                                NULL AS balance_update_date,
                                0 AS sub_batch_no,
                                NULL AS acc_flag,
                                NULL,
                                host_bal,
                                shadow_bal ,
                                prepaid_account_number,
                                file_name as file_name,
                                batch_number as batch_no,
                                remarks as remarks
                            FROM
                                cs_fee_temp
                            WHERE
                                prepaid_account_number = p_account_no
                            UNION ALL
                            SELECT
                                '' settle_flag,
                                '' AS txn_issuer,
                                '' AS txn_fwd_inst_1,
                                '' AS txn_fwd_inst_2,
                                '' AS txn_auth_source,
                                '' AS txn_channel,
                                txn_type AS txn_type,
                                '' AS txn_code,
                                TO_CHAR(transaction_date,'DDMMYYYY') AS txn_date,
                                transaction_time AS txn_time,
                                '' AS fp_masked,
                                '' AS fp_type,
                                '' AS int_mti,
                                rrn AS int_ref_no,
                                '' AS txn_batch_no,
                                '' AS txn_batch_status,
                                dr_cr_ind AS drcr,
                                '' AS fp_form_factor,
                                '' AS int_seq_no,
                                '' AS int_rc,
                                '' AS scheme,
                                rrn AS int_rrn,
                                '' AS int_proc_code,
                                TO_CHAR(lpad(
                                    (amount * 100),
                                    12,
                                    0
                                ) ) AS int_amt,
                                '' AS int_adj_amt1,
                                '' AS int_adj_amt2,
                                '' AS int_txn_fees1,
                                '' AS int_txn_fees2,
                                '' AS int_pos_entry_mode,
                                '' AS int_void_flag,
                                '' AS mti,
                                card_number AS f002,
                                '' AS f003,
                                lpad(
                                    (amount * 100),
                                    12,
                                    0
                                ) AS f004,
                                '' AS f005,
                                '' AS f006,
                                '' AS f007,
                                '' AS f008,
                                '' AS f009,
                                '' AS f010,
                                '' AS f011,
                                '' AS f012,
                                '' AS f013,
                                '' AS f014,
                                '' AS f015,
                                '' AS f016,
                                '' AS f017,
                                '' AS f018,
                                '' AS f019,
                                '' AS f020,
                                '' AS f021,
                                '' AS f022,
                                '' AS f023,
                                '' AS f024,
                                '' AS f025,
                                '' AS f026,
                                '' AS f027,
                                '' AS f028,
                                '' AS f029,
                                '' AS f030,
                                '' AS f031,
                                '' AS f032,
                                '' AS f033,
                                '' AS f034,
                                '' AS f035,
                                '' AS f036,
                                rrn AS f037,
--                                approval_code AS f038,
                                '00' AS f038,
                                '00' AS f039,
                                '' AS f040,
                                tid AS f041,
                                (
                                    SELECT
                                        parent_id
                                    FROM
                                        cms_outlet
                                    WHERE
                                        outlet_id = tid
                                ) AS f042,
                                '' AS f043,
                                '' AS f044,
                                '' AS f045,
                                '' AS f046,
                                '' AS f047,
                                '' AS f048,
                                '' AS f049,
                                '' AS f050,
                                '' AS f051,
                                '' AS f052,
                                '' AS f053,
                                '' AS f054,
                                '' AS f055,
                                '' AS f056,
                                '' AS f057,
                                '' AS f058,
                                '' AS f059,
                                '' AS f060,
                                '' AS f061,
                                '' AS f062,
                                '' AS f063,
                                '' AS f064,
                                '' AS f065,
                                '' AS f066,
                                '' AS f067,
                                '' AS f068,
                                '' AS f069,
                                '' AS f070,
                                '' AS f071,
                                '' AS f072,
                                '' AS f073,
                                '' AS f074,
                                '' AS f075,
                                '' AS f076,
                                '' AS f077,
                                '' AS f078,
                                '' AS f079,
                                '' AS f080,
                                '' AS f081,
                                '' AS f082,
                                '' AS f083,
                                '' AS f084,
                                '' AS f085,
                                '' AS f086,
                                '' AS f087,
                                '' AS f088,
                                '' AS f089,
                                '' AS f090,
                                '' AS f091,
                                '' AS f092,
                                '' AS f093,
                                '' AS f094,
                                '' AS f095,
                                '' AS f096,
                                '' AS f097,
                                '' AS f098,
                                '' AS f099,
                                '' AS f100,
                                '' AS f101,
                                '' AS f102,
                                '' AS f103,
                                '' AS f104,
                                '' AS f105,
                                '' AS f106,
                                '' AS f107,
                                '' AS f108,
                                '' AS f109,
                                '' AS f110,
                                '' AS f111,
                                '' AS f112,
                                '' AS f113,
                                '' AS f114,
                                '' AS f115,
                                '' AS f116,
                                '' AS f117,
                                '' AS f118,
                                '' AS f119,
                                '' AS f120,
                                '' AS f121,
                                '' AS f122,
                                '' AS f123,
                                '' AS f124,
                                '' AS f125,
                                '' AS f126,
                                '' AS f127,
                                '' AS f128,
                                '' AS reversal_flag,
                                '' AS txn_acquirer,
                                Action_Date AS settle_date,
                                '' AS program_id,
                                '' AS bank_id,
                                action_date AS sys_txn_date,
                                '' AS balance_update_flag,
                                NULL AS balance_update_date,
                                0 AS sub_batch_no,
                                NULL AS acc_flag,
                                NULL,
                                0 HOST_BAL,
                                0 SHADOW_BAL,
                                prepaid_account_number,
                                file_name as file_name,
                                batch_no as batch_no,
                                remarks as remarks
                            FROM
                                cs_manual_adjustment
                            WHERE
                                prepaid_account_number = p_account_no
                            AND action_date IS NOT NULL
                        ) txn,
                        aswt_error_code errc
                    WHERE
                            txn.f039 = errc.response_code
                        AND
                            txn.sys_txn_date IS NOT NULL
--                    ORDER BY txn.sys_txn_date DESC, txn.drcr DESC, f037 DESC
                ) av,
                card_detail cd,
                cms_card_detail_extention cde
            WHERE
                    av.f002 = cd.hash_card_number
                AND
                    cd.card_ref_number = cde.card_ref_no
                AND
                    prepaid_account_number = p_account_no
--                AND
--                    UPPER(f039) like '%SUCCESS%'
--                AND
--                    f004 <> 0
                and
                                        
                    (trunc(sys_txn_date) BETWEEN TO_DATE(p_from_date,'DD-MM-YYYY') AND TO_DATE(p_to_date,'DD-MM-YYYY') 
                    
                    or
                    
                    (trunc(sys_txn_date) BETWEEN TO_DATE(p_from_date,'DD-MM-YYYY') AND TO_DATE(p_to_date,'DD-MM-YYYY') and
                    f018 = p_mcc or
                    txn_type in (p_txn_type) or
                    cd.card_ref_number = P_card_ref_number
                    )
                    )
                ORDER BY sys_txn_date DESC, drcr_flag DESC, f037 DESC
        ) SELECT
            TO_CHAR(sys_txn_date,'DD/MM/YYYY HH24:MI:SS') as SYS_TXN_DATE,
            nvl(f004,'0') AS f004,
            nvl(drcr,'') AS drcr,
            nvl(
                nvl(
                    f043,
                    (
                        SELECT
                            cm.name
                        FROM
                            cms_outlet cm
                        WHERE
                            cm.outlet_id = f042
                    )
                ),
                ''
            ) AS f043,
            nvl(f037,'') AS f037,
            nvl(f039,'') AS f039,
            nvl(response_reason,'') AS response_reason,
            nvl(f042,'') AS f042,
            nvl(f038,'') AS f038,
            nvl(to_char(display_date,'DD/MM/YYYY HH24:MI:SS'),'') AS display_date,
            nvl(mask_card_number,'') AS mask_card_number,
            nvl(drcr_flag,'') AS drcr_flag,
            nvl(narration,'') AS narration,
            nvl(f049,'') as Txn_currancy
        FROM
            all_requests;
--        WHERE
--                rownum1 >= v_first
--            AND
--                rownum1 <= v_last;

EXCEPTION

    WHEN OTHERS THEN

        dbms_output.put_line('In Exception '

         || sqlcode

         || ' Error Message: '

         || sqlerrm);
    RAISE;

END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION data_decryption(enc_data character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
$__EDBwrapped__$
UTF8
d4ewwgRbmoAmxJivb7nq692ZtBq0O250AxpQdt8g4m/eLHrGvQbqTmhbQcrMLzBj0sPfjP85xAqA
w/fACa7ur1NPymdC0qNBNCGFoluw4X9tbWEF1AlAKdatKJKjMvTkvMLyeKVY4krMCA8CjKNCiNGW
CCQOftq9TI3lNctrME36Ulk2rDWfDkmpFErzI1HNmkEnENxvCyIPPhJl4AKrr/jVKFGGVDAuHQ2n
bNvveIbzqhPEmigPa2tyIzKCVqfTD+9OeKO6tnFasuhr0N426R4iUacuU/LOJ6tnQ29jUppCWJwp
v9bZZkwYW7UMjmdTRmw1slIRqTcZrW3lWC8b7QClZXHBcq/rWSEnulj46ulHu5Q9KT/BsFcx0Exq
q9itHKAjslxrmnmAROj2WSbT2XquRVGLOrnV+nUO8jyRU+bxQVIxvxOHf4k+Qneuj2EasZ+JO+B7
2d3p4JfmrAnd83m2wic/4P+RA0cWJSDlPRBRXf9Dw8j1qI/6BPMhowGY+jN8vaX7z3MJ5++EFsFy
EFBiIh/d0rMGDnB7re4LeMrhEOelM3NCbSCw9SJ8fSNERa5y1G6ABn6AoNML5CJT1jnUrnX2rd9u
Pi+gLlCVxD9jg1iLSICo1Hv3bJH7uV9J/UIXq7eEnB85ojHPb/uInSdO/TjvZdHNxwMqLan2bz69
zIv12KOOS3W0150yJE1vQGuoEzO9S0+HqoYYcGoJscQf3fTqFT1wHJqFGCBSIxTlMqz0BbWVNIxM
hyPVK6OC5jErdleDHEzO5WaYDQNfP1fDcb9UajIFtcENyFeoaGJK8N8ZndPyKWmhNbqaclrwxyEw
Ls9zx+R5sqdQoa275e0whB3iC8YW61OF4eWqAtwCylupcGNI+BzN1Ec8F5Jn
$__EDBwrapped__$$function$
;

CREATE OR REPLACE FUNCTION data_decryption_text(enc_data character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
$__EDBwrapped__$
UTF8
d0RbObFTvQ77HaGV8cuNDUidpf3vcZU00MWSJWfytT71V0tCxT3uUbk9fwNe8cv2OuuWzXNZCQsU
EFOaaLWfHiM0s4kYsL10RBr083WW+xn8YPQw1hmMsokSek7HgI49dm5mFDKdVMeZq/Qh4LDOWYvY
whcE1y6jQ3/6LaE7pRwBrorK/akLLl6nMaLOZkae1aOcL7owJ6dmCkHF9vdSleOP0rKrQVhny2lV
5O9aTrPx5cniOKUDpwxAlZIU466EKztDTjXt+pYCduXwUHL1rQ5NCewdn+66O54q6x8P5BLPUedy
HE5BlzQQkeErETufDs+UweRAOxgXxpI6EPzgIKTc2rO5n+tY+2pzbQJDzSb7n08aXi8RqMA9FuK2
/b1cbgeDX2EB3nnxE6sUvgPYOjvJRf80ZtPIqfnZO8+Fl/GLGPkP/zwDughQAQXpdon9B6TD8IlN
2ZVHccWaTz2k+uLQ3l2VSet9B0BSdoJPsSDcPWwXu090PVGn2BBfHuu3mh3DvWof2x9gK3ar92Nu
OHvGTNVdOZFyqHZ5kNT4l/xhXh8LqqeXY/yiCJ7Gu8QDtpXlzoKIz7btK4Z+jbkQ5d1L3PvAkkdM
klr/423QxzZ/JoSEPSWQmsFeuAC4NwaqcsZCyPZr+467RuS0P4DBO5IgkSG02k0o+l7YXF2tZCO5
igKU+4p1dXg0ty7huST0my4ryGOTD2ELCEvGbZiZAIwwmDmFItJdf7ZiP+XU6jNp6xopEHjT7ZdO
BHb2fvY+xFs40KT0YHU/VKBUsu4e+GMgIuy40osqH/+MLaeRTKSL5CtgfdL/cil1MIgzJZgSVpsR
GYuY6Nl+j4TdxGuJ+Thh/1mvw160bOM2DF8Bx1Dz2dmEh85u3PlSc4+/ZHV7c1KBXEy/pPAJqmi7
EFGZ5E217tIB8X/bSvZ7MNzaVXAvJsdh4I4rt3mI3Q==
$__EDBwrapped__$$function$
;

CREATE OR REPLACE FUNCTION data_encryption(p_input_data character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
$__EDBwrapped__$
UTF8
d60f5Kk8WGpz4SpgFlXOC3ATyI7HAJ2uWaSeuwsJlYV0+0cMQSyoBjTqIpdoOH/DIqwXhDKJsTV8
ZpaLcLNCTeB0lzYdlQJleaurqcXdYZTaqxhhgAIBROt+o3paTI4+Pf6GRq7ocLxJ5VtrRJa5mimX
lMfF8AYmTr8PpI1rUC7/jt7iEu1zuUP7t1LkdKfcYMSg9MxL5rR+qRO+CtjmgZWo8xN5rApfNKjg
rseFHZ1s1Karm3bw6UIpUdL9EFzxospFarEpHuKVseBK52zpXFULDk19xJEXX1Nr4/wMASJXAaF9
wTHJMzxaDmD1a7q3cq/qemt1Jyr1gN3+kZ2DRnAtAQCsovUJaEsuix/+y1mxC6u/cxaxDiWV6zVv
mqb3HmtJeooopGc8KOJ06XJ4ZjnCVHtkInHN+vTqKy1gRpCnu+1VQSZwMnqr/RlZEWt/VUpeDjF0
IhldbplgpmlO2R4cooYqZyB1l2nYAR5L42YIp0ce4t9TVoDOo9mEzhp1TESm1CXHlfVfyjm4KW79
X5b80kXhC/94iFrcMPGO7pXN6LLxTvHSAcafWCf6NXOeJeE/FMsrAbNBhPLcaT7Y3uhQaH8ICAjO
0Rpp/7xtKzOTPxvXzHR7RVNbcR0e3ghPt5vAzCoEPZBu3bV1XkTGFyBmaTE9sK7bnKlnEaAs9ZPy
BZU4uoE01e+6nkVawnMe6j6Oz+FSSJFoz+B56N3b3HaLIk30h7yxqAzeGvt+xJTqJSzQbO4RtEWP
SAfU7/q/Wm6SHaVF08YSGH31ZcfBywtR8g063+Qhw78ISCq4OVbKKx5ALMrM2AvFQnWla52U/ldN
42E54Jwy+iJzux0sKBqbqwxhFhNxoXkmnv9liwdirfqUBIGeBxksQLukcndwwD7WTqNa64NknWA5
BQ==
$__EDBwrapped__$$function$
;

CREATE OR REPLACE FUNCTION data_encryption_text(p_input_data character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
$__EDBwrapped__$
UTF8
d7WMnG9wHV4m/jsXR8A5+i0OccuhUP5zRT+eO9XeV9joh1HHw5Maj7O/4grqB0Ejrtfkfori7C8S
t/2zXH2HTQREKffA3SiR1mWQBMtInjqnFVnVg9LLFxzmcuWB2RCF6gVBERNU9JmPUggU0YI4IoZh
ZWfpXot/u0bvjuzg6HrmJfXy5jJsUUgQ7eRyKGTPs2LRwVMtsyo7GaLDU9IdsgIKzzz1GRZxdrR3
MEP82W0IutksaCuXWTElzpNx0+YHn3P8qYH+ZDOdWRuSeix3jE7qcCJScv8x7dsuk91RDRRahpzb
lMrpkNAi2HrBEOgMvww887rk9XIlzJGR/wVP1w9WlWVPnTaSUrglIQXl/71QDXWag++ij8d9mUZa
kLS/VWeYU9ah5OvLycsJcvnwVUM7exjvFAxuGzzPScUh0wEVGSn5NL72f9LEe+w7znGuH8CqbX7b
TwbpqjGH7QvCfdWH3xPpvQKLIqW+K6L1nIq1y1YI5Jfz8Ucu0XHPbNUOZZR+mdocPs2Sq3YI9VZR
HULBnze7tF1i39cKP/wpFGqdVyi8DJVx5u9uImNxeEdaMFgVDVRo8y39AUqKyzSzAAkX3YUdODlX
jsixOwprTpWPGOrzVz27AX13OKEH3vpfZxDqKy8WhSbgyc3lRvy04EIfcach+NBiUvNPcwhDEt9C
ts/bro2p8OOuG8esA+lG3Lta/P4LLjU9XNqmaFCGhGb7nyk8xTGdNY5cNzAYE0IdwLiSzP4q/F3L
1mt5hqnfWcXeqfqEwdoKmnFlgU+E7EDCCzlmCzpI148ZrPNreGuX/PnipyIfgX7JSamWH3ZSjUNu
8hxf3hnoayO56VV74JXYDyrEUoXqlU6zwWkP0sNgM2riCMbkScf3Jv6IVeP9cGAUzL0ciyNxjfs5
R6BPyl+1FEuUU88su0sXAfQgKfg9RZvoSUIKE97pwKobwRMqbGiJ8UfpkKa01mCHbvMGp/E=
$__EDBwrapped__$$function$
;

CREATE OR REPLACE FUNCTION decrypt_all(p_key character varying, p_flag character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_card_ref_number   VARCHAR2(1000);
    v_cardnumber        VARCHAR2(1000);
    v_cnt               NUMBER;
BEGIN

    --Hash Card to Clear Card number
    IF
        upper(p_flag) = 'HC'
    THEN
        SELECT
            data_decryption(ced.enrypted_card_no)
        INTO
            v_cardnumber
        FROM
            card_encryption_detail ced INNER JOIN card_detail cd ON cd.card_ref_number = ced.card_ref_number
        WHERE
            cd.hash_card_number = p_key;

        RETURN v_cardnumber;

    --Hash Card to Card Ref No
    ELSIF upper(p_flag) = 'HR' THEN
        SELECT
            card_ref_number
        INTO
            v_card_ref_number
        FROM
            card_detail
        WHERE
            hash_card_number = p_key;

        RETURN v_card_ref_number;

    --Clear Card to Hash Card
    ELSIF upper(p_flag) = 'CH' THEN
        SELECT
            hash_card_number
        INTO
            v_cardnumber
        FROM
            card_detail cd INNER JOIN card_encryption_detail ced ON cd.card_ref_number = ced.card_ref_number
        WHERE
            data_decryption(ced.enrypted_card_no) = p_key;

        RETURN v_cardnumber;

    --Clear Card to Card Ref Number
    ELSIF upper(p_flag) = 'CR' THEN
        SELECT
            card_ref_number
        INTO
            v_card_ref_number
        FROM
            card_encryption_detail
        WHERE
            data_decryption(enrypted_card_no) = p_key;

        RETURN v_card_ref_number;

    --Clear Card to Encrypted
    ELSIF upper(p_flag) = 'CE' THEN
        SELECT
            enrypted_card_no
        INTO
            v_cardnumber
        FROM
            card_encryption_detail
        WHERE
            data_decryption(enrypted_card_no) = p_key;

        RETURN v_cardnumber;

    --Encrypted to Clear Card Number
    ELSIF upper(p_flag) = 'EC' THEN
        SELECT
            data_decryption(p_key)
        INTO
            v_cardnumber
        FROM
            dual;

        RETURN v_cardnumber;

    --Hash Card to Mask Card Number
    ELSIF upper(p_flag) = 'HM' THEN
        SELECT
            mask_card_number
        INTO
            v_cardnumber
        FROM
            cms_card_detail_extention cde INNER JOIN card_detail cd ON cd.card_ref_number = cde.card_ref_no
        WHERE
            cd.hash_card_number = p_key;

        RETURN v_cardnumber;

    --Clear Card to Mask Card Number
    ELSIF upper(p_flag) = 'CM' THEN
        SELECT
            mask_card_number
        INTO
            v_cardnumber
        FROM
            cms_card_detail_extention cde INNER JOIN card_encryption_detail ced ON cde.card_ref_no = ced.card_ref_number
        WHERE
            data_decryption(ced.enrypted_card_no) = p_key;

        RETURN v_cardnumber;

    --Encrypted Card to Mask Card Number
    ELSIF upper(p_flag) = 'EM' THEN
        SELECT
            mask_card_number
        INTO
            v_cardnumber
        FROM
            cms_card_detail_extention cde INNER JOIN card_encryption_detail ced ON cde.card_ref_no = ced.card_ref_number
        WHERE
            ced.enrypted_card_no = p_key;

        RETURN v_cardnumber;

    --Hash Card to Encrypted Number
    ELSIF upper(p_flag) = 'HE' THEN
        SELECT
            ced.enrypted_card_no
        INTO
            v_cardnumber
        FROM
            card_encryption_detail ced INNER JOIN card_detail cd ON cd.card_ref_number = ced.card_ref_number
        WHERE
             cd.hash_card_number = p_key;

        RETURN v_cardnumber;

    --Encrypted to Hash Card Number
    ELSIF upper(p_flag) = 'EH' THEN
        SELECT
            hash_card_number
        INTO
            v_cardnumber
        FROM
            card_detail cd INNER JOIN card_encryption_detail ced ON cd.card_ref_number = ced.card_ref_number
        WHERE
            ced.enrypted_card_no = p_key;

        RETURN v_cardnumber;

    --Encrypted Card to Card Ref number
    ELSIF upper(p_flag) = 'ER' THEN
        SELECT
            card_ref_number
        INTO
            v_card_ref_number
        FROM
            card_encryption_detail
        WHERE
            enrypted_card_no = p_key;

        RETURN v_card_ref_number;

    --Card Ref Number to Clear card number
    ELSIF upper(p_flag) = 'RC' THEN
        SELECT
            data_decryption(enrypted_card_no)
        INTO
            v_cardnumber
        FROM
            card_encryption_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;

    --Card Ref number to Hash Card
    ELSIF upper(p_flag) = 'RH' THEN
        SELECT
            hash_card_number
        INTO
            v_cardnumber
        FROM
            card_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;

    --Card ref number to Encrypted Card Number
    ELSIF upper(p_flag) = 'RE' THEN
        SELECT
            enrypted_card_no
        INTO
            v_cardnumber
        FROM
            card_encryption_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;

    --Card Ref number to Mask Card Number
    ELSIF upper(p_flag) = 'RM' THEN
        SELECT
            mask_card_number
        INTO
            v_cardnumber
        FROM
            cms_card_detail_extention
        WHERE
            card_ref_no = p_key;

        RETURN v_cardnumber;

      ELSIF upper(p_flag) = 'HOM' THEN

        SELECT COUNT(1) INTO v_cnt  FROM CARD_DETAIL WHERE hash_card_number=p_key and old_card_no is not null;

        if v_cnt > 0 then 

        SELECT old_card_no INTO v_cardnumber FROM CARD_DETAIL WHERE HASH_CARD_NUMBER=p_key;

        select card_ref_number into v_card_ref_number from card_detail where hash_card_number=v_cardnumber;

        select mask_card_number into v_cardnumber from cms_card_detail_extention where card_ref_no=v_card_ref_number;

        RETURN v_cardnumber;    

        else

        return null;

        end if;

    --If none of the keys are mentioned
    ELSE
        RETURN 'Invalid Key';
    END IF;
EXCEPTION
    WHEN no_data_found THEN
        RETURN 'Invalid Number';
    WHEN OTHERS THEN
        RETURN 'Error: '
         || sqlcode
         || sqlerrm;
END
$function$
;

CREATE OR REPLACE PROCEDURE dormancy_daily_proc()
 SECURITY DEFINER
AS $procedure$
v_issuer_id          NUMBER := 262;
    v_product_id         NUMBER;
    v_max_date           DATE;
    v_dormacy_period     NUMBER;
    v_instr_profile_id   NUMBER;
    v_check_date         date;
    v_balance            NUMBER;
    v_msg                VARCHAR2(20);
	v_cnt                number;
    v_day                varchar(2);
    v_date               date;
   v_instrument_profile_id   VARCHAR2(10);
    v_fee_amt            NUMBER;
   v_vat_amt             NUMBER;   

    pragma autonomous_transaction;
BEGIN
    FOR i IN (
        SELECT
            *
        FROM
            card_detail cd join cms_cust_details cust on(cd.prep_account_number=cust.prepaid_account_number)
        WHERE
            cd.status = 'A'
            AND cust.employee_active_status ='A'
       union all
       SELECT
            *
        FROM
            card_detail cd join cms_cust_details cust on(cd.prep_account_number=cust.prepaid_account_number)
        WHERE
            cd.status = 'THL'
            AND cd.reason_code ='05'
            and cd.dormancy_flag ='Y'
            and cd.dormancy_date  is not null
    ) LOOP 
    
    if i.status='A' then 

   
--DRAWING DORMACY PERIOD
------------------------------

        SELECT
            id
        INTO v_instr_profile_id
        FROM
            prd_instrument_profile pip
        WHERE
            product_id = i.product_id;

        SELECT
            dormancy_period
        INTO v_dormacy_period
        FROM
            prd_instrument_details pid
        WHERE
            instrument_profile_id = v_instr_profile_id;

        SELECT
            trunc(sysdate - v_dormacy_period)
        INTO v_check_date
        FROM
            dual;

        

--        IF ( v_check_date < v_max_date and v_max_date is not null ) THEN
--            CONTINUE;
--        END IF;

           
        -- CALCULATING THE MAX DATE OF LAST TRANSACTION
-----------------------------------------------
        SELECT
          count(1) 
           into v_cnt
        FROM
            aswt_switch_txn_authrization aswt right outer join card_detail cd on(aswt.f002=i.hash_card_number)
        WHERE
            cd.hash_Card_number = i.hash_card_number
            and (trunc(aswt.sys_txn_date) >= TRUNC(sysdate-30) or trunc(cd.card_activated_on) >= TRUNC(sysdate-30)) ;   
              
        IF v_cnt=0 THEN
        prc_fee_for_dormancy(i.card_ref_number, '10110', v_balance);
        prc_dormancy_on_card(i.card_ref_number, v_dormacy_period, v_msg);
        
        IF ( v_msg = 'fail' ) THEN
            CONTINUE;
        END IF;
        
        UPDATE card_detail
        SET
            reason_code = '05',  -- reason code for dormancy
            status = 'THL',           -- Status changes to THL
            dormancy_flag ='Y',
            dormancy_date =sysdate
            WHERE
            card_ref_number = i.card_ref_number;
       	insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag)
						values 
						(i.card_ref_number,'THL',sysdate,'Scheduler',i.prep_account_number, null);                  
        end if;
       
    elsif i.status='THL' and i.reason_code='05' then 
    
    
    v_day:=to_char(i.dormancy_date,'DD');
    v_date:=TO_DATE(V_DAY||'-'||to_char(sysdate,'MON-YY'),'DD-MON-YY');
    
     if trunc(v_date)=trunc(sysdate) then
     
     
         SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_card_fee_config
    WHERE
        card_ref_number = i.card_ref_number
        AND txn_type ='10110';

    IF ( v_cnt > 0 ) THEN
      dbms_output.put_line('Inside card level fee');
-- Card Level Fee Checking
---------------------------
        SELECT
            amount
        INTO v_fee_amt
        FROM
            cms_card_fee_config
        WHERE
            card_ref_number = i.card_ref_number
            AND txn_type = '10110';

    ELSE    

      dbms_output.put_line('Inside product level fee');
-- Product Level Fee Checking
-------------------------------
        SELECT
            id
        INTO v_instrument_profile_id
        FROM
            prd_instrument_profile pip
        WHERE
            product_id = i.product_id; 
dbms_output.put_line('v_instrument_profile_id '||v_instrument_profile_id||'v_product_id '||v_product_id);
           
        SELECT
            fee_amount
        INTO v_fee_amt
        FROM
            prd_fee_profile
        WHERE
            instrument_profile_id = v_instrument_profile_id
            AND txn_type = p_txn_type;
      dbms_output.put_line(' v_fee_amt '||v_fee_amt);

    END IF;

      select balance_check(i.hash_Card_number) into v_balance from dual;
           
        fee_vat_calculation(v_fee_amt, v_vat_amt);
       
       dbms_output.put_line('v_fee_amount '||v_fee_amt||' v_vat_amt '||v_vat_amt);
       v_fee_amt :=v_fee_amt + v_vat_amt;
         if v_balance > v_fee_amt then
     
       		 prc_fee_for_dormancy(i.card_ref_number, '10110', v_balance);
 		
        dbms_output.put_line('v_balance '||v_balance);       		
       	
       else 
       
       DBMS_OUTPUT.PUT_LINE('Insufficient balance ');
       
       end if;
   
    
    
    end if;
    
    
    end if;

--    EXCEPTION
--        WHEN OTHERS THEN
--            dbms_output.put_line(sqlerrm);
--    END;
    END LOOP;

    COMMIT;
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE fee_procedure(p_card_no character varying, p_amount numeric, p_fee_desc character varying, p_fee_ind character varying, p_date timestamp without time zone, p_seq_id character varying, p_drcr character varying, p_rev_org_seq_id character varying, p_tid character varying, p_stan character varying, p_batch_number character varying, p_ticket_id character varying, p_entry_date_time timestamp without time zone, p_pay_mode character varying, p_rrn character varying, p_prep_account character varying)
 SECURITY DEFINER
AS $procedure$

    v_card_holder_state   VARCHAR2(50);
    v_txn_flag            VARCHAR2(10) := 'Y';
    v_sac_code            VARCHAR2(10);
    v_institution_state   VARCHAR2(50);
    v_fee_amount          NUMBER(7,2);
    v_bin                 VARCHAR2(10);
    a                     NUMBER(7,2) := 0;
    b                     NUMBER(7,2) := 0;
    c                     NUMBER(7,2) := 0;
    d                     NUMBER(7,2) := 0;
    x                     NUMBER(7,2) := 0;
    v_cgst_tax_amount     NUMBER(7,2);
    v_sgst_tax_amount     NUMBER(7,2);
    v_utgst_tax_amount    NUMBER(7,2);
    v_igst_tax_amount     NUMBER(7,2);
    v_total_tax           NUMBER(7,2);
    v_txn_id              VARCHAR2(50);
    v_unique_txn_id       VARCHAR2(50);
   v_is_instant  varchar2(50);
   v_inst_id number;
	pragma autonomous_transaction;
BEGIN

    dbms_output.put_line('Card Number:' || p_card_no);
    SELECT
        state.name,
        gst.state_code,
        cd.is_instant ,
        i.inst_id
     INTO
        v_card_holder_state,
        v_sac_code,
        v_is_instant   ,
        v_inst_id
    FROM
        card_detail cd,
        cms_cust_details ccd,
        config_cs_gst_rate gst,
        cms_card_detail_extention ccde,
        cms_outlet co,
        state_master state,
        issuer i
    WHERE
        cd.cust_seq_id = ccd.cust_seq_id
        and ccde.card_ref_no = cd.card_ref_number
        and co.outlet_id = ccde.mo_id
        and i.id = cd.issuer_id
        AND co.state_id  = state.id
        AND state.name = gst.state_name
        AND cd.hash_card_number = p_card_no;

         --  dbms_output.put_line('v_txn_id:' || v_txn_id);
    SELECT
        'FEE.'
        || TO_CHAR(SYSDATE,'DDMONYY')
        || '.'
        || fee_txn_id_seq.NEXTVAL
    INTO v_txn_id
    FROM
        dual;

    SELECT
        'FEES'
        || TO_CHAR(SYSDATE,'YY')
        || lpad(cs_fee_uniq_txn_id.NEXTVAL,10,'0')
    INTO v_unique_txn_id
    FROM
        dual;

    INSERT INTO cs_fee (
        transaction_id,
        transaction_date,
        transaction_time,
        card_number,
        card_holder_state,
        institution_state,
        fee_description,
        txc_inc_flag,
        fee_amount,
        gst_number,
        sac_code,
        settle_date,
        fee_ind,
        insert_datetime,
        drcr,
        rev_org_seq_id,
        tid,
        stan,
        batch_number,
        ticket_id,
        entry_date_time,
        unique_txn_id,
        pay_mode,
        rrn,
        prepaid_account_number
    ) VALUES (
        v_txn_id,
        TO_CHAR(p_date,'DD-MON-YYYY'),
        TO_CHAR(p_date,'HH24MISS'),
        p_card_no,
        v_card_holder_state,
        v_card_holder_state,--ask
        p_fee_desc,
        v_txn_flag,
        p_amount,
        NULL,
        v_sac_code,
        p_date,
            CASE
                WHEN p_fee_ind = 'I'  THEN '93028'
                WHEN p_fee_ind = 'P'   THEN '93029'
                WHEN p_fee_ind = 'R'
--                     AND p_fee_desc = 'REPLOST FOR INSTANT' THEN '93128'
                       and v_is_instant='Y' THEN '93128'
                WHEN p_fee_ind = 'R'
--                     AND p_fee_desc = 'REPLOST FOR PERSO' THEN '93129'
                       and v_is_instant='N' THEN '93129'   
                WHEN p_fee_ind = 'R'
                     AND p_fee_desc = 'Replacement lost' THEN '93128'     
                ELSE p_fee_ind
            END,
        SYSDATE,
        p_drcr,
        p_rev_org_seq_id,
        p_tid,
        p_stan,
        p_batch_number,
        p_ticket_id,
        p_entry_date_time,
        v_unique_txn_id,
        p_pay_mode,
        p_rrn,
        p_prep_account
    );

    SELECT
        institution_state
    INTO v_institution_state
    FROM
        cs_fee
    WHERE
        card_number = p_card_no
        AND transaction_id = v_txn_id;

    SELECT
        bin
    INTO v_bin
    FROM
        card_detail
    WHERE
        hash_card_number = p_card_no;
--
--    SELECT
--        nvl(cgst,0) + ( nvl(c_cess,0) * nvl(cgst,0) / 100 ),
--        nvl(sgst,0) + ( nvl(s_cess,0) * nvl(sgst,0) / 100 ),
--        nvl(utgst,0) + ( nvl(u_cess,0) * nvl(utgst,0) / 100 ),
--        nvl(igst,0) + ( nvl(i_cess,0) * nvl(igst,0) / 100 )
--    INTO
--        a,
--        b,
--        c,
--        d
--    FROM
--        config_cs_gst_rate
--    WHERE
--        state_name = v_card_holder_state;
       
       
     select tax_value/2,
           tax_value/2,
           0,
           0
    into     a,
        b,
        c,
        d      
    from institution i 
   where i.id =  v_inst_id;

    IF
        v_txn_flag = 'Y'
    THEN
        if  0=1 then
--            v_card_holder_state != v_institution_state
--        THEN
--            x := ( 100 * p_amount ) / ( 100 + d ); --100 - d/100 - :new.fee_amount;
--      --dbms_output.put_line('x value for different state :'||x);
--            v_igst_tax_amount := ( x * d ) / 100;
--      --dbms_output.put_line('v_IGST_TAX_AMOUNT: '||v_IGST_TAX_AMOUNT);
--            UPDATE cs_fee
--            SET
--                net_fee_amount = x,
--                igst_tax_amount = v_igst_tax_amount,
--                igst_tax_rate = d,
--                total_amount = p_amount,
--                cgst_tax_amount = 0,
--                sgst_tax_amount = 0,
--                utgst_tax_amount = 0,
--                cgst_tax_rate = 0,
--                sgst_tax_rate = 0,
--                utgst_tax_rate = 0,
--                total_tax_amt = v_igst_tax_amount
--            WHERE
--                card_number = p_card_no
--                AND transaction_id = v_txn_id;

        ELSE
            x := ( 100 * p_amount ) / ( 100 + ( a + b + c ) );
      --dbms_output.put_line('x value for same state :'||x);

            v_cgst_tax_amount := ( x * a ) / 100;
            v_sgst_tax_amount := ( x * b ) / 100;
            v_utgst_tax_amount := ( x * c ) / 100;
            v_total_tax := v_cgst_tax_amount + v_sgst_tax_amount + v_utgst_tax_amount;
            UPDATE cs_fee
            SET
                net_fee_amount = x,
                cgst_tax_amount = v_cgst_tax_amount,
                sgst_tax_amount = v_sgst_tax_amount,
                utgst_tax_amount = v_utgst_tax_amount,
                igst_tax_amount = 0,
                cgst_tax_rate = a,
                sgst_tax_rate = b,
                utgst_tax_rate = c,
                igst_tax_rate = 0,
                total_amount = p_amount,
                total_tax_amt = v_total_tax
            WHERE
                card_number = p_card_no
                AND transaction_id = v_txn_id;

        END IF;

    END IF;

    UPDATE cs_fee_temp
    SET
        acc_flag = 'Y',
        acc_date = SYSDATE
    WHERE
        card_number = p_card_no
        AND nvl(seq_id,'1') = nvl(p_seq_id,'1')
        and nvl(rrn,1) = nvl(p_rrn,1)
        and nvl(stan,'1') = nvl(p_stan,'1')
        AND acc_flag IS NULL;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
--         ROLLBACK;
        dbms_output.put_line('Error,in exception'
                               || sqlcode
                               || sqlerrm);
--                                || dbms_utility.format_error_backtrace);
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE fee_vat_calculation(req_fee numeric, OUT resp_fee numeric)
 SECURITY DEFINER
AS $procedure$
v_is_apply varchar2(1);
v_vat_percentage  double precision;
v_calulate_amt  numeric(10,2);
begin

select Is_Apply,vat_percentage into v_is_apply,v_vat_percentage from VAT_DETAIL
where vat_id=1001;

if(v_is_apply='Y') then

v_calulate_amt=(req_fee *v_vat_percentage)/100;

resp_fee= v_calulate_amt;

else
resp_fee=req_fee;
end if;

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION fn_queue_amt(p_hash_card character varying)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$

v_total_annul_fee  number:=0;

begin

  select nvl(sum(fee_amt),0) 
  into v_total_annul_fee
  from cs_fee_queue cs
  where cs.card_number = p_hash_card
  and drcr in  ('Dr','D')
  and queue_released_flag = 'N';

return v_total_annul_fee;

exception
when OTHERS then
return v_total_annul_fee;
end$function$
;

CREATE OR REPLACE FUNCTION func_encript(p_key character varying, p_issuer_id numeric, p_flag character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$

    v_card_ref_number   card_detail.hash_card_number%TYPE;
    v_query             VARCHAR2(1000);
    v_hash              VARCHAR2(32);
--:='12345678123456781234567812345678';
    v_cardnumber        card_detail.hash_card_number%TYPE;
BEGIN
    SELECT
        data_decryption(salt_secure_key)
    INTO
        v_hash
    FROM
        cms_issuer_config
    WHERE
        issuer_id = p_issuer_id;

    IF
        p_flag = 'HP'
    THEN
        v_query := 'SELECT CARD_REF_NUMBER FROM CARD_DETAIL WHERE HASH_CARD_NUMBER=''' || p_key || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_card_ref_number;
        v_query := 'SELECT DATA_DECRYPTION(ENRYPTED_CARD_NO) FROM CARD_ENCRYPTION_DETAIL WHERE CARD_REF_NUMBER=''' || v_card_ref_number || ''''
;
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'PH' THEN
        v_query := 'SELECT SHA256.ENCRYPT('''
         || v_hash
         || p_key
         || ''') FROM DUAL';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'PE' THEN
        v_query := 'SELECT DATA_ENCRYPTION(''' || p_key || ''') FROM DUAL';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'EP' THEN
        v_query := 'SELECT DATA_DECRYPTION(''' || p_key || ''') FROM DUAL';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'HM' THEN
        v_query := 'SELECT CARD_REF_NUMBER FROM CARD_DETAIL WHERE HASH_CARD_NUMBER=''' || p_key || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_card_ref_number;
        v_query := 'SELECT REPLACE(DATA_DECRYPTION(ENRYPTED_CARD_NO),substr(DATA_DECRYPTION(ENRYPTED_CARD_NO),7,6),''XXXXXX'') FROM CARD_ENCRYPTION_DETAIL WHERE CARD_REF_NUMBER='''
|| v_card_ref_number || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'PM' THEN
        v_query := replace(
            p_key,
            substr(p_key,7,6),
            'XXXXXX'
        );

        v_cardnumber := v_query;
        RETURN v_cardnumber;
    ELSIF p_flag = 'EM' THEN
        v_query := 'SELECT DATA_DECRYPTION(''' || p_key || ''') FROM DUAL';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        v_query := replace(
            v_cardnumber,
            substr(v_cardnumber,7,6),
            'XXXXXX'
        );

        v_cardnumber := v_query;
        RETURN v_cardnumber;
    ELSIF p_flag = 'HE' THEN
        v_query := 'SELECT CARD_REF_NUMBER FROM CARD_DETAIL WHERE HASH_CARD_NUMBER=''' || p_key || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_card_ref_number;
        v_query := 'SELECT ENRYPTED_CARD_NO FROM CARD_ENCRYPTION_DETAIL WHERE CARD_REF_NUMBER=''' || v_card_ref_number || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'EH' THEN
        v_query := 'SELECT CARD_REF_NUMBER FROM CARD_ENCRYPTION_DETAIL WHERE ENRYPTED_CARD_NO=''' || p_key || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_card_ref_number;
        v_query := 'SELECT HASH_CARD_NUMBER FROM CARD_DETAIL WHERE CARD_REF_NUMBER=''' || v_card_ref_number || '''';
        EXECUTE IMMEDIATE v_query INTO
            v_cardnumber;
        RETURN v_cardnumber;
    ELSIF p_flag = 'RP' THEN
        SELECT
            data_decryption(enrypted_card_no)
        INTO
            v_cardnumber
        FROM
            card_encryption_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;
    ELSIF p_flag = 'RH' THEN
        SELECT
            hash_card_number
        INTO
            v_cardnumber
        FROM
            card_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;
    ELSIF p_flag = 'RE' THEN
        SELECT
            enrypted_card_no
        INTO
            v_cardnumber
        FROM
            card_encryption_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;
    ELSIF p_flag = 'RM' THEN
        SELECT
            replace(
                data_decryption(enrypted_card_no),
                substr(
                    data_decryption(enrypted_card_no),
                    7,
                    6
                ),
                'XXXXXX'
            )
        INTO
            v_cardnumber
        FROM
            card_encryption_detail
        WHERE
            card_ref_number = p_key;

        RETURN v_cardnumber;
    END IF;

END$function$
;

CREATE OR REPLACE FUNCTION get_branch_available_cards(p_branch_id numeric, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_available_cards_at_ho NUMBER;

BEGIN

if p_product_id=249 then

    SELECT
        COUNT(1)
    INTO v_available_cards_at_ho
    FROM
        card_detail cd
        JOIN cms_card_detail_extention cde ON cd.card_ref_number = cde.card_ref_no
    WHERE
        cd.product_id = p_product_id
        AND cd.batch_no LIKE 'BI%'
        AND cd.card_ref_number > 'AXI000006281'
        AND cde.mo_indented_date IS NULL
        AND nvl(cde.mo_indented_by,0) = 0
        AND cde.mo_id IS NULL
        AND cde.ho_indented_date IS NOT NULL
        AND cde.ho_indented_by IS NOT NULL;

    RETURN v_available_cards_at_ho;

else 

    SELECT
        COUNT(1)
    INTO v_available_cards_at_ho
    FROM
        card_detail cd
        JOIN cms_card_detail_extention cde ON cd.card_ref_number = cde.card_ref_no
    WHERE
        cd.product_id = p_product_id
        AND cd.batch_no LIKE 'BI%'
        AND cd.card_ref_number > 'BMT000001170'
        AND cde.mo_indented_date IS NULL
        AND nvl(cde.mo_indented_by,0) = 0
        AND cde.mo_id IS NULL
        AND cde.ho_indented_date IS NOT NULL
        AND cde.ho_indented_by IS NOT NULL;

    RETURN v_available_cards_at_ho;

end if;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END
$function$
;

CREATE OR REPLACE PROCEDURE get_card_balance_till_p_date(p_hash_card character varying, p_date timestamp without time zone, OUT p_msg character varying, OUT p_host_bal numeric, OUT p_shadow_bal numeric, OUT p_total_bal numeric, OUT p_9f10_chip_bal numeric, OUT p_total_credit numeric, OUT p_total_debit numeric)
 SECURITY DEFINER
AS $procedure$

    v_total_bal                  NUMBER := 0;
    v_auth_credit_amt            NUMBER := 0;
    v_auth_debit_amt             NUMBER := 0;
    v_digi_credit_amt            NUMBER := 0;
    v_digi_debit_amt             NUMBER := 0;
    v_offline_csu_cnt            NUMBER := 0;
    v_total_credit               NUMBER := 0;
    v_total_debit                NUMBER := 0;
    v_fee_amt                    NUMBER := 0;
    v_cum_off_usage_amt          NUMBER := 0;
    v_shadow_bal                 NUMBER := 0;
    v_card_cnt                   NUMBER := 0;
    v_adj_debit_amt              NUMBER := 0;
    v_adj_credit_amt             NUMBER := 0;
    v_off_amt_after_csu_update   NUMBER := 0;
    v_csu_offline_usage_date     DATE;
    v_atc                        VARCHAR2(4);
    v_total_used				 NUMBER := 0;
    exc_invalid_card EXCEPTION;
BEGIN
    SELECT
        COUNT(1)
    INTO
        v_card_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_hash_card;

    IF
        v_card_cnt = 0
    THEN
        RAISE exc_invalid_card;
    END IF;
  ---------------------------
  --1. Auth Txn Calculation
  ---------------------------

  --Auth Credit
    SELECT
        NVL(SUM(f004/100),0)
    INTO
        v_auth_credit_amt
    FROM
        aswt_switch_txn_authrization
    WHERE f002 = p_hash_card
        and drcr = 'C'
        AND f039 = '00'
        and txn_type = '21028'
        and int_txn_type = '2102800'
        and f038 IS NOT NULL
        AND to_date(f012||f013||(to_char(sys_txn_date,'YY')),'HH24MISSMMDDYY') < p_date;

    --dbms_OUTPUT.PUT_LINE('Auth Credit Amt = ' || v_auth_credit_amt);

    --Auth Debit

    SELECT
        NVL(SUM(f004/100),0)
    INTO
        v_auth_debit_amt
    FROM
        aswt_switch_txn_authrization
    WHERE f002 = p_hash_card
        AND drcr = 'D'
        AND f039 = '00'
        and txn_type in ('21000','21001')
        AND f038 IS NOT NULL
        AND to_date(f012||f013||(to_char(sys_txn_date,'YY')),'HH24MISSMMDDYY') < p_date;

       --dbms_OUTPUT.PUT_LINE('Auth Debit Amt = ' || v_auth_debit_amt);

---------------------------
--2. Digital Txn Calculation
---------------------------

--Digi Credit

    SELECT
        nvl(SUM(txn_amount),0)
    INTO
        v_digi_credit_amt
    FROM
        digital_txn_authorization
    WHERE card_enc = p_hash_card
        AND dr_cr_flag = 'Cr'
        AND date_time < p_date;

  --dbms_OUTPUT.PUT_LINE('Online Digital Credit = ' || v_digi_credit_amt);

    --Digi Debit

    SELECT
        nvl(SUM(txn_amount),0)
    INTO
        v_digi_debit_amt
    FROM
        digital_txn_authorization
    WHERE card_enc = p_hash_card
        AND dr_cr_flag = 'Dr'
        AND date_time < p_date;

--dbms_OUTPUT.PUT_LINE('Online Digital Debit = ' || v_digi_debit_amt/100);
---------------------------
--3. Adjustments
---------------------------

--Debit Adjustments

    SELECT
        nvl(
            SUM(amount ),
            0
        )
    INTO
        v_adj_debit_amt
    FROM
        cs_manual_adjustment
    WHERE card_number = p_hash_card
        AND dr_cr_ind = 'D'
        AND action_flag = 'A'
        AND action_date < p_date;

--Credit Adjustments

    SELECT
        nvl(
            SUM(amount),
            0
        )
    INTO
        v_adj_credit_amt
    FROM
        cs_manual_adjustment
    WHERE card_number = p_hash_card
        AND dr_cr_ind = 'C'
        AND action_flag = 'A'
        AND action_date < p_date;

---------------------------
--4. Other Fees Calculation
---------------------------

    SELECT
        nvl(SUM(fee_amt),0)
    INTO
        v_fee_amt
    FROM
        cs_fee_temp
    WHERE card_number = p_hash_card
        AND reversal_flag IS NULL
        AND drcr = 'Dr'
        AND date_time < p_date;

--dbms_OUTPUT.PUT_LINE('Other Fees = ' || v_fee_amt);
---------------------------
--5. Offline Balance Txn Calculation
---------------------------
--Offline CSU Update

    SELECT
        COUNT(1)
    INTO
        v_offline_csu_cnt
    FROM
        aswt_switch_txn_authrization
    WHERE
        f002 = p_hash_card;

    IF
        v_offline_csu_cnt > 0
    THEN
        SELECT
            nvl(shadow_bal/100,0),
            nvl(cum_off_usage/100,0),
            to_date(f012||f013||(to_char(sys_txn_date,'YY')),'HH24MISSMMDDYY') txn_date,
            atc
        INTO
            v_shadow_bal,v_cum_off_usage_amt,v_csu_offline_usage_date, v_atc
        FROM
            (
                SELECT
                    *
                FROM
                    aswt_switch_txn_authrization
                WHERE f002 = p_hash_card
                    and f039 = '00'
                    AND drcr != 'R'
                    AND to_date(f012||f013||(to_char(sys_txn_date,'YY')),'HH24MISSMMDDYY') < p_date
                ORDER BY to_date(f012||f013||(to_char(sys_txn_date,'YY')),'HH24MISSMMDDYY') DESC
            )
        WHERE
            ROWNUM = 1;
  --dbms_OUTPUT.PUT_LINE('Shadow Balance= ' || v_shadow_bal);
  --dbms_OUTPUT.PUT_LINE('Cummulative Offline Usage= ' || v_cum_off_usage_amt);

    END IF;

  ---------------------------
  --6. Usage amount after last offline_Csu_update
  ---------------------------

    SELECT
        NVL(SUM(f004/100),0)
    INTO
        v_off_amt_after_csu_update
    FROM
        aswt_switch_txn_offline
    WHERE f002 = p_hash_card
        AND f039 = '00'
        AND drcr = 'D'
        and txn_type = 23000
        AND trml_date BETWEEN v_csu_offline_usage_date AND p_date
        AND atc > v_atc;
            
    --dbms_OUTPUT.PUT_LINE('Advices amount after last CSU update = ' || v_off_amt_after_csu_update );

  ---------------------------
  --7. Final Calculation
  ---------------------------

    v_total_credit := v_auth_credit_amt + v_digi_credit_amt + v_adj_credit_amt;
    p_total_credit := v_total_credit; 
    --dbms_OUTPUT.PUT_LINE('Total Credits = ' || v_total_credit);
    v_total_debit := v_auth_debit_amt + v_digi_debit_amt + v_adj_debit_amt + v_fee_amt;
    p_total_debit := v_total_debit-v_cum_off_usage_amt-v_off_amt_after_csu_update;
    --p_total_debit := v_total_used;
    --dbms_OUTPUT.PUT_LINE('Total Debits = ' || v_total_debit);
    v_total_bal := v_total_credit - v_total_debit - v_cum_off_usage_amt - v_off_amt_after_csu_update;
    --dbms_OUTPUT.PUT_LINE('Total Balance = ' || v_total_bal);
    p_total_bal := v_total_bal;
    p_shadow_bal := v_shadow_bal - v_off_amt_after_csu_update;
    --dbms_OUTPUT.PUT_LINE('Shadow Balance = ' || p_shadow_bal);
    p_host_bal := p_total_bal - p_shadow_bal;
    --dbms_OUTPUT.PUT_LINE('Host Balance = ' || p_host_bal);
    p_msg := 'Successful';

--	p_credit := v_total_credit;
--    p_debit :=  v_total_debit;

EXCEPTION
    WHEN exc_invalid_card THEN
        p_msg := 'Invalid Card Number';
    WHEN OTHERS THEN
        p_msg := 'In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm
        ;

        dbms_output.put_line('In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm
         );

     --   RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE get_card_details(p_card_ref_number character varying, p_mobile_number character varying, p_outlet_id character varying, OUT p_status character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$
v_cnt                  NUMBER;
  v_ref_cnt            NUMBER;
  detail_not_found  EXCEPTION;
 
BEGIN

 IF p_card_ref_number IS NOT NULL AND P_MOBILE_NUMBER IS NOT NULL  THEN

 --COUNT 
 
  SELECT COUNT(1) INTO V_CNT FROM card_detail cd JOIN cms_card_detail_extention cde ON(cd.card_ref_number=cde.card_ref_no) 
    join cms_cust_details cust on(cust.cust_seq_id=cd.cust_seq_id) 
    JOIN cms_outlet co ON(co.outlet_id=p_outlet_id AND cd.issuer_id=co.issuer_id) 
	WHERE cd.card_ref_number=p_card_ref_number 
	  and cust.mobile_number =P_MOBILE_NUMBER;
      	    dbms_output.put_line('Success  '||V_CNT);

      if v_cnt > 0 then 
	  
	    dbms_output.put_line('Success 1 '||v_cnt);

      p_status :='Success';
      OPEN p_out FOR SELECT cd.status,
    cd.product_id,
    cd.issuer_id,
    cust.mobile_number,
    cde.outlet_id,
    cd.hash_card_number,
    cde.mask_card_number,
    cd.is_instant,
    cd.branch_id,
    cd.email_id,
    cd.reason_code FROM card_detail cd JOIN cms_card_detail_extention cde ON(cd.card_ref_number=cde.card_ref_no) 
    join cms_cust_details cust on(cust.cust_seq_id=cd.cust_seq_id) 
    JOIN cms_outlet co ON(co.outlet_id=p_outlet_id AND cd.issuer_id=co.issuer_id) 
	WHERE cd.card_ref_number=p_card_ref_number 
	  and cust.mobile_number = p_mobile_number;

    
    
    else 
    
     raise detail_not_found ;
    
    end if;
    
    elsif p_card_ref_number IS NOT NULL AND P_MOBILE_NUMBER IS NULL then 
    
    
    SELECT COUNT(1) INTO V_CNT FROM card_detail cd JOIN cms_card_detail_extention cde ON(cd.card_ref_number=cde.card_ref_no) 
    join cms_cust_details cust on(cust.cust_seq_id=cd.cust_seq_id) 
    JOIN cms_outlet co ON(co.outlet_id=p_outlet_id AND cd.issuer_id=co.issuer_id) 
	WHERE cd.card_ref_number=p_card_ref_number ;
      	    dbms_output.put_line('Success 12'||v_cnt);

      if v_cnt > 0 then 
	        	    dbms_output.put_line('Success 132'||v_cnt);

	  p_status :='Success';
      
      OPEN p_out FOR SELECT cd.status,
    cd.product_id,
    cd.issuer_id,
    cust.mobile_number,
    cde.outlet_id,
    cd.hash_card_number,
    cde.mask_card_number,
    cd.is_instant,
    cd.branch_id,
    cd.email_id,
    cd.reason_code FROM card_detail cd JOIN cms_card_detail_extention cde ON(cd.card_ref_number=cde.card_ref_no) 
    join cms_cust_details cust on(cust.cust_seq_id=cd.cust_seq_id) 
    JOIN cms_outlet co ON(co.outlet_id=p_outlet_id AND cd.issuer_id=co.issuer_id) 
	WHERE cd.card_ref_number=p_card_ref_number ;
    
    
    else 
    
     raise detail_not_found ;
    
    end if;
    
    end if;

EXCEPTION
WHEN detail_not_found THEN
  p_status:='Card details not found';
  dbms_output.put_line('p_status  '||p_status);
WHEN OTHERS THEN
  p_status:='Card details not found';
  DBMS_OUTPUT.PUT_LINE(SQLCODE||SQLERRM);
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION get_co_ack_till_date(p_outlet_id character varying, p_product_id character varying)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
total_cards number;

begin
      select nvl(sum(quantity),0)
      into total_cards
      from inventory_manager
      where upper(status) = 'CO ACKNOWLEDGED'
      and BRANCH_ID is not null
      and outlet_id = p_outlet_id
      and PRODUCT_ID = p_product_id
      and mo_id is not null
      and issuer_id is not null;


      dbms_output.put_line('total_cards '|| total_cards);
      RETURN ABS(total_cards);

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_co_active_issued_cards(p_from_date character varying, p_to_date character varying, p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_active_issued_count_co number :=0;
begin

   SELECT  count(1)
          into v_active_issued_count_co
          FROM  CARD_DETAIL cd,
                CMS_CARD_DETAIL_EXTENTION ext,
                cms_outlet co
          WHERE cd.CARD_REF_NUMBER  = ext.CARD_REF_NO
          AND co.outlet_id=ext.outlet_id
          AND co.parent_id<>0
          AND co.outlet_id=p_outlet_id
          and cd.product_id=p_product_id
          AND TRUNC(ext.ISSUED_DATE) between to_date(p_from_date,'DD-MM-YYYY') AND to_date(p_to_date,'DD-MM-YYYY')
          and cd.STATUS = 'A'
          and ext.issued_date is not null;

          return v_active_issued_count_co;

exception 
when others then

return 0;
end$function$
;

CREATE OR REPLACE FUNCTION get_co_assigned_cards(p_from_date character varying, p_to_date character varying, p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_co_assigned number :=0;
begin

         select nvl(sum(quantity),0) 
          into v_co_assigned
          from inventory_manager 
          where status='CO INDENTED' 
          and product_id=p_product_id
          and outlet_id=p_outlet_id
          AND TRUNC(SUBMIT_DATE) between to_date(p_from_date,'DD-MM-YYYY') AND to_date(p_to_date,'DD-MM-YYYY');

          return v_co_assigned;

exception 
when others then

return 0;
end$function$
;

CREATE OR REPLACE FUNCTION get_co_available_cards(p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
total_cards number;

begin
    -- total_cards := get_co_ack_till_date(p_outlet_id) - get_co_issued_till_date(p_outlet_id);

    select count(cd.CARD_REF_NUMBER)
        into total_cards
        from CARD_DETAIL cd , CMS_CARD_DETAIL_EXTENTION ext 
        where cd.card_ref_number = ext.card_ref_no
        and ext.ISSUED_DATE is null
        and ext.OUTLET_ACKNOWLEDGE_DATE is not null 
        and ext.OUTLET_ID = p_outlet_id
        and cd.product_id= p_product_id
        and cd.IS_INSTANT = 'Y';


      dbms_output.put_line('total_cards '|| total_cards);
      RETURN ABS(total_cards);

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_co_last_ack_date(p_outlet_id character varying, p_product_id character varying)
 RETURNS timestamp without time zone
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_last_ack_date date;

begin 
      select ack_date into v_last_ack_date from (
      select ack_date , row_number()over (order by ack_date desc) rn from cms_outlet_card_request where outlet_id=p_outlet_id and status='CO ACKNOWLEDGED' AND product_id=p_product_id
      ) where rn=1;

      RETURN v_last_ack_date;

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_co_last_ack_date(p_outlet_id character varying, p_product_id numeric)
 RETURNS timestamp without time zone
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_last_ack_date date;

begin 
      select ack_date into v_last_ack_date from (
      select ack_date , row_number()over (order by ack_date desc) rn from cms_outlet_card_request where outlet_id=p_outlet_id and status='CO ACKNOWLEDGED' AND product_id=p_product_id
      ) where rn=1;

      RETURN v_last_ack_date;

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_co_last_ack_quantity(p_outlet_id character varying, p_product_id character varying)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_last_ack_quantity number;

begin 
      select nvl(SUB_BATCH_CARDS_ASSIGNED,0) into v_last_ack_quantity from (
      select SUB_BATCH_CARDS_ASSIGNED , row_number()over (order by ack_date desc) rn from cms_outlet_card_request where outlet_id=p_outlet_id and status='CO ACKNOWLEDGED' AND product_id=p_product_id
      ) where rn=1;

      RETURN v_last_ack_quantity;

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_co_last_ack_quantity(p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_last_ack_quantity number;

begin 
      select nvl(total_cards_assigned,0) into v_last_ack_quantity from (
      select total_cards_assigned , row_number()over (order by ack_date desc) rn from cms_outlet_card_request where outlet_id=p_outlet_id and status='CO ACKNOWLEDGED' AND product_id=p_product_id
      ) where rn=1;

      RETURN v_last_ack_quantity;

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_co_last_requested_date(p_outlet_id character varying, p_product_id numeric)
 RETURNS timestamp without time zone
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_co_last_requested_date date;
begin
 select REQUEST_DATE
          into v_co_last_requested_date from
    ( select request_date , row_number()over (order by request_date desc)  rn   from cms_outlet_card_request 
          where outlet_id=p_outlet_id
          and product_id=p_product_id
         ) where rn=1;


          return v_co_last_requested_date;


end$function$
;

CREATE OR REPLACE FUNCTION get_co_requested_cards(p_from_date character varying, p_to_date character varying, p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_co_requested number :=0;
begin
	select nvl(sum(TOTAL_CARDS_REQUESTED),0) from (
 select distinct outlet_batch_id ,total_cards_requested 
          into v_co_requested
          from cms_outlet_card_request 
          where outlet_id=p_outlet_id
          and product_id=p_product_id
          and trunc(REQUEST_DATE) between to_date(p_from_date,'DD-MM-YYYY') and to_date(p_to_date,'DD-MM-YYYY'));

          return v_co_requested;

exception 
when others then

return 0;
end$function$
;

CREATE OR REPLACE FUNCTION get_co_total_issued_cards(p_from_date character varying, p_to_date character varying, p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_total_issued_co_count number :=0;
begin

 SELECT  count(1)
          into v_total_issued_co_count
          FROM  CARD_DETAIL cd,
                CMS_CARD_DETAIL_EXTENTION ext,
               cms_outlet co
          WHERE cd.CARD_REF_NUMBER  = ext.CARD_REF_NO
          AND co.OUTLET_ID=EXT.outlet_id
          AND co.outlet_id=p_outlet_id
          AND co.PARENT_ID<>0
          and cd.product_id=p_product_id
          AND TRUNC(ISSUED_DATE) between to_date(p_from_date,'DD-MM-YYYY') AND to_date(p_to_date,'DD-MM-YYYY');

          return v_total_issued_co_count;

exception 
when others then

return 0;
end$function$
;

CREATE OR REPLACE PROCEDURE get_customer_details(p_card_ref_number character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$ 

    v_cust_cnt   NUMBER:=0; 

BEGIN 

    SELECT 

        COUNT(1) 

    INTO 

        v_cust_cnt 

    FROM 

        card_detail cd join cms_cust_details ccd
		
		on(cd.cust_seq_id=ccd.cust_seq_id)

    WHERE 

        cd.card_ref_number=p_card_ref_number;

    IF 

        v_cust_cnt = 0 

    THEN 

        RETURN; 

    END IF; 

    OPEN p_out FOR 

        select
	nvl(ccd.first_name,'') as first_name,
	nvl(ccd.last_name,'') as last_name,
	nvl(ccd.employee_mol_id,'') as employee_mol_id,
	nvl(ccd.employer_id,'') as employer_id,
	nvl(ccd.employee_id,'') as employee_id,
	nvl(ccd.emirates_id,'') as emirates_id,
	nvl(ccd.emirates_name,'') as emirates_name,
	nvl(ccd.employee_account_number,'') as employee_account_number ,
	nvl(ccd.date_of_birth,'') as dob,
	nvl(ccd.mobile_number::text,'') as mobile_number ,
	nvl(ccd.current_address_line1,'') as address1,
-- 	ccd.current_address_line2 as address2,
	nvl(ccd.nationality,'') as nationality,
	nvl(cd.status,'') as card_status,
	nvl(cd.reason_code,'') as reason_code,
	nvl(ccd.kyc_flag,'') as kyc_flag,
	-- ccd.current_city as city,
	--	ccd.current_state as state,
	-- ccd.current_pin_code as pincode,
 nvl(ccd.product_code::text,'') as product_code,
	nvl(cast(cd.card_activated_on as varchar2(20)),'') as card_activation_date
from
	card_detail cd
join cms_cust_details ccd on
	(cd.cust_seq_id = ccd.cust_seq_id)
where
	cd.card_ref_number = p_card_ref_number;   
       
		
		

EXCEPTION 

    WHEN OTHERS THEN 

        RAISE; 

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION get_from_to_date_flag(p_role_id character varying, p_report_id character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 
v_out_status varchar2(10);
begin
 SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                              return v_out_status;


exception 
when others then
dbms_output.put_line('Invalid Report Configuration');
end$function$
;

CREATE OR REPLACE FUNCTION get_issuer_blank_cards(p_issuer_id numeric, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
total_cards           NUMBER;
    total_damaged         NUMBER;
    total_available       NUMBER;
    total_branch_level    NUMBER;
    total_blocked_level   NUMBER;
begin
	
	
	select coalesce(sum(nvl(cr,0)),0) - coalesce(sum(nvl(dr,0)),0)
	into total_available
	from
(select case when drcr = 'CR' then no_of_cards end CR ,
       case when drcr = 'DR' then no_of_cards end  DR
from prd_bin_profile p join 
 inventory_blank_card_manager i on i.image_code  = p.image_code and i.vendor_id =p.card_perso_vendor_id  
 and upper(i.scheme_type)  = upper(p.network_scheme) 
 where p.product_id  = p_product_id
)
;
	
	    RETURN abs(total_available);
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END
$function$
;

CREATE OR REPLACE PROCEDURE get_max_off_limit_and_thres(p_card_no character varying, OUT p_min_threshold numeric, OUT p_max_offline numeric)
 SECURITY DEFINER
AS $procedure$
BEGIN
    SELECT
        minimum_threshhold,
        MAXIMUM_OFFLINE_LIMIT
    INTO
        p_min_threshold,p_max_offline
    FROM
        prd_balance_profile_new
    WHERE
        instrument_profile_id IN (
            SELECT
                id
            FROM
                prd_instrument_profile
            WHERE
                   to_number(product_id) = (
                        SELECT
                            product_id
                        FROM
                            card_detail
                        WHERE
                            hash_card_number = p_card_no
                    )
        );

    DBMS_OUTPUT.put_line('p_min_threshold: '||p_min_threshold|| ', p_max_offline: '||p_max_offline);

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('In Exception: '
         || sqlcode
         || ' Error Message: '
         || sqlerrm
         || ' ');
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION get_mo_assign_till_date(p_mo_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
total_cards number;
begin
      select nvl(sum(quantity),0)
      into total_cards
      from inventory_manager
      where upper(status) = 'MO INDENTED'
      and MO_ID = p_mo_id
      and PRODUCT_ID = p_product_id
      and outlet_id is null
      and issuer_id is not null
      and BRANCH_ID is not null;



      --total_available := (total_cards - total_damaged) - (total_branch_level - total_blocked_level);
      dbms_output.put_line('total_cards '|| total_cards);
      RETURN ABS(total_cards);

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;
end$function$
;

CREATE OR REPLACE FUNCTION get_mo_assigned_cards(p_from_date character varying, p_to_date character varying, p_mo_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_mo_assigned number :=0;
begin
  select nvl(sum(TOTAL_CARDS_APPROVED),0)
          into  v_mo_assigned
          from cms_mo_card_request 
          where mo_id=p_mo_id
          and product_id=p_product_id
          and trunc(approved_date) between to_date(p_from_date,'DD-MM-YYYY') and to_date(p_to_date,'DD-MM-YYYY');


          return v_mo_assigned;

exception 
when others then

return 0;
end$function$
;

CREATE OR REPLACE FUNCTION get_mo_available_cards(p_mo_id numeric, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
    v_available_cards_at_mo   NUMBER;
BEGIN

    SELECT
        COUNT(1)
    INTO v_available_cards_at_mo
    FROM
        card_detail cd
        JOIN cms_card_detail_extention cde ON cd.card_ref_number = cde.card_ref_no
    WHERE
        cd.product_id = p_product_id
        AND cde.mo_id = p_mo_id
        AND cd.batch_no LIKE 'BI%'
        AND cde.outlet_id IS NULL
        AND nvl(cde.outlet_indented_by,0) = 0
        AND cde.outlet_indented_date IS NULL
        AND cde.mo_indented_date IS NOT NULL
        AND cde.mo_indented_by IS NOT NULL
        AND cde.ho_indented_date IS NOT NULL
        AND cde.ho_indented_by IS NOT NULL
        AND cde.ho_id IS NOT NULL
        AND cd.status = 'GNI';

    RETURN v_available_cards_at_mo;

EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END$function$
;

CREATE OR REPLACE FUNCTION get_mo_int_till_date(p_outlet_id character varying, p_product_id character varying)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
total_cards number;

begin
      select nvl(sum(quantity),0)
      into total_cards
      from inventory_manager
      where upper(status) = 'MO INDENTED'
      and BRANCH_ID is not null
      and mo_id = p_outlet_id
      and PRODUCT_ID = p_product_id
     -- and mo_id is not null
      and issuer_id is not null;


      dbms_output.put_line('total_cards '|| total_cards);
      RETURN ABS(total_cards);

EXCEPTION
WHEN OTHERS
THEN 
RETURN NULL;

end$function$
;

CREATE OR REPLACE FUNCTION get_mo_last_ack_date(p_outlet_id character varying, p_product_id numeric)
 RETURNS timestamp without time zone
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_co_last_requested_date date;
begin
 select mo_ack_date
          into v_co_last_requested_date from
    ( select mo_ack_date , row_number()over (order by mo_ack_date desc)  rn   from cms_mo_card_request cmcr 
          where mo_id=p_outlet_id
          and product_id=p_product_id
          and (upper(status)='APPROVED' or upper(status)='PARTIALLY APPROVED')
         ) where rn=1;


          return v_co_last_requested_date;

         exception 
when others then

return null;

end$function$
;

CREATE OR REPLACE FUNCTION get_mo_last_ack_quantity(p_outlet_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_total_cards_approved numeric;
begin
 select total_cards_approved
          into v_total_cards_approved from
    ( select total_cards_approved , row_number()over (order by mo_ack_date desc)  rn   from cms_mo_card_request cmcr 
          where mo_id=p_outlet_id
          and product_id=p_product_id
          and (upper(status)='APPROVED' or upper(status)='PARTIALLY APPROVED')
         ) where rn=1;


          return v_total_cards_approved;

      exception when others
      then 
      return 0;

end$function$
;

CREATE OR REPLACE FUNCTION get_mo_last_requested_date(p_outlet_id character varying, p_product_id numeric)
 RETURNS timestamp without time zone
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_co_last_requested_date date;
begin
 select REQUEST_DATE
          into v_co_last_requested_date from
    ( select request_date , row_number()over (order by request_date desc)  rn   from cms_mo_card_request cmcr 
          where mo_id=p_outlet_id
          and product_id=p_product_id
         ) where rn=1;


          return v_co_last_requested_date;


end$function$
;

CREATE OR REPLACE FUNCTION get_mo_requested_cards(p_from_date character varying, p_to_date character varying, p_mo_id character varying, p_product_id numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$ 

v_mo_requested number :=0;
begin
 select nvl(sum(TOTAL_CARDS_REQUESTED),0)
          into v_mo_requested
          from cms_mo_card_request 
          where mo_id=p_mo_id
          and product_id=p_product_id
          and trunc(REQUEST_DATE) between to_date(p_from_date,'DD-MM-YYYY') and to_date(p_to_date,'DD-MM-YYYY');

          return v_mo_requested;

exception 
when others then

return 0;
end$function$
;

CREATE OR REPLACE PROCEDURE insert_digital(p_outlet_id character varying, p_card_no character varying, p_channel_id character varying, p_channel_type character varying, p_msg_type character varying, p_response_code character varying, p_pay_mode character varying, p_pay_txn_ref_no character varying, p_amount numeric, p_src_req_id character varying, p_pg_mid character varying, p_txn_id character varying, p_ref_tid character varying, OUT p_out character varying, OUT p_arn_ref character varying)
 SECURITY DEFINER
AS $procedure$

    v_first_topup_done      VARCHAR2(10) := 'N';
    v_product_id            NUMBER := 0;
    v_issuer_id             NUMBER := 0;
    v_annual_cnt            NUMBER := 0;
    v_cnt                   NUMBER := 0;
    v_annual_fee_amt        NUMBER := 0;
    v_deduct_annual_fee     VARCHAR2(2) := 'N';
    v_arn_ref               VARCHAR2(50);
    v_is_instant            VARCHAR2(1);
    v_top_up_fee_cnt        NUMBER := 0;
    v_fee_flag              VARCHAR2(1);
    v_perc                  NUMBER := 0;
    v_min_max               VARCHAR2(5);
    v_perc_deduct           NUMBER := 0;
    v_total_deduct          NUMBER := 0;
    v_deduct_topup_fee      VARCHAR2(1);
    v_top_up_fee_amt        NUMBER := 0;
    v_host_and_shadow_bal   VARCHAR2(30);
    v_total_bal             NUMBER;
    v_host_bal              NUMBER;
    v_shadow_bal            NUMBER;
BEGIN
    SELECT
        is_first_topup_done,
        product_id,
        issuer_id,
        is_instant
    INTO
        v_first_topup_done,v_product_id,v_issuer_id,v_is_instant
    FROM
        card_detail
    WHERE
        hash_card_number = p_card_no;

    dbms_output.put_line('card number ::' || p_card_no);
    dbms_output.put_line('v_first_topup_done ::' || v_first_topup_done);
    dbms_output.put_line('v_product_id ::' || v_product_id);
    dbms_output.put_line('v_issuer_id ::' || v_issuer_id);
    dbms_output.put_line('v_is_instant ::' || v_is_instant);
    IF
        nvl(v_first_topup_done,'N') = 'N'
    THEN
        --To check if Annual Fee has to be deducted on First Top Up
        SELECT
            COUNT(1)
        INTO
            v_annual_cnt
        FROM
            cms_event_actions
        WHERE
                product_id = v_product_id
            AND
                issuer_id = v_issuer_id
            AND
                event_id = 2
            AND
                action_id = 2;

        dbms_output.put_line('v_first_topup_done ::' || v_first_topup_done);
        IF
            v_annual_cnt > 0
        THEN
            --Retrieving Annual Fee Amount
            SELECT
                COUNT(1)
            INTO
                v_cnt
            FROM
                prd_fee_profile
            WHERE
                    issuer_id = v_issuer_id
                AND
                    txn_type = DECODE(
                        v_is_instant,
                        'Y',
                        '93133',
                        'N',
                        '93134'
                    );

            dbms_output.put_line('v_cnt ::' || v_cnt);
            IF
                v_cnt > 0
            THEN
                SELECT
                    fee_amount
                INTO
                    v_annual_fee_amt
                FROM
                    prd_fee_profile
                WHERE
                        issuer_id = v_issuer_id
                    AND
                        txn_type = DECODE(
                            v_is_instant,
                            'Y',
                            '93133',
                            'N',
                            '93134'
                        );

                dbms_output.put_line('v_annual_fee_amt ::' || v_annual_fee_amt);
                IF
                    p_amount > v_annual_fee_amt
                THEN
                    v_deduct_annual_fee := 'Y';
                    dbms_output.put_line('v_deduct_annual_fee ::' || v_deduct_annual_fee);
                ELSE
                    p_out := 'Top up amount should greater than annual fee';
                    dbms_output.put_line('p_out ::' || p_out);
                END IF;

            ELSE
                p_out := 'Annual Fee amount is not configured';
                dbms_output.put_line('p_out ::' || p_out);
            END IF;

        END IF;

    END IF;

--code for deduct top up amt fee

    SELECT
        COUNT(1)
    INTO
        v_top_up_fee_cnt
    FROM
        cms_event_actions
    WHERE
            product_id = v_product_id
        AND
            issuer_id = v_issuer_id
        AND
            event_id = 3
        AND
            action_id = 3;

    dbms_output.put_line('v_top_up_fee_cnt ::' || v_top_up_fee_cnt);
    IF
        v_top_up_fee_cnt > 0
    THEN
            --Retrieving Top Up Fee Amount
        SELECT
            COUNT(1)
        INTO
            v_cnt
        FROM
            prd_fee_profile
        WHERE
                issuer_id = v_issuer_id
            AND
                txn_type = '93135';

        dbms_output.put_line('v_cnt ::' || v_cnt);
        IF
            v_cnt > 0
        THEN
            SELECT
                fee_amount,
                variable_fee_flag,
                variable_perc,
                variable_min_max
            INTO
                v_top_up_fee_amt,v_fee_flag,v_perc,v_min_max
            FROM
                prd_fee_profile
            WHERE
                    issuer_id = v_issuer_id
                AND
                    txn_type = '93135';

            dbms_output.put_line('v_top_up_fee_amt ::' || v_top_up_fee_amt);
            dbms_output.put_line('v_fee_flag ::' || v_fee_flag);
            dbms_output.put_line('v_perc ::' || v_perc);
            dbms_output.put_line('v_min_max ::' || v_min_max);
            IF
                v_fee_flag = 'Y' AND
                    v_min_max IN (
                        'MIN','MAX'
                    )
            THEN
                SELECT
                    ROUND(p_amount * v_perc / 100)
                INTO
                    v_perc_deduct
                FROM
                    dual;

                dbms_output.put_line('v_perc_deduct ::' || v_perc_deduct);
                SELECT
                    CASE
                        WHEN
                            v_min_max = 'MIN'
                        AND
                            v_perc_deduct < v_top_up_fee_amt
                        THEN v_perc_deduct
                        WHEN
                            v_min_max = 'MIN'
                        AND
                            v_perc_deduct > v_top_up_fee_amt
                        THEN v_top_up_fee_amt
                        WHEN
                            v_min_max = 'MAX'
                        AND
                            v_perc_deduct > v_top_up_fee_amt
                        THEN v_perc_deduct
                        WHEN
                            v_min_max = 'MAX'
                        AND
                            v_perc_deduct < v_top_up_fee_amt
                        THEN v_top_up_fee_amt
                    END
                INTO
                    v_total_deduct
                FROM
                    dual;

                dbms_output.put_line('v_total_deduct Y ::' || v_total_deduct);
            ELSIF v_fee_flag = 'N' THEN
                v_total_deduct := v_top_up_fee_amt;
                dbms_output.put_line('v_total_deduct N ::' || v_total_deduct);
            END IF;

            IF
                p_amount > v_total_deduct
            THEN
                v_deduct_topup_fee := 'Y';
                dbms_output.put_line('v_deduct_topup_fee ::' || v_deduct_topup_fee);
            ELSE
                p_out := 'Top up amount should greater than top up deduction amount';
                dbms_output.put_line('p_out ::' || p_out);
            END IF;

        ELSE
            p_out := 'Top Fee amount is not configured';
            dbms_output.put_line('p_out ::' || p_out);
        END IF;

    END IF;

    SELECT
        lpad(
            load_seq.NEXTVAL,
            16,
            0
        )
    INTO
        v_arn_ref
    FROM
        dual;

    SELECT
        balance_calc(p_card_no)
    INTO
        v_host_and_shadow_bal
    FROM
        dual;

    SELECT
        regexp_substr(v_host_and_shadow_bal,'[^#]+',1,1),
        regexp_substr(v_host_and_shadow_bal,'[^#]+',1,2)
    INTO
        v_total_bal,v_shadow_bal
    FROM
        dual;

    v_host_bal := v_total_bal - v_shadow_bal;

    INSERT INTO digital_txn_authorization (
        id,
        arn,
        branch_id,
        card_enc,
        card_token,
        channel_id,
        channel_type,
        date_time,
        dr_cr_flag,
        msg_type,
        response_code,
        txn_amount,
        last_settle_date,
        mid,
        topup_pay_mode,
        topup_txn_refno,
        source_req_id,
        arn_reference,
        pg_mid,
        txn_id,
        total_bal,
        host_bal,
        shadow_bal,
        ref_tid
    ) VALUES (
        digital_txn_seq.NEXTVAL,
        'SUCCESS',
        p_outlet_id,
        p_card_no,
        p_card_no,
        p_channel_id,
        p_channel_type,
        SYSDATE,
        'Cr',
        p_msg_type,
        p_response_code,
        p_amount,
        SYSDATE,
        (
            SELECT
                parent_id
            FROM
                cms_outlet
            WHERE
                outlet_id = p_outlet_id
        ),
        p_pay_mode,
        p_pay_txn_ref_no,
        p_src_req_id,
        v_arn_ref,
        p_pg_mid,
        p_txn_id,
        v_total_bal + p_amount,
        v_host_bal + p_amount,
        v_shadow_bal,
        p_ref_tid
    );

    COMMIT;
    p_arn_ref := v_arn_ref;
    IF
        v_deduct_annual_fee = 'Y'
    THEN
        SELECT
            balance_calc(p_card_no)
        INTO
            v_host_and_shadow_bal
        FROM
            dual;

        SELECT
        regexp_substr(v_host_and_shadow_bal,'[^#]+',1,1),
        regexp_substr(v_host_and_shadow_bal,'[^#]+',1,2)
        INTO
            v_total_bal,v_shadow_bal
        FROM
            dual;

    v_host_bal := v_total_bal - v_shadow_bal;

        INSERT INTO cs_fee_temp (
            date_time,
            fee_description,
            card_number,
            fee_amt,
            rrn,
            reversal_flag,
            settle_date,
            acc_flag,
            fee_ind,
            acc_date,
            seq_id,
            balance_update_flag,
            balance_update_date,
            bal_update_flag_ruk,
            bal_update_date_ruk,
            rev_org_seq_id,
            tid,
            stan,
            batch_number,
            ticket_id,
            entry_date_time,
            drcr,
            bal_update_settl_flag,
            bal_update_settl_date,
            total_bal,
            host_bal,
            shadow_bal,
            PAY_MODE
        ) VALUES (
            SYSDATE,
            DECODE(
                v_is_instant,
                'Y',
                'Annual Fee',
                'N',
                'Perso Annual Fee'
            ),
            p_card_no,
            v_annual_fee_amt,
            cs_fee_temp_rrn.NEXTVAL,
            NULL,
            NULL,
            NULL,
            DECODE(
                v_is_instant,
                'Y',
                '93133',
                'N',
                '93134'
            ),
            NULL,
            TO_CHAR(SYSDATE,'DDMONYY') || '.' || lpad(
                cs_fee_temp_seq.NEXTVAL,
                8,
                '0'
            ),
            'N',
            NULL,
            'N',
            NULL,
            NULL,
            p_outlet_id,
            NULL,
            NULL,
            NULL,
            SYSDATE,
            'Dr',
            NULL,
            NULL,
            v_total_bal - v_annual_fee_amt,
            v_host_bal - v_annual_fee_amt,
            v_shadow_bal,
            p_pay_mode
        );

    END IF;

    IF
        v_deduct_topup_fee = 'Y'
    THEN
        SELECT
            balance_calc(p_card_no)
        INTO
            v_host_and_shadow_bal
        FROM
            dual;

        SELECT
        regexp_substr(v_host_and_shadow_bal,'[^#]+',1,1),
        regexp_substr(v_host_and_shadow_bal,'[^#]+',1,2)
        INTO
            v_total_bal,v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

        INSERT INTO cs_fee_temp (
            date_time,
            fee_description,
            card_number,
            fee_amt,
            rrn,
            reversal_flag,
            settle_date,
            acc_flag,
            fee_ind,
            acc_date,
            seq_id,
            balance_update_flag,
            balance_update_date,
            bal_update_flag_ruk,
            bal_update_date_ruk,
            rev_org_seq_id,
            tid,
            stan,
            batch_number,
            ticket_id,
            entry_date_time,
            drcr,
            bal_update_settl_flag,
            bal_update_settl_date,
            total_bal,
            host_bal,
            shadow_bal,
            PAY_MODE
        ) VALUES (
            SYSDATE,
            'Top Up Fee',
            p_card_no,
            v_total_deduct,
            cs_fee_temp_rrn.NEXTVAL,
            NULL,
            NULL,
            NULL,
            '93135',
            NULL,
            TO_CHAR(SYSDATE,'DDMONYY') || '.' || lpad(
                cs_fee_temp_seq.NEXTVAL,
                8,
                '0'
            ),
            'N',
            NULL,
            'N',
            NULL,
            NULL,
            p_outlet_id,
            NULL,
            NULL,
            NULL,
            SYSDATE,
            'Dr',
            NULL,
            NULL,
            v_total_bal - v_total_deduct,
            v_host_bal - v_total_deduct,
            v_shadow_bal,
            p_pay_mode
        );

    END IF;

    p_out := 'Success';
EXCEPTION
    WHEN OTHERS THEN
        p_out := 'In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm
         || dbms_utility.format_error_backtrace;

        dbms_output.put_line('In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm
         || dbms_utility.format_error_backtrace);

        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE insert_fee_proc()
 SECURITY DEFINER
AS $procedure$
    v_count   NUMBER;
BEGIN
    SELECT
        COUNT(*)
    INTO v_count
    FROM
        cs_fee_temp
    WHERE
        acc_flag IS NULL;

    IF
        v_count > 0
    THEN
        FOR i IN (
            SELECT
                c.date_time,
                c.fee_description,
                c.card_number,
                c.fee_amt,
                c.fee_ind,
                c.seq_id,
                c.drcr,
                c.rev_org_seq_id,
                c.tid,
                c.stan,
                c.batch_number,
                c.ticket_id,
                c.entry_date_time,
                c.pay_mode,
                c.rrn,
                cd.prep_account_number
            FROM
                cs_fee_temp c
                join card_Detail cd on cd.hash_Card_number = c.card_number
                join cms_cust_details ccd on ccd.cust_seq_id = cd.cust_seq_id
            WHERE
                acc_flag IS NULL
                AND reversal_flag IS NULL
               -- and ccd.current_state is not null 
             --   and c.card_number in ('95e4b19e50b787869115672cd73ce550d8db4fb4453ea12c657a818a9a9d1ee8')
        ) LOOP
            fee_procedure(i.card_number,i.fee_amt,i.fee_description,i.fee_ind,i.date_time,i.seq_id,i.drcr,i.rev_org_seq_id,i.tid,i.stan,i.batch_number
,i.ticket_id,i.entry_date_time,i.pay_mode,i.rrn,i.prep_account_number);

        END LOOP;

    ELSE
        NULL;
    END IF;

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION latest_topup(p_hash_card_number character varying)
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_SYS_TXN_DATE VARCHAR2(50);
v_return varchar2(500);
hash_card_no VARCHAR2(70);

begin



  select TO_CHAR(TXN_TIME,'DD-MON-YYYY HH24:MI:SS')||'#'||nvl(ltrim(to_char(AMOUNT,'999999990.99')),'0')
  into v_return
  from TOP_UP_VIEW
  WHERE TXN_TIME = (select max(TXN_TIME)
                    FROM  TOP_UP_VIEW
                    WHERE card_no=p_hash_card_number)
  and card_no = p_hash_card_number;
dbms_output.put_line('v_return '||v_return);

  return v_return;

EXCEPTION WHEN others 
THEN
dbms_output.put_line('error occurred'||sqlcode||sqlerrm);
RETURN 0||'#'||0;

end
$function$
;

CREATE OR REPLACE FUNCTION luhn(x numeric)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
  l_x number := x;
  l_sum number := 0;
  d number;
begin
  while l_x > 0 loop
    d := mod(l_x,10)*2;
    if d > 9 then
      d:= d - 9;
    end if;
    l_sum := l_sum + d;
    l_x := trunc(l_x/10);
    d := mod(l_x,10);
    l_sum := l_sum + d;
    l_x := trunc(l_x/10);
  end loop;
  l_sum := 10-mod(l_sum,10);
  return mod(l_sum,10);
end$function$
;

CREATE OR REPLACE PROCEDURE mini_statement(p_card character varying, p_count numeric, INOUT p_out1 refcursor, OUT p_out2 character varying)
 SECURITY DEFINER
AS $procedure$
    v_host_and_shadow_bal   VARCHAR2(30);
    v_host_bal              NUMBER;
    v_shadow_bal            NUMBER;
    v_card_cnt              NUMBER;
   
    exc_invalid_card EXCEPTION;
BEGIN
    SELECT
        COUNT(1)
    INTO
        v_card_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_card;

    IF
        v_card_cnt = 0
    THEN
        raise exc_invalid_card;
    END IF;
    OPEN p_out1 FOR
        SELECT
            TO_CHAR(txn_date,'DD/MM/YY') AS "Date",
                CASE drcr
                    WHEN 'Dr'   THEN 'D'
                    WHEN 'Cr'   THEN 'C'
                    ELSE drcr
                END
            AS "DRCR",
            type,
            amount
        FROM
            (
                SELECT
                    txn_date,
                    drcr,
                    type,
                    amount
                FROM
                    (
                        --Offline
                        SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'TRAN/'
                             || upper(substr(f043,1,6) ) AS type,
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_offline
                        WHERE
                                drcr IN (
                                    'D','C'
                                )
                            AND
                                f039 = '00'
                            AND
                                f002 = p_card
                        UNION ALL
                        --Auth POS
                         SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'POS/'
                             || upper(substr(f043,1,7) ),-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                            
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_authrization
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '21000'
                            AND
                                drcr = 'D'
                            AND
                                f039 = '00'
                            AND
                                substr(f022,1,2) != 81
                        UNION ALL
                        --Auth ECOM
                         SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'ECOM/'
                             || upper(substr(f043,1,6) ),-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                            
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_authrization
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '21000'
                            AND
                                drcr = 'D'
                            AND
                                f039 = '00'
                            AND
                                substr(f022,1,2) = 81
                        UNION ALL
                        SELECT
                            sys_txn_date AS txn_date,
                            'C' AS drcr,
                            'REV /POS ',-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                                                         
                            f004 / 100 AS amount                            
                        FROM
                            aswt_switch_txn_authrization a
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '42000'
                            AND
                                drcr = 'R'
                            AND
                                f039 = '00'
                            AND sub_txn_type in(select reason_code from aswt_reversal_reason_code)    
                        UNION ALL
                        --Auth Top up
                         SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'TOP UP/POS ',-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                                                        
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_authrization
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '21028'
                            AND
                                drcr = 'C'
                            AND
                                f039 = '00'
                        UNION ALL
                        --Digi Top Up
                         SELECT
                            date_time AS txn_date,
                            dr_cr_flag AS drcr,
                            NVL((
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type
                                WHERE
                                    txn_type = a.txn_type
                            ),'TOP UP')
                             || '/'
                             || upper(substr(channel_type,1,4) ) AS type,-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.
                            txn_amount AS amount
                        FROM
                            digital_txn_authorization a
                        WHERE
                                card_enc = p_card
                            AND
                                dr_cr_flag = 'Cr'
                        UNION ALL
                        --Digi Debit
                         SELECT
                            date_time AS txn_date,
                            dr_cr_flag AS drcr,
                            --'WEB/'
                            NVL((
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type
                                WHERE
                                    txn_type = a.txn_type
                            ),'')
                             || '/'
                             || upper(substr(channel_type,1,4) ) AS type,-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.
                            txn_amount AS amount
                        FROM
                            digital_txn_authorization a
                        WHERE
                                card_enc = p_card
                            AND
                                dr_cr_flag = 'Dr'
                        UNION ALL
                        SELECT
                            date_time AS txn_date,
                            drcr AS drcr,
                            'FEES/'
                             || CASE
                                    WHEN fee_ind IN (
                                        'I','P','93028','93029'
                                    ) THEN 'ISSUAN'
                                    WHEN fee_ind IN (
                                        'R','93128','93129'
                                    ) THEN 'REPLAC'
                                    WHEN fee_ind = '94028' THEN 'BAL EN'
                                    WHEN fee_ind = '21090' THEN 'MINIST'
                                    WHEN fee_ind = '21096' THEN 'PIN CH'
                                    ELSE upper(substr(fee_description,1,6) )
                                END
                            AS type,-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.
                            fee_amt AS amount
                        FROM
                            cs_fee_temp
                        WHERE
                                drcr IN (
                                    'Dr','Cr'
                                )
                            AND
                                card_number = p_card
                    )
                WHERE
                    amount > 0
                ORDER BY txn_date DESC
            )
        WHERE
            ROWNUM <= least(p_count,10);

    SELECT
        balance_check_card(p_card)
    INTO
        v_host_and_shadow_bal
    FROM
        dual;

    /*SELECT
        to_number(substr(
            v_host_and_shadow_bal,
            1,
            instr(v_host_and_shadow_bal,'#') - 1
        ) )
    INTO
        v_host_bal
    FROM
        dual;

    SELECT
        to_number(substr(
            v_host_and_shadow_bal,
            instr(v_host_and_shadow_bal,'#') + 1
        ) )
    INTO
        v_shadow_bal
    FROM
        dual;*/

--    OPEN p_out2 FOR
--        SELECT
--            --v_host_bal - v_shadow_bal 
--            v_host_and_shadow_bal AS "Balance"
--        FROM
--            dual;
      
     p_out2 := v_host_and_shadow_bal;      
           
EXCEPTION
    WHEN exc_invalid_card THEN
        OPEN p_out1 FOR
            SELECT
                'Invalid Card Number'
            FROM
                dual;
               
        p_out2 := 'v_host_and_shadow_bal';        

    WHEN OTHERS THEN
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE new_mini_statement(p_card character varying, p_count numeric, OUT v_available_balance character varying, OUT p_out1 refcursor)
 SECURITY DEFINER
AS $procedure$
    v_host_and_shadow_bal   VARCHAR2(30);
    v_host_bal              NUMBER;
    v_shadow_bal            NUMBER;
    v_card_cnt              NUMBER;
    exc_invalid_card EXCEPTION;
BEGIN
    SELECT
        COUNT(1)
    INTO
        v_card_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_card;

    IF
        v_card_cnt = 0
    THEN
        RETURN;
    END IF;
    OPEN p_out1 FOR
        SELECT
            TO_CHAR(txn_date,'DD/MM/YY') AS "Date",
                CASE drcr
                    WHEN 'Dr'   THEN 'D'
                    WHEN 'Cr'   THEN 'C'
                    ELSE drcr
                END
            AS "DRCR",
            type,
            amount
        FROM
            (
                SELECT
                    txn_date,
                    drcr,
                    type,
                    amount
                FROM
                    (
                        --Offline
                        SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'TRAN/'
                             || upper(substr(f043,1,6) ) AS type,
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_offline
                        WHERE
                                drcr IN (
                                    'D','C'
                                )
                            AND
                                f039 = '00'
                            AND
                                f002 = p_card
                        UNION ALL
                        --Auth POS
                         SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'POS/'
                             || upper(substr(f043,1,7) ),-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                            
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_authrization
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '21000'
                            AND
                                drcr = 'D'
                            AND
                                f039 = '00'
                            AND
                                substr(f022,1,2) != 81
                        UNION ALL
                        --Auth ECOM
                         SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'ECOM/'
                             || upper(substr(f043,1,6) ),-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                            
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_authrization
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '21000'
                            AND
                                drcr = 'D'
                            AND
                                f039 = '00'
                            AND
                                substr(f022,1,2) = 81
                        UNION ALL
                        SELECT
                            sys_txn_date AS txn_date,
                            'C' AS drcr,
                            'REV /POS ',-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                                                         
                            f004 / 100 AS amount                            
                        FROM
                            aswt_switch_txn_authrization a
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '42000'
                            AND
                                drcr = 'R'
                            AND
                                f039 = '00'
                            AND sub_txn_type in(select reason_code from aswt_reversal_reason_code)    
                        UNION ALL
                        --Auth Top up
                         SELECT
                            sys_txn_date AS txn_date,
                            drcr AS drcr,
                            'TOP UP/POS ',-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.                                                        
                            f004 / 100 AS amount
                        FROM
                            aswt_switch_txn_authrization
                        WHERE
                                f002 = p_card
                            AND
                                txn_type = '21028'
                            AND
                                drcr = 'C'
                            AND
                                f039 = '00'
                        UNION ALL
                        --Digi Top Up
                         SELECT
                            date_time AS txn_date,
                            dr_cr_flag AS drcr,
                            NVL((
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type
                                WHERE
                                    txn_type = a.txn_type
                            ),'TOP UP')
                             || '/'
                             || upper(substr(channel_type,1,4) ) AS type,-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.
                            txn_amount AS amount
                        FROM
                            digital_txn_authorization a
                        WHERE
                                card_enc = p_card
                            AND
                                dr_cr_flag = 'Cr'
                        UNION ALL
                        --Digi Debit
                         SELECT
                            date_time AS txn_date,
                            dr_cr_flag AS drcr,
                            --'WEB/'
                            NVL((
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type
                                WHERE
                                    txn_type = a.txn_type
                            ),'')
                             || '/'
                             || upper(substr(channel_type,1,4) ) AS type,-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.
                            txn_amount AS amount
                        FROM
                            digital_txn_authorization a
                        WHERE
                                card_enc = p_card
                            AND
                                dr_cr_flag = 'Dr'
                        UNION ALL
                        SELECT
                            date_time AS txn_date,
                            drcr AS drcr,
                            'FEES/'
                             || CASE
                                    WHEN fee_ind IN (
                                        'I','P','93028','93029'
                                    ) THEN 'ISSUAN'
                                    WHEN fee_ind IN (
                                        'R','93128','93129'
                                    ) THEN 'REPLAC'
                                    WHEN fee_ind = '94028' THEN 'BAL EN'
                                    WHEN fee_ind = '21090' THEN 'MINIST'
                                    WHEN fee_ind = '21096' THEN 'PIN CH'
                                    ELSE upper(substr(fee_description,1,6) )
                                END
                            AS type,-- If ONL(3 characters) has to be replaced with BPAY(4 characters),replace 000 with 00.
                            fee_amt AS amount
                        FROM
                            cs_fee_temp
                        WHERE
                                drcr IN (
                                    'Dr','Cr'
                                )
                            AND
                                card_number = p_card
                    )
                WHERE
                    amount > 0
                ORDER BY txn_date DESC
            )
        WHERE
            ROWNUM <= least(p_count,10);

    SELECT
        balance_check_card(p_card)
    INTO
        v_available_balance
    FROM
        dual;

    /*SELECT
        to_number(substr(
            v_host_and_shadow_bal,
            1,
            instr(v_host_and_shadow_bal,'#') - 1
        ) )
    INTO
        v_host_bal
    FROM
        dual;

    SELECT
        to_number(substr(
            v_host_and_shadow_bal,
            instr(v_host_and_shadow_bal,'#') + 1
        ) )
    INTO
        v_shadow_bal
    FROM
        dual;*/

EXCEPTION
    WHEN exc_invalid_card THEN
        OPEN p_out1 FOR
            SELECT
                'Invalid Card Number'
            FROM
                dual;

    WHEN OTHERS THEN
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_assign_mo_outlet_acknowledge(p_mo_id character varying, p_outlet_id character varying, p_single_card character varying, p_from_card character varying, p_to_card character varying, p_product_id numeric, p_issuer_id numeric, p_branch_id numeric, p_ho_user_id character varying, p_mo_user_id character varying, p_outlet_user_id character varying, OUT p_out_message character varying)
 SECURITY DEFINER
AS $procedure$

    TYPE p_card_ref IS
        TABLE OF VARCHAR2(50);
    v_card_ref      p_card_ref := p_card_ref ();
    v_count         NUMBER;
    v_mo_name       VARCHAR2(50);
    v_ot_name       VARCHAR2(50);
    v_mo_batch_id   VARCHAR2(50);
    v_ot_batch_id   VARCHAR2(50);
BEGIN
    SELECT
        name
    INTO v_mo_name
    FROM
        cms_outlet
    WHERE
        outlet_id = p_mo_id
        AND parent_id = 0;

    SELECT
        name
    INTO v_ot_name
    FROM
        cms_outlet
    WHERE
        outlet_id = p_outlet_id
        AND parent_id = p_mo_id;

    SELECT
        'MO'
        || TO_CHAR(SYSDATE,'ddmmyy')
        || lpad(batch_seq_ot.NEXTVAL,4,'0')
    INTO v_mo_batch_id
    FROM
        dual;

    IF
        p_single_card IS NOT NULL
    THEN
        INSERT INTO cms_mo_card_request (
            id,
            mo_id,
            product_id,
            total_cards_requested,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            remarks,
            issuer_id,
            mo_name,
            mo_batch_id
        ) VALUES (
            mo_card_req_seq.NEXTVAL,--id sequence
            p_mo_id,
            p_product_id,
            1,
            'MO INDENTED',
            SYSDATE,
            p_mo_user_id,
            SYSDATE,
            'Requested by Mo',
            p_issuer_id,
            v_mo_name,
            v_mo_batch_id
        );

        UPDATE cms_mo_card_request
        SET
            total_cards_approved = 1,
            approved_by_ho = p_ho_user_id,
            remarks = 'Approved by HO',
            updated_by = p_ho_user_id,
            updated_date = SYSDATE,
            approved_date = SYSDATE,
            status = 'Approved'
        WHERE
            mo_batch_id = v_mo_batch_id;

        UPDATE cms_card_detail_extention
        SET
            mo_indented_by = p_ho_user_id,
            mo_indented_date = SYSDATE,
            mo_id = p_mo_id,
            mo_batch_id = v_mo_batch_id
        WHERE
            card_ref_no = p_single_card;

        UPDATE cms_mo_card_request
        SET
            start_range = p_single_card,
            end_range = p_single_card
        WHERE
            mo_batch_id = v_mo_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
--    OUTLET_ID,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'MO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        SELECT
            'OT'
            || TO_CHAR(SYSDATE,'ddmmyy')
            || lpad(batch_seq_ot.NEXTVAL,4,'0')
        INTO v_ot_batch_id
        FROM
            dual;

        INSERT INTO cms_outlet_card_request (
            id,
            mo_id,
            outlet_id,
            total_cards_assigned,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            updated_by,
            updated_date,
    --DISPATCHED_DATE,
    --DISPATCHED_BY_HO_ID,
    --ACK_DATE,
    --ACK_BY_OUTLET_ID,
            product_id,
            issuer_id,
            outlet_batch_id,
            outlet_name,
--    START_RANGE,
--    END_RANGE,
            is_instant
        ) VALUES (
            co_card_req_seq.NEXTVAL,
            p_mo_id,
            p_outlet_id,
            1,
            'CO INDENTED',
            SYSDATE,
            p_mo_user_id,
            SYSDATE,
            p_mo_user_id,
            SYSDATE,
            p_product_id,
            p_issuer_id,
            v_ot_batch_id,
            v_ot_name,
            'Y'
        );

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        UPDATE cms_card_detail_extention
        SET
            outlet_indented_by = p_mo_user_id,
            outlet_indented_date = SYSDATE,
            outlet_id = p_outlet_id,
            outlet_batch_id = v_ot_batch_id
        WHERE
            card_ref_no = p_single_card;

        UPDATE cms_outlet_card_request
        SET
            start_range = p_single_card,
            end_range = p_single_card
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_outlet_card_request
        SET
            dispatched_date = SYSDATE,
            dispatched_by_ho_id = p_ho_user_id,
            status = 'CO DISPATCHED'
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_card_detail_extention
        SET
            outlet_dispatch_date = SYSDATE,
            outlet_dispatch_by = p_ho_user_id
        WHERE
            card_ref_no = p_single_card;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO DISPATCHED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        UPDATE cms_outlet_card_request
        SET
            status = 'CO ACKNOWLEDGED',
            updated_by = p_outlet_user_id,
            updated_date = SYSDATE,
            ack_date = SYSDATE,
            ack_by_outlet_id = p_outlet_user_id
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_card_detail_extention
        SET
            outlet_acknowledge_date = SYSDATE,
            outlet_acknowledge_by = p_outlet_user_id
        WHERE
            outlet_batch_id = v_ot_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO ACKNOWLEDGED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        UPDATE card_detail
        SET
            outlet_id = p_outlet_id,
            status = 'GNI'
        WHERE
            card_ref_number = p_single_card;

        UPDATE cms_cust_details
        SET
            outlet_id = p_outlet_id
        WHERE
            cust_seq_id = (
                SELECT
                    cust_seq_id
                FROM
                    card_detail
                WHERE
                    card_ref_number = p_single_card
            );

    ELSE
        SELECT
            card_ref_number
        BULK COLLECT
        INTO v_card_ref
        FROM
            card_detail
        WHERE
            card_ref_number >= p_from_card
            AND card_ref_number <= p_to_card;

        v_count := v_card_ref.count;
        dbms_output.put_line('v_count ' || v_count);
        INSERT INTO cms_mo_card_request (
            id,
            mo_id,
            product_id,
            total_cards_requested,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            remarks,
            issuer_id,
            mo_name,
            mo_batch_id
        ) VALUES (
            mo_card_req_seq.NEXTVAL,--id sequence
            p_mo_id,
            p_product_id,
            v_count,
            'MO INDENTED',
            SYSDATE,
            p_mo_user_id,
            SYSDATE,
            'Requested by Mo',
            p_issuer_id,
            v_mo_name,
            v_mo_batch_id
        );

        UPDATE cms_mo_card_request
        SET
            total_cards_approved = v_count,
            approved_by_ho = p_ho_user_id,
            remarks = 'Approved by HO',
            updated_by = p_ho_user_id,
            updated_date = SYSDATE,
            approved_date = SYSDATE,
            status = 'Approved'
        WHERE
            mo_batch_id = v_mo_batch_id;

        FORALL i IN v_card_ref.first..v_card_ref.last
            UPDATE cms_card_detail_extention
            SET
                mo_indented_by = p_ho_user_id,
                mo_indented_date = SYSDATE,
                mo_id = p_mo_id,
                mo_batch_id = v_mo_batch_id
            WHERE
                card_ref_no = v_card_ref(i);

        UPDATE cms_mo_card_request
        SET
            start_range = p_from_card,
            end_range = p_to_card
        WHERE
            mo_batch_id = v_mo_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
--    OUTLET_ID,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'MO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        SELECT
            'OT'
            || TO_CHAR(SYSDATE,'ddmmyy')
            || lpad(batch_seq_ot.NEXTVAL,4,'0')
        INTO v_ot_batch_id
        FROM
            dual;

        INSERT INTO cms_outlet_card_request (
            id,
            mo_id,
            outlet_id,
            total_cards_assigned,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            updated_by,
            updated_date,
    --DISPATCHED_DATE,
    --DISPATCHED_BY_HO_ID,
    --ACK_DATE,
    --ACK_BY_OUTLET_ID,
            product_id,
            issuer_id,
            outlet_batch_id,
            outlet_name,
--    START_RANGE,
--    END_RANGE,
            is_instant
        ) VALUES (
            co_card_req_seq.NEXTVAL,
            p_mo_id,
            p_outlet_id,
            v_count,
            'CO INDENTED',
            SYSDATE,
            p_mo_user_id,
            SYSDATE,
            p_mo_user_id,
            SYSDATE,
            p_product_id,
            p_issuer_id,
            v_ot_batch_id,
            v_ot_name,
            'Y'
        );

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'CO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        FORALL i IN v_card_ref.first..v_card_ref.last
            UPDATE cms_card_detail_extention
            SET
                outlet_indented_by = p_mo_user_id,
                outlet_indented_date = SYSDATE,
                outlet_id = p_outlet_id,
                outlet_batch_id = v_ot_batch_id,
                outlet_dispatch_date = SYSDATE,
                outlet_dispatch_by = p_ho_user_id
            WHERE
                card_ref_no = v_card_ref(i);

        UPDATE cms_outlet_card_request
        SET
            start_range = p_from_card,
            end_range = p_to_card
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_outlet_card_request
        SET
            dispatched_date = SYSDATE,
            dispatched_by_ho_id = p_ho_user_id,
            status = 'CO DISPATCHED'
        WHERE
            outlet_batch_id = v_ot_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'CO DISPATCHED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        UPDATE cms_outlet_card_request
        SET
            ack_by_outlet_id = 0
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_outlet_card_request
        SET
            status = 'CO ACKNOWLEDGED',
            updated_by = p_outlet_user_id,
            updated_date = SYSDATE,
            ack_date = SYSDATE,
            ack_by_outlet_id = p_outlet_user_id
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_card_detail_extention
        SET
            outlet_acknowledge_date = SYSDATE,
            outlet_acknowledge_by = p_outlet_user_id
        WHERE
            outlet_batch_id = v_ot_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'CO ACKNOWLEDGED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_ho_user_id,
            SYSDATE,
            p_ho_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        FOR i IN v_card_ref.first..v_card_ref.last LOOP
            UPDATE card_detail
            SET
                outlet_id = p_outlet_id
--status='GNI'
            WHERE
                card_ref_number = v_card_ref(i);

            UPDATE cms_cust_details
            SET
                outlet_id = p_outlet_id
            WHERE
                cust_seq_id = (
                    SELECT
                        cust_seq_id
                    FROM
                        card_detail
                    WHERE
                        card_ref_number = v_card_ref(i)
                );

        END LOOP;

    END IF;

    p_out_message :='SUCCESS';

 --   COMMIT;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_assign_mo_outlet_dispatched(p_mo_id character varying, p_outlet_id character varying, p_single_card character varying, p_from_card character varying, p_to_card character varying, p_product_id numeric, p_issuer_id numeric, p_branch_id numeric, p_user_id character varying, p_mo_user character varying, p_outlet_user character varying, OUT p_out_message character varying)
 SECURITY DEFINER
AS $procedure$

    TYPE p_card_ref IS
        TABLE OF VARCHAR2(50);
    v_card_ref      p_card_ref := p_card_ref ();
    v_count         NUMBER;
    v_mo_name       VARCHAR2(50);
    v_ot_name       VARCHAR2(50);
    v_mo_batch_id   VARCHAR2(50);
    v_ot_batch_id   VARCHAR2(50);
BEGIN
    SELECT
        name
    INTO
        v_mo_name
    FROM
        cms_outlet
    WHERE
            outlet_id = p_mo_id
        AND
            parent_id = 0;

    SELECT
        name
    INTO
        v_ot_name
    FROM
        cms_outlet
    WHERE
            outlet_id = p_outlet_id
        AND
            parent_id = p_mo_id;

    SELECT
        'MO'
         || TO_CHAR(SYSDATE,'ddmmyy')
         || lpad(
            batch_seq_ot.NEXTVAL,
            4,
            '0'
        )
    INTO
        v_mo_batch_id
    FROM
        dual;

    IF
        p_single_card IS NOT NULL
    THEN
        INSERT INTO cms_mo_card_request (
            id,
            mo_id,
            product_id,
            total_cards_requested,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            remarks,
            issuer_id,
            mo_name,
            mo_batch_id,
            DISPATCH_BY_HO,
            ACK_BY_MO,
            READY_FOR_DISP_BY,
            SUB_BATCH_CARDS_REQUESTED
        ) VALUES (
            mo_card_req_seq.NEXTVAL,--id sequence
            p_mo_id,
            p_product_id,
            1,
            'MO INDENTED',
            SYSDATE,
            p_mo_user,
            SYSDATE,
            'Requested by Mo',
            p_issuer_id,
            v_mo_name,
            v_mo_batch_id,
            0,
            0,
            0,
            0
        );

        UPDATE cms_mo_card_request
            SET
                total_cards_approved = 1,
                approved_by_ho = p_user_id,
                remarks = 'Approved by HO',
                updated_by = p_user_id,
                updated_date = SYSDATE,
                approved_date = SYSDATE,
                status = 'Approved'
        WHERE
            mo_batch_id = v_mo_batch_id;

        UPDATE cms_card_detail_extention
            SET
                mo_indented_by = p_user_id,
                mo_indented_date = SYSDATE,
                mo_id = p_mo_id,
                mo_batch_id = v_mo_batch_id
        WHERE
            card_ref_no = p_single_card;

        UPDATE cms_mo_card_request
            SET
                start_range = p_single_card,
                end_range = p_single_card
        WHERE
            mo_batch_id = v_mo_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
--    OUTLET_ID,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'MO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_user_id,
            SYSDATE,
            p_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        SELECT
            'OT'
             || TO_CHAR(SYSDATE,'ddmmyy')
             || lpad(
                batch_seq_ot.NEXTVAL,
                4,
                '0'
            )
        INTO
            v_ot_batch_id
        FROM
            dual;

        INSERT INTO cms_outlet_card_request (
            id,
            mo_id,
            outlet_id,
            total_cards_assigned,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            updated_by,
            updated_date,
    --DISPATCHED_DATE,
    --DISPATCHED_BY_HO_ID,
    --ACK_DATE,
    --ACK_BY_OUTLET_ID,
            product_id,
            issuer_id,
            outlet_batch_id,
            outlet_name,
--    START_RANGE,
--    END_RANGE,
            is_instant,
            ACK_BY_OUTLET_ID
        ) VALUES (
            co_card_req_seq.NEXTVAL,
            p_mo_id,
            p_outlet_id,
            1,
            'CO INDENTED',
            SYSDATE,
            p_mo_user,
            SYSDATE,
            p_mo_user,
            SYSDATE,
            p_product_id,
            p_issuer_id,
            v_ot_batch_id,
            v_ot_name,
            'Y',
            0
        );

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_user_id,
            SYSDATE,
            p_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        UPDATE cms_card_detail_extention
            SET
                outlet_indented_by = p_mo_user,
                outlet_indented_date = SYSDATE,
                outlet_id = p_outlet_id,
                outlet_batch_id = v_ot_batch_id
        WHERE
            card_ref_no = p_single_card;

        UPDATE cms_outlet_card_request
            SET
                start_range = p_single_card,
                end_range = p_single_card
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_outlet_card_request
            SET
                dispatched_date = SYSDATE,
                dispatched_by_ho_id = p_user_id,
                status = 'CO DISPATCHED'
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_card_detail_extention
            SET
                outlet_dispatch_date = SYSDATE,
                outlet_dispatch_by = p_user_id
        WHERE
            card_ref_no = p_single_card;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO DISPATCHED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_user_id,
            SYSDATE,
            p_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

--  update CMS_OUTLET_CARD_REQUEST
--set STATUS='CO ACKNOWLEDGED',
--UPDATED_BY = p_outlet_user,
--UPDATED_DATE =sysdate,
--ACK_DATE =sysdate,
--ACK_BY_OUTLET_ID = p_outlet_user
--where OUTLET_BATCH_ID = v_ot_batch_id;
--
--update CMS_CARD_DETAIL_EXTENTION
--set OUTLET_ACKNOWLEDGE_DATE = sysdate,
--    OUTLET_ACKNOWLEDGE_BY = p_outlet_user
--where OUTLET_BATCH_ID = v_ot_batch_id;
--
--INSERT
--INTO INVENTORY_MANAGER
--  (
--    ID,
--    CARD_TYPE,
--    QUANTITY,
--    STATUS,
--    SUBMIT_DATE,
----    DESCRIPTION,
----    REMARKS,
--    BRANCH_ID,
--    ISSUER_ID,
--    MO_ID,
--    OUTLET_ID,
--    CREATED_BY,
--    CREATED_DATE,
--    UPDATED_BY,
--    UPDATED_DATE,
--    INSTATNT_ISSUANCE,
--    PRODUCT_ID
--  )
--  VALUES
--  (
--    INVENTORY_ID_SEQ.nextval,
--    'Chip Dual',
--    1,
--    'CO ACKNOWLEDGED',
--    sysdate,
--    p_branch_id,
--    p_issuer_id,
--    p_mo_id,
--    p_outlet_id,
--    p_user_id,
--    sysdate,
--    p_user_id,
--    sysdate,
--    'N',
--    p_product_id
--  );

        UPDATE card_detail
            SET
                outlet_id = p_outlet_id,
                status = 'GNI'
        WHERE
            card_ref_number = p_single_card;

        UPDATE cms_cust_details
            SET
                outlet_id = p_outlet_id
        WHERE
            cust_seq_id = (
                SELECT
                    cust_seq_id
                FROM
                    card_detail
                WHERE
                    card_ref_number = p_single_card
            );

    ELSE

    --Remove later start
        UPDATE cms_card_detail_extention
            SET
                outlet_acknowledge_date = NULL,
                outlet_acknowledge_by = 0
        WHERE
            card_ref_no BETWEEN p_from_card AND p_to_card;
    --Remove later end

        SELECT
            card_ref_number
        BULK COLLECT INTO
            v_card_ref
        FROM
            card_detail
        WHERE
                card_ref_number >= p_from_card
            AND
                card_ref_number <= p_to_card;

        v_count := v_card_ref.count;
        dbms_output.put_line('v_count ' || v_count);
        INSERT INTO cms_mo_card_request (
            id,
            mo_id,
            product_id,
            total_cards_requested,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            remarks,
            issuer_id,
            mo_name,
            mo_batch_id,
            DISPATCH_BY_HO,
            ACK_BY_MO,
            READY_FOR_DISP_BY,
            SUB_BATCH_CARDS_REQUESTED            
        ) VALUES (
            mo_card_req_seq.NEXTVAL,--id sequence
            p_mo_id,
            p_product_id,
            v_count,
            'MO INDENTED',
            SYSDATE,
            p_mo_user,
            SYSDATE,
            'Requested by Mo',
            p_issuer_id,
            v_mo_name,
            v_mo_batch_id,
            0,
            0,
            0,
            0
        );

        UPDATE cms_mo_card_request
            SET
                total_cards_approved = v_count,
                approved_by_ho = p_user_id,
                remarks = 'Approved by HO',
                updated_by = p_user_id,
                updated_date = SYSDATE,
                approved_date = SYSDATE,
                status = 'Approved'
        WHERE
            mo_batch_id = v_mo_batch_id;

        FORALL i IN v_card_ref.first..v_card_ref.last
            UPDATE cms_card_detail_extention
                SET
                    mo_indented_by = p_user_id,
                    mo_indented_date = SYSDATE,
                    mo_id = p_mo_id,
                    mo_batch_id = v_mo_batch_id
            WHERE
                card_ref_no = v_card_ref(i);

        UPDATE cms_mo_card_request
            SET
                start_range = p_from_card,
                end_range = p_to_card
        WHERE
            mo_batch_id = v_mo_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
--    OUTLET_ID,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'MO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_user_id,
            SYSDATE,
            p_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        SELECT
            'OT'
             || TO_CHAR(SYSDATE,'ddmmyy')
             || lpad(
                batch_seq_ot.NEXTVAL,
                4,
                '0'
            )
        INTO
            v_ot_batch_id
        FROM
            dual;

        INSERT INTO cms_outlet_card_request (
            id,
            mo_id,
            outlet_id,
            total_cards_assigned,
            status,
            request_date,
            created_by_mo_id,
            created_date,
            updated_by,
            updated_date,
    --DISPATCHED_DATE,
    --DISPATCHED_BY_HO_ID,
    --ACK_DATE,
    --ACK_BY_OUTLET_ID,
            product_id,
            issuer_id,
            outlet_batch_id,
            outlet_name,
--    START_RANGE,
--    END_RANGE,
            is_instant,
            ACK_BY_OUTLET_ID
        ) VALUES (
            co_card_req_seq.NEXTVAL,
            p_mo_id,
            p_outlet_id,
            v_count,
            'CO INDENTED',
            SYSDATE,
            p_mo_user,
            SYSDATE,
            p_mo_user,
            SYSDATE,
            p_product_id,
            p_issuer_id,
            v_ot_batch_id,
            v_ot_name,
            'Y',
            0
        );

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'CO INDENTED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_user_id,
            SYSDATE,
            p_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        FORALL i IN v_card_ref.first..v_card_ref.last
            UPDATE cms_card_detail_extention
                SET
                    outlet_indented_by = p_mo_user,
                    outlet_indented_date = SYSDATE,
                    outlet_id = p_outlet_id,
                    outlet_batch_id = v_ot_batch_id,
                    outlet_dispatch_date = SYSDATE,
                    outlet_dispatch_by = p_user_id
            WHERE
                card_ref_no = v_card_ref(i);

        UPDATE cms_outlet_card_request
            SET
                start_range = p_from_card,
                end_range = p_to_card
        WHERE
            outlet_batch_id = v_ot_batch_id;

        UPDATE cms_outlet_card_request
            SET
                dispatched_date = SYSDATE,
                dispatched_by_ho_id = p_user_id,
                status = 'CO DISPATCHED'
        WHERE
            outlet_batch_id = v_ot_batch_id;

        INSERT INTO inventory_manager (
            id,
            card_type,
            quantity,
            status,
            submit_date,
--    DESCRIPTION,
--    REMARKS,
            branch_id,
            issuer_id,
            mo_id,
            outlet_id,
            created_by,
            created_date,
            updated_by,
            updated_date,
            instatnt_issuance,
            product_id
        ) VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            v_count,
            'CO DISPATCHED',
            SYSDATE,
            p_branch_id,
            p_issuer_id,
            p_mo_id,
            p_outlet_id,
            p_user_id,
            SYSDATE,
            p_user_id,
            SYSDATE,
            'N',
            p_product_id
        );

        UPDATE cms_outlet_card_request
            SET
                ack_by_outlet_id = 0
        WHERE
            outlet_batch_id = v_ot_batch_id;


--  update CMS_OUTLET_CARD_REQUEST
--set STATUS='CO ACKNOWLEDGED',
--UPDATED_BY = p_outlet_user,
--UPDATED_DATE =sysdate,
--ACK_DATE =sysdate,
--ACK_BY_OUTLET_ID = p_outlet_user
--where OUTLET_BATCH_ID = v_ot_batch_id;
--
--update CMS_CARD_DETAIL_EXTENTION
--set OUTLET_ACKNOWLEDGE_DATE = sysdate,
--    OUTLET_ACKNOWLEDGE_BY = p_outlet_user
--where OUTLET_BATCH_ID = v_ot_batch_id;
--
--INSERT
--INTO INVENTORY_MANAGER
--  (
--    ID,
--    CARD_TYPE,
--    QUANTITY,
--    STATUS,
--    SUBMIT_DATE,
----    DESCRIPTION,
----    REMARKS,
--    BRANCH_ID,
--    ISSUER_ID,
--    MO_ID,
--    OUTLET_ID,
--    CREATED_BY,
--    CREATED_DATE,
--    UPDATED_BY,
--    UPDATED_DATE,
--    INSTATNT_ISSUANCE,
--    PRODUCT_ID
--  )
--  VALUES
--  (
--    INVENTORY_ID_SEQ.nextval,
--    'Chip Dual',
--    v_count,
--    'CO ACKNOWLEDGED',
--    sysdate,
--    p_branch_id,
--    p_issuer_id,
--    p_mo_id,
--    p_outlet_id,
--    p_user_id,
--    sysdate,
--    p_user_id,
--    sysdate,
--    'N',
--    p_product_id
--  );

        FOR i IN v_card_ref.first..v_card_ref.last LOOP
            UPDATE card_detail
                SET
                    outlet_id = p_outlet_id
--status='GNI'
            WHERE
                card_ref_number = v_card_ref(i);

            UPDATE cms_cust_details
                SET
                    outlet_id = p_outlet_id
            WHERE
                cust_seq_id = (
                    SELECT
                        cust_seq_id
                    FROM
                        card_detail
                    WHERE
                        card_ref_number = v_card_ref(i)
                );

        END LOOP;

    END IF;

    dbms_output.put_line('Success');
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error while running procedure '
         || sqlcode
         || sqlerrm
         || dbms_utility.format_error_backtrace);
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_cs_processlogmaster(p_process_id character varying, p_main_activity_name character varying, p_activity_log character varying, p_start_date_time character varying, p_end_date_time character varying, p_complete_status character varying, p_user_id character varying, p_main_activity_id character varying, p_file_name character varying)
 SECURITY DEFINER
AS $procedure$
pragma autonomous_transaction;
    BEGIN
        INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            p_process_id,
            p_main_activity_name,
            p_activity_log,
            p_start_date_time,
            p_end_date_time,
            p_complete_status,
            p_user_id,
            p_main_activity_id,
            p_file_name
        );
       
       commit;

    END p_cs_processlogmaster$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_prd_instrument_details(p_instrument_profile_id numeric, p_name character varying, p_created_by numeric, p_updated_by numeric, p_created_by_name character varying)
 SECURITY DEFINER
AS $procedure$
  v_count NUMBER := 0;
BEGIN
  SELECT COUNT(INSTRUMENT_PROFILE_ID)
  INTO v_count
  FROM PRD_INSTRUMENT_DETAILS
  WHERE INSTRUMENT_PROFILE_ID= 0
  AND name                   = p_NAME;
  IF v_count                 > 0 THEN
    UPDATE PRD_INSTRUMENT_DETAILS
    SET INSTRUMENT_PROFILE_ID   = p_INSTRUMENT_PROFILE_ID
    WHERE INSTRUMENT_PROFILE_ID = 0
    AND name                    = p_NAME;
  ELSE
    INSERT
    INTO PRD_INSTRUMENT_DETAILS
      (
        --ID,
        --NAME,
        --CARD_TYPE,
        --INTERFACE,
        --SUPPORTED_FORMATS,
        --EMBOSSA_LINE_2,
        --CARD_LOAD_ALLOWED,
        --EXPIRY,
        --PERSO_FILE_SUPPORT,
        --SUPPLEMENTARY_ALLOWED,
        --IMAGE_PRINTING,
        --PIN_GENERATION,
        --ACTIVATION,
        --PRELOAD_AMT,
        --CVV_GENERATE,
        --PIN_ATTEMPT,
        --PRODUCT_ID,
        --ISSUER_ID,
        --CREATED_DATE,
        --UPDATED_DATE,
        --CREATED_BY,
        --UPDATED_BY,SOFT_DELETE
        ACTIVATION,
        CARD_LOAD_ALLOWED,
        CARD_TYPE,
        CHANNEL_PROFILE,
        CREATED_BY,
        CREATED_DATE,
        EMBOSSA_LINE_4,
        EXPIRY,
        ID,
        IMAGE_PRINTING,
        INTERFACE,
        ISSUER_ID,
        NAME,
        PIN_ATTEMPT,
        PIN_GENERATION,
        INSTRUMENT_PROFILE_ID,
        SOFT_DELETE,
        EMBOSSING_MODE,
        UPDATED_BY,
        UPDATED_DATE,
        INSTRUMENT_ID,
        MAX_BALANCE_MIN_KYC,
        MAX_BALANCE_MAX_KYC,
        EMBOSSA_LINE_2,
        SUPPORTED_FORMATS,
        CREATED_BY_NAME,
        UPDATED_BY_NAME
--        MONTHLY_TOPUP_LIMIT_MAX_KYC,
--        MONTHLY_TOPUP_LIMIT_MIN_KYC,
--        MONTHLY_TXN_COUNT_MAX_KYC,
--        MONTHLY_TXN_COUNT_MIN_KYC,
--        YEARLY_TOPUP_LIMIT_MAX_KYC,
--        YEARLY_TOPUP_LIMIT_MIN_KYC,
--        YEARLY_TXN_COUNT_MAX_KYC,
--        YEARLY_TXN_COUNT_MIN_KYC
      )
    SELECT
      --p_NAME,
      --CARD_TYPE,
      --INTERFACE,
      --SUPPORTED_FORMATS,
      --EMBOSSA_LINE_2,
      --CARD_LOAD_ALLOWED,
      --EXPIRY,
      --PERSO_FILE_SUPPORT,
      --SUPPLEMENTARY_ALLOWED,
      --IMAGE_PRINTING,
      --PIN_GENERATION,
      --ACTIVATION,
      --PRELOAD_AMT,
      --CVV_GENERATE,
      --PIN_ATTEMPT,
      --p_product_id,
      --ISSUER_ID,
      --CREATED_DATE,
      --UPDATED_DATE,
      --p_CREATED_BY,
      --p_UPDATED_BY,'A'
      ACTIVATION,
      CARD_LOAD_ALLOWED,
      CARD_TYPE,
      CHANNEL_PROFILE,
      p_CREATED_BY,
      CREATED_DATE,
      EMBOSSA_LINE_4,
      EXPIRY,
      CARD_PROFILE_ID_SEQ.nextval,
      IMAGE_PRINTING,
      INTERFACE,
      ISSUER_ID,
      p_NAME,
      PIN_ATTEMPT,
      PIN_GENERATION,
      p_INSTRUMENT_PROFILE_ID,
      'A',
      EMBOSSING_MODE,
      p_UPDATED_BY,
      UPDATED_DATE,
      INSTRUMENT_ID,
      MAX_BALANCE_MIN_KYC,
      MAX_BALANCE_MAX_KYC,
      EMBOSSA_LINE_2,
      SUPPORTED_FORMATS,
      p_CREATED_BY_NAME,
      p_CREATED_BY_NAME
--      MONTHLY_TOPUP_LIMIT_MAX_KYC,
--      MONTHLY_TOPUP_LIMIT_MIN_KYC,
--      MONTHLY_TXN_COUNT_MAX_KYC,
--      MONTHLY_TXN_COUNT_MIN_KYC,
--      YEARLY_TOPUP_LIMIT_MAX_KYC,
--      YEARLY_TOPUP_LIMIT_MIN_KYC,
--      YEARLY_TXN_COUNT_MAX_KYC,
--      YEARLY_TXN_COUNT_MIN_KYC
    FROM PRD_INSTRUMENT_DETAILS
    WHERE name = p_NAME
    AND rownum =1;
  END IF;
END P_PRD_INSTRUMENT_DETAILS$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_update_co_quantity(p_outlet_id character varying, p_user_id numeric, p_product_id numeric, p_issuer_id numeric, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
    v_count_status   NUMBER;
    v_mo_id          VARCHAR2(50);
    pragma autonomous_transaction;
begin
	insert into process_log values('update_co_quantity','p_update_co_quantity','proc','p_update_co_quantity-start',sysdate);
    SELECT
        COUNT(*)
    INTO
        v_count_status
    FROM
        inventory_manager
    where	
            outlet_id = p_outlet_id
        AND
            status = 'CO ISSUED';

    IF
        v_count_status > 0
    THEN
        UPDATE inventory_manager
            SET
                quantity = quantity + 1,
                updated_by = p_user_id,
                updated_date = SYSDATE
        WHERE
                status = 'CO ISSUED'
            AND
                outlet_id = p_outlet_id;

    ELSE
        SELECT
            parent_id
        INTO
            v_mo_id
        FROM
            cms_outlet
        WHERE
            outlet_id = p_outlet_id;

        INSERT INTO inventory_manager VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO ISSUED',
            SYSDATE,
            NULL,
            NULL,
            0,
            p_issuer_id,
            v_mo_id,
            p_outlet_id,
            p_user_id,
            SYSDATE,
            0,
            NULL,
            'N',
            p_product_id,
            NULL,
            NULL,
            NULL,
            NULL
        );

    END IF;
 

    COMMIT;
   p_msg := 'success';
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_update_co_quantity(p_outlet_id character varying, p_user_id bigint, p_product_id bigint, p_issuer_id bigint, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
    v_count_status   NUMBER;
    v_mo_id          VARCHAR2(50);
    pragma autonomous_transaction;
begin
	insert into process_log values('update_co_quantity','p_update_co_quantity','proc','p_update_co_quantity-start',sysdate);
    SELECT
        COUNT(*)
    INTO
        v_count_status
    FROM
        inventory_manager
    where	
            outlet_id = p_outlet_id
        AND
            status = 'CO ISSUED';

    IF
        v_count_status > 0
    THEN
        UPDATE inventory_manager
            SET
                quantity = quantity + 1,
                updated_by = p_user_id,
                updated_date = SYSDATE
        WHERE
                status = 'CO ISSUED'
            AND
                outlet_id = p_outlet_id;

    ELSE
        SELECT
            parent_id
        INTO
            v_mo_id
        FROM
            cms_outlet
        WHERE
            outlet_id = p_outlet_id;

        INSERT INTO inventory_manager VALUES (
            inventory_id_seq.NEXTVAL,
            'Chip Dual',
            1,
            'CO ISSUED',
            SYSDATE,
            NULL,
            NULL,
            0,
            p_issuer_id,
            v_mo_id,
            p_outlet_id,
            p_user_id,
            SYSDATE,
            0,
            NULL,
            'N',
            p_product_id,
            NULL,
            NULL,
            NULL,
            NULL
        );

    END IF;
 

    COMMIT;
   p_msg := 'success';
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_update_mo_ack(p_mo_batch_id character varying, p_mo_ack_by numeric, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
pragma autonomous_transaction;
BEGIN
    UPDATE cms_card_detail_extention
    SET
        mo_indented_date = sysdate,
        mo_indented_by = p_mo_ack_by
    WHERE
        mo_batch_id = p_mo_batch_id;

    p_out := 'SUCCESS';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
  --      ROLLBACK;
        p_out := 'FAILURE';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_update_mo_details(p_bin numeric, p_product_id numeric, p_mo_indented_by numeric, p_number numeric, p_mo_id character varying, p_mo_batch_id character varying, OUT p_out_message character varying)
 SECURITY DEFINER
AS $procedure$
type p_card_ref is table of varchar2(50); -- collection type
v_card_ref p_card_ref := p_card_ref(); -- collection variable
v_start varchar2(50);
v_end varchar2(50);
v_issuer_id number;
v_mo_id_cnt integer;
v_card_movement_type cms_issuer_config.card_movement_type%type;
pragma autonomous_transaction;
begin
execute immediate 'select issuer_id  from cms_outlet where  outlet_id =:p_mo_id and parent_id =0'
into v_issuer_id using p_mo_id;
execute immediate 'select card_movement_type from cms_issuer_config where issuer_id =:v_issuer_id' into v_card_movement_type
using v_issuer_id;
dbms_output.put_line('v_card_movement_type '|| v_card_movement_type);  
      IF v_card_movement_type='Virtual' THEN 
--      select card_ref_number bulk collect into v_card_ref
--      FROM
--          (select cd.card_ref_number
--          from card_detail cd, CMS_CARD_DETAIL_EXTENTION cde
--          where cd.bin= p_bin
--          and cd.product_id = p_product_id
--          and cd.BATCH_NO like 'BI%'
--          and cd.card_ref_number = cde.card_ref_no
--          and cde.MO_INDENTED_DATE is null
--          and nvl(cde.MO_INDENTED_BY,0)=0
--          and cde.mo_id is null
--          and cde.HO_INDENTED_DATE is not null
--          and cde.HO_INDENTED_BY is not null
--          order by cd.card_ref_number)
--      WHERE rownum <= p_number;
--assign only enbossing not generated card
 select card_ref_number bulk collect into v_card_ref
      FROM
          ( select cd.card_ref_number
          from card_detail cd JOIN CMS_CARD_DETAIL_EXTENTION cde on cd.card_ref_number=cde.card_ref_no
          JOIN cms_cust_details ccd on cd.cust_seq_id=ccd.cust_seq_id
          where cd.bin= p_bin
          and cd.product_id = p_product_id
          and cd.BATCH_NO like 'BU%'
          and ccd.batch_no = p_mo_batch_id
          and cd.card_ref_number = cde.card_ref_no
          and cde.MO_INDENTED_DATE is null
          and nvl(cde.MO_INDENTED_BY,0)=0
          and cde.mo_id is null
          and cde.HO_INDENTED_DATE is not null
          and cde.HO_INDENTED_BY is not null
--          and ccd.embossing_file_gen_by = 0
--          and ccd.embossing_file_name is null
--          and ccd.embossing_file_gen_date is null
          order by cd.card_ref_number)
      WHERE rownum <= p_number;
       v_start :=trim(v_card_ref(1));
      v_end :=trim(v_card_ref(cast(p_number as integer)));
      dbms_output.put_line('start-'||v_start);
      dbms_output.put_line('end-'||v_end);
      forall i in v_card_ref.first .. v_card_ref.last
      update CMS_CARD_DETAIL_EXTENTION
      set MO_INDENTED_BY = p_mo_indented_by,
          MO_INDENTED_DATE = sysdate,
          MO_ID = p_mo_id,
          MO_BATCH_ID = p_mo_batch_id
      where card_ref_no = v_card_ref(i);
      update CMS_MO_CARD_REQUEST
      set START_RANGE = v_start,
          END_RANGE = v_end
      where MO_BATCH_ID = p_mo_batch_id;
      commit;
      p_out_message:= 'SUCCESS';

      ELSIF v_card_movement_type='Physical' THEN
       select card_ref_number bulk collect into v_card_ref
      FROM
          (select cd.card_ref_number
          from card_detail cd JOIN CMS_CARD_DETAIL_EXTENTION cde on cd.card_ref_number=cde.card_ref_no
          JOIN cms_cust_details ccd on cd.cust_seq_id=ccd.cust_seq_id
          where cd.bin= p_bin
          and cd.product_id = p_product_id
          and cd.BATCH_NO like 'BU%'
          and ccd.batch_no = p_mo_batch_id
          and cde.MO_INDENTED_DATE is null
          and nvl(cde.MO_INDENTED_BY,0)=0
          and nvl(cde.ready_for_disp_by,0)=0
          and cde.mo_id is null
          and cde.HO_INDENTED_DATE is not null
          and cde.HO_INDENTED_BY is not null
--          and ccd.embossing_file_gen_by <> 0
--          and ccd.embossing_file_name is not null
--          and ccd.embossing_file_gen_date is not null
          order by cd.card_ref_number)
      WHERE rownum <= p_number;
      v_start :=trim(v_card_ref(1));
      v_end :=trim(v_card_ref(cast(p_number as integer)));
      dbms_output.put_line('start-'||v_start);
      dbms_output.put_line('end-'||v_end);
      forall i in v_card_ref.first .. v_card_ref.last
      update CMS_CARD_DETAIL_EXTENTION
      set ready_for_disp_by = p_mo_indented_by,
          ready_for_disp_date = sysdate,
          MO_ID = p_mo_id,
          MO_BATCH_ID = p_mo_batch_id
      where card_ref_no = v_card_ref(i);
      update CMS_MO_CARD_REQUEST
      set START_RANGE = v_start,
          END_RANGE = v_end
      where MO_BATCH_ID = p_mo_batch_id;
      commit;
      p_out_message:= 'SUCCESS';

      END IF;

exception
when others
then
-- rollback;
insert into processlog values ('p_update_mo_details','p_update_mo_details','proc','Error in file upload'||sqlcode ||sqlerrm,now());
p_out_message:= 'FAILURE';
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_update_mo_dispatch_details(p_batch_id character varying, OUT p_success_cnt numeric, OUT p_partial_cnt numeric, OUT p_rejected_cnt numeric, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$

    v_status              VARCHAR2(3);
    v_card_req            NUMBER;
    v_card_apprv          NUMBER;
    v_cnt                 NUMBER;
    v_rejected_cnt        NUMBER := 0;
    v_rej_cnt             NUMBER := 0;
    total_rejected_cnt    NUMBER := 0;
    v_success_cnt         NUMBER := 0;
    total_success_cnt     NUMBER := 0;
    v_partial_cnt         NUMBER := 0;
    total_partial_cnt     NUMBER := 0;
    v_temp_mo_batch_cnt   NUMBER := 0;
    v_cms_mo_batch_cnt    NUMBER := 0;
    v_mo_batch_id_cnt     NUMBER := 0;
    v_procedure_name      VARCHAR2(30) := 'P_UPDATE_MO_DISPATCH_DETAILS';
    v_object_type         VARCHAR2(30) := 'PROCEDURE';
    v_err_msg             VARCHAR2(3000);
    TYPE p_card_ref IS
        TABLE OF VARCHAR2(50);
    v_card_ref            p_card_ref := p_card_ref();
BEGIN
    proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, v_procedure_name || ' STARTED...!!', systimestamp);
    proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, v_procedure_name
                                                                    || ' P_BATCH_ID '
                                                                    || p_batch_id, systimestamp);

    SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        temp_mo_dispatch_details
    WHERE
        batch_id = p_batch_id
        AND process_flag IS NULL;

    proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, v_procedure_name
                                                                    || ' v_cnt '
                                                                    || v_cnt, systimestamp);

    IF v_cnt = 0 THEN
        p_out := 'Invalid Batch ID';
        p_success_cnt := 0;
        p_partial_cnt := 0;
        p_rejected_cnt := 0;
        proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, v_procedure_name
                                                                        || ' Invalid Batch ID '
                                                                        || p_batch_id, systimestamp);

        return;
    END IF;

    FOR cur_rec IN (
        SELECT
            id,
            mo_id,
            start_range,
            end_range,
            issuer_id,
            file_uploaded_on,
            file_uploaded_by,
            batch_id,
            awb_number,
            dispatch_date,
            process_flag,
            file_name,
            record_no,
            process_status,
            mo_batch_id,
            mo_name,
            mo_address,
            courier_vendor_name,
            "comment"
        FROM
            temp_mo_dispatch_details
        WHERE
            batch_id = p_batch_id
            AND process_flag IS NULL
    ) LOOP
        dbms_output.put_line('inside loop batch_id ' || p_batch_id);
        SELECT
            COUNT(1)
        INTO v_mo_batch_id_cnt
        FROM
            cms_mo_card_request
        WHERE
            mo_batch_id = cur_rec.mo_batch_id;

        IF v_mo_batch_id_cnt = 0 THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_id = cur_rec.mo_id
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Invalid MO Batch ID',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Invalid MO Batch ID ' || cur_rec.mo_batch_id, systimestamp
                );
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Invalid MO Batch ID'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Invalid MO Batch ID' || cur_rec.mo_batch_id
                , systimestamp);
            END IF;

        END IF;

        IF to_date(cur_rec.dispatch_date, 'DDMMYYYY') > sysdate THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_id = cur_rec.mo_id
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Dispatch Date should not be future date',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Dispatch Date should not be future date' || cur_rec
                .dispatch_date, systimestamp);
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Dispatch Date should not be future date'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Dispatch Date should not be future date'
                || cur_rec.dispatch_date, systimestamp);
            END IF;

        END IF;

        IF cur_rec.dispatch_date IS NULL OR cur_rec.dispatch_date = '' THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND mo_id = cur_rec.mo_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Dispatch Date is not in proper format',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Dispatch Date is not in proper format' || cur_rec
                .dispatch_date, systimestamp);
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Dispatch Date is not in proper format'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Dispatch Date is not in proper format' |
                | cur_rec.dispatch_date, systimestamp);
            END IF;

        END IF;

        SELECT
            decode(COUNT(1), 0, 'NO', 'YES')
        INTO v_status
        FROM
            cms_mo_card_request
        WHERE
            mo_id = cur_rec.mo_id
            AND issuer_id = cur_rec.issuer_id
            AND start_range = cur_rec.start_range
            AND end_range = cur_rec.end_range
            AND mo_batch_id = cur_rec.mo_batch_id;

        IF v_status = 'NO' THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND mo_id = cur_rec.mo_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Invalid Start Range End Range',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Invalid Start Range End Range'
                                                                                || cur_rec.start_range
                                                                                || ' End Range '
                                                                                || cur_rec.end_range, systimestamp);

            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Invalid Start Range End Range'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Invalid Start Range End Range'
                                                                                || cur_rec.start_range
                                                                                || ' End Range '
                                                                                || cur_rec.end_range, systimestamp);

            END IF;

        END IF;

        SELECT
            decode(COUNT(1), 0, 'NO', 'YES')
        INTO v_status
        FROM
            temp_mo_dispatch_details a
        WHERE
            EXISTS (
                SELECT
                    1
                FROM
                    cms_outlet b
                WHERE
                    b.parent_id = 0
                    AND b.outlet_id = cur_rec.mo_id
                    AND b.issuer_id = cur_rec.issuer_id
            )
            AND batch_id = cur_rec.batch_id
            AND mo_id = cur_rec.mo_id
            AND issuer_id = cur_rec.issuer_id
            AND start_range = cur_rec.start_range
            AND end_range = cur_rec.end_range
            AND mo_batch_id = cur_rec.mo_batch_id;

        dbms_output.put_line('v_status ' || v_status);
        IF v_status = 'NO' THEN
            dbms_output.put_line('not exists moid in cms_outlet ' || p_batch_id);
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND mo_id = cur_rec.mo_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Invalid Mo Id',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Invalid Mo Id ' || cur_rec.mo_id, systimestamp)
                ;
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Invalid Mo Id'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Invalid Mo Id ' || cur_rec.mo_id, systimestamp
                );
            END IF;

        END IF;

        SELECT
            decode(COUNT(1), 0, 'NO', 'YES')
        INTO v_status
        FROM
            cms_mo_card_request
        WHERE
            mo_id = cur_rec.mo_id
            AND issuer_id = cur_rec.issuer_id
            AND start_range = cur_rec.start_range
            AND end_range = cur_rec.end_range
            AND mo_ack_date IS NOT NULL
            AND mo_batch_id = cur_rec.mo_batch_id;

        IF v_status = 'YES' THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND mo_id = cur_rec.mo_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Card are Already acknowledged',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Card are Already acknowledged ', systimestamp);
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Card are Already acknowledged'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Card are Already acknowledged ', systimestamp
                );
            END IF;

        END IF;

        SELECT
            decode(COUNT(1), 0, 'NO', 'YES')
        INTO v_status
        FROM
            cms_mo_card_request
        WHERE
            mo_id = cur_rec.mo_id
            AND issuer_id = cur_rec.issuer_id
            AND start_range = cur_rec.start_range
            AND end_range = cur_rec.end_range
            AND mo_dispatch_date IS NOT NULL
            AND mo_batch_id = cur_rec.mo_batch_id;

        IF v_status = 'YES' THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND mo_id = cur_rec.mo_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'Card are Already Dispatched for given Range and Mo',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_Rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Card are Already Dispatched for given Range and Mo '
                , systimestamp);
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'Card are Already Dispatched for given Range and Mo'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Append Card are Already Dispatched for given Range and Mo '
                , systimestamp);
            END IF;

        END IF;

        SELECT
            COUNT(1)
        INTO v_temp_mo_batch_cnt
        FROM
            temp_mo_dispatch_details
        WHERE
            mo_batch_id = cur_rec.mo_batch_id
            AND batch_id = cur_rec.batch_id
            AND mo_id = cur_rec.mo_id
            AND issuer_id = cur_rec.issuer_id;

        SELECT
            COUNT(1)
        INTO v_cms_mo_batch_cnt
        FROM
            cms_mo_card_request
        WHERE
            mo_batch_id = cur_rec.mo_batch_id
            AND mo_id = cur_rec.mo_id
            AND issuer_id = cur_rec.issuer_id;

        IF v_temp_mo_batch_cnt != v_cms_mo_batch_cnt THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = cur_rec.batch_id
                AND issuer_id = cur_rec.issuer_id
                AND mo_id = cur_rec.mo_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    cur_rec.issuer_id,
                    cur_rec.mo_id,
                    'All Card Ranges should be present in the file',
                    cur_rec.start_range,
                    cur_rec.end_range,
                    cur_rec.file_uploaded_by,
                    cur_rec.file_uploaded_on,
                    cur_rec.batch_id,
                    cur_rec.awb_number,
                    cur_rec.dispatch_date,
                    cur_rec.record_no,
                    cur_rec.file_name,
                    'FAILED',
                    cur_rec.mo_batch_id,
                    cur_rec.mo_name,
                    cur_rec.mo_address,
                    cur_rec.courier_vendor_name,
                    cur_rec."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'All Card Ranges should be present in the file '
                , systimestamp);
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'All Card Ranges should be present in the file'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND issuer_id = cur_rec.issuer_id
                    AND mo_id = cur_rec.mo_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'All Card Ranges should be present in the file '
                , systimestamp);
            END IF;

        END IF;

        IF v_temp_mo_batch_cnt > 1 THEN
            SELECT
                decode(COUNT(1), 0, 'NO', 'YES')
            INTO v_status
            FROM
                cms_mo_card_request
            WHERE
                mo_id = cur_rec.mo_id
                AND issuer_id = cur_rec.issuer_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_dispatch_date IS NULL
                AND ready_for_disp_date IS NOT NULL
                AND mo_batch_id = cur_rec.mo_batch_id
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        cms_mo_dispatch_details b
                    WHERE
                        b.mo_id = cur_rec.mo_id
                        AND b.issuer_id = cur_rec.issuer_id
                        AND b.start_range = cur_rec.start_range
                        AND b.end_range = cur_rec.end_range
                        AND b.batch_id = cur_rec.batch_id
                        AND mo_batch_id = cur_rec.mo_batch_id
                        AND process_status = 'FAILED'
                );

            IF v_status = 'YES' THEN
                UPDATE temp_mo_dispatch_details
                SET
                    mo_batch_split_success_flag = 'Y'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_id = cur_rec.mo_id
                    AND issuer_id = cur_rec.issuer_id;

            ELSE
                UPDATE temp_mo_dispatch_details
                SET
                    mo_batch_split_success_flag = 'N'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_id = cur_rec.mo_id
                    AND issuer_id = cur_rec.issuer_id;

            END IF;

        ELSE
            SELECT
                decode(COUNT(1), 0, 'NO', 'YES')
            INTO v_status
            FROM
                cms_mo_card_request
            WHERE
                mo_id = cur_rec.mo_id
                AND issuer_id = cur_rec.issuer_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_dispatch_date IS NULL
                AND ready_for_disp_date IS NOT NULL
                AND mo_batch_id = cur_rec.mo_batch_id
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        cms_mo_dispatch_details b
                    WHERE
                        b.mo_id = cur_rec.mo_id
                        AND b.issuer_id = cur_rec.issuer_id
                        AND b.start_range = cur_rec.start_range
                        AND b.end_range = cur_rec.end_range
                        AND b.batch_id = cur_rec.batch_id
                        AND mo_batch_id = cur_rec.mo_batch_id
                        AND process_status = 'FAILED'
                );

            IF v_status = 'YES' THEN
                UPDATE temp_mo_dispatch_details
                SET
                    mo_batch_split_success_flag = 'Y'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_id = cur_rec.mo_id
                    AND issuer_id = cur_rec.issuer_id;

            ELSE
                UPDATE temp_mo_dispatch_details
                SET
                    mo_batch_split_success_flag = 'N'
                WHERE
                    batch_id = cur_rec.batch_id
                    AND mo_batch_id = cur_rec.mo_batch_id
                    AND start_range = cur_rec.start_range
                    AND end_range = cur_rec.end_range
                    AND mo_id = cur_rec.mo_id
                    AND issuer_id = cur_rec.issuer_id;

            END IF;

            UPDATE temp_mo_dispatch_details
            SET
                process_flag = 'Y'
            WHERE
                batch_id = cur_rec.batch_id
                AND mo_id = cur_rec.mo_id
                AND issuer_id = cur_rec.issuer_id
                AND start_range = cur_rec.start_range
                AND end_range = cur_rec.end_range
                AND mo_batch_id = cur_rec.mo_batch_id;

        END IF;

        SELECT
            COUNT(1)
        INTO v_rejected_cnt
        FROM
            cms_mo_dispatch_details
        WHERE
            issuer_id = cur_rec.issuer_id
            AND mo_id = cur_rec.mo_id
            AND start_range = cur_rec.start_range
            AND end_range = cur_rec.end_range
            AND batch_id = cur_rec.batch_id
            AND mo_batch_id = cur_rec.mo_batch_id;

        dbms_output.put_line('v_rejected_cnt loop: ' || v_rejected_cnt);
        proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'rejected cnt ' || v_rejected_cnt, systimestamp);
        total_rejected_cnt := total_rejected_cnt + v_rejected_cnt;
        dbms_output.put_line('p_rejected_cnt loop: ' || p_rejected_cnt);
    END LOOP;

    --Update for those whose mo_batch_split_success_flag is 'Y', check above code.

    FOR i IN (
        SELECT
            id,
            mo_id,
            start_range,
            end_range,
            issuer_id,
            file_uploaded_on,
            file_uploaded_by,
            batch_id,
            awb_number,
            dispatch_date,
            process_flag,
            file_name,
            record_no,
            process_status,
            mo_batch_id,
            mo_name,
            mo_address,
            courier_vendor_name,
            "comment"
        FROM
            temp_mo_dispatch_details
        WHERE
            batch_id = p_batch_id
            AND mo_batch_split_success_flag = 'Y'
    ) LOOP
        SELECT
            COUNT(1)
        INTO v_temp_mo_batch_cnt
        FROM
            temp_mo_dispatch_details
        WHERE
            mo_batch_id = i.mo_batch_id
            AND batch_id = i.batch_id
            AND mo_id = i.mo_id
            AND issuer_id = i.issuer_id
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    cms_mo_dispatch_details b
                WHERE
                    b.mo_id = i.mo_id
                    AND b.issuer_id = i.issuer_id
                    AND b.batch_id = i.batch_id
                    AND mo_batch_id = i.mo_batch_id
                    AND process_status = 'FAILED'
            );

        SELECT
            COUNT(1)
        INTO v_cms_mo_batch_cnt
        FROM
            cms_mo_card_request
        WHERE
            mo_batch_id = i.mo_batch_id
            AND mo_id = i.mo_id
            AND issuer_id = i.issuer_id;

        IF v_temp_mo_batch_cnt != v_cms_mo_batch_cnt THEN
            SELECT
                COUNT(1)
            INTO v_cnt
            FROM
                cms_mo_dispatch_details
            WHERE
                batch_id = i.batch_id
                AND issuer_id = i.issuer_id
                AND mo_id = i.mo_id
                AND start_range = i.start_range
                AND end_range = i.end_range
                AND mo_batch_id = i.mo_batch_id
                AND process_status = 'FAILED';

            IF v_cnt = 0 THEN
                INSERT INTO cms_mo_dispatch_details (
                    id,
                    issuer_id,
                    mo_id,
                    reason,
                    start_range,
                    end_range,
                    file_uploaded_by,
                    file_uploaded_on,
                    batch_id,
                    awb_number,
                    dispatch_date,
                    record_no,
                    file_name,
                    process_status,
                    mo_batch_id,
                    mo_name,
                    mo_address,
                    courier_vendor_name,
                    "comment"
                ) VALUES (
                    rej_dispatch_seq.NEXTVAL,
                    i.issuer_id,
                    i.mo_id,
                    'All Card Ranges should be successful in the file',
                    i.start_range,
                    i.end_range,
                    i.file_uploaded_by,
                    i.file_uploaded_on,
                    i.batch_id,
                    i.awb_number,
                    i.dispatch_date,
                    i.record_no,
                    i.file_name,
                    'FAILED',
                    i.mo_batch_id,
                    i.mo_name,
                    i.mo_address,
                    i.courier_vendor_name,
                    i."comment"
                );

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'All Card Ranges should be successful in the file '
                , systimestamp);
            ELSE
                UPDATE cms_mo_dispatch_details
                SET
                    reason = reason
                             || ','
                             || 'All Card Ranges should be successful in the file'
                WHERE
                    batch_id = i.batch_id
                    AND issuer_id = i.issuer_id
                    AND mo_id = i.mo_id
                    AND start_range = i.start_range
                    AND end_range = i.end_range
                    AND mo_batch_id = i.mo_batch_id
                    AND process_status = 'FAILED';

                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'All Card Ranges should be successful in the file '
                , systimestamp);
            END IF;

        ELSE
                --Success
            SELECT
                total_cards_requested,
                total_cards_approved
            INTO
                v_card_req,
                v_card_apprv
            FROM
                cms_mo_card_request
            WHERE
                mo_id = i.mo_id
                AND issuer_id = i.issuer_id
                AND start_range = i.start_range
                AND end_range = i.end_range
                AND mo_dispatch_date IS NULL
                AND ready_for_disp_date IS NOT NULL
                AND mo_batch_id = i.mo_batch_id;

            proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Requested card '
                                                                            || v_card_req
                                                                            || ' approved cards '
                                                                            || v_card_apprv, systimestamp);

            SELECT
                card_ref_number
            BULK COLLECT
            INTO v_card_ref
            FROM
                card_detail                 cd
                JOIN cms_card_detail_extention   cde ON ( cd.card_ref_number = cde.card_ref_no )
            WHERE
                cd.issuer_id = i.issuer_id
                AND cde.card_ref_no BETWEEN i.start_range AND i.end_range
                AND cde.mo_id = i.mo_id;

            IF v_card_apprv < v_card_req THEN
                UPDATE cms_mo_card_request
                SET
                    status = 'Partially Dispatch to Mo',
                    mo_dispatch_date = i.file_uploaded_on,
                    dispatch_by_ho = i.file_uploaded_by
                WHERE
                    mo_id = i.mo_id
                    AND issuer_id = i.issuer_id
                    AND start_range = i.start_range
                    AND end_range = i.end_range
                    AND mo_dispatch_date IS NULL
                    AND ready_for_disp_date IS NOT NULL
                    AND mo_batch_id = i.mo_batch_id;

                v_success_cnt := SQL%rowcount;
                dbms_output.put_line('v_partial_cnt' || v_success_cnt);
                total_success_cnt := total_success_cnt + v_success_cnt;
                dbms_output.put_line('p_success_cnt: loop' || p_success_cnt);
                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Partially Dispatch to Mo partial cnt' || v_partial_cnt
                , systimestamp);
                FORALL j IN v_card_ref.first..v_card_ref.last
                    UPDATE cms_card_detail_extention
                    SET
                        mo_disp_by = i.file_uploaded_by,
                        mo_disp_date = i.file_uploaded_on
                    WHERE
                        card_ref_no = v_card_ref(j);

            ELSIF v_card_apprv = v_card_req THEN
                UPDATE cms_mo_card_request
                SET
                    status = 'Dispatch to Mo',
                    mo_dispatch_date = i.file_uploaded_on,
                    dispatch_by_ho = i.file_uploaded_by
                WHERE
                    mo_id = i.mo_id
                    AND issuer_id = i.issuer_id
                    AND start_range = i.start_range
                    AND end_range = i.end_range
                    AND mo_dispatch_date IS NULL
                    AND ready_for_disp_date IS NOT NULL
                    AND mo_batch_id = i.mo_batch_id;

                v_success_cnt := SQL%rowcount;
                dbms_output.put_line('v_success_cnt' || v_success_cnt);
                total_success_cnt := total_success_cnt + v_success_cnt;
                dbms_output.put_line('p_success_cnt: loop' || p_success_cnt);
                total_partial_cnt := total_partial_cnt + v_partial_cnt;
                dbms_output.put_line('p_partial_cnt loop: ' || p_partial_cnt);
                proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'Dispatch to Mo succcess cnt ' || v_success_cnt, systimestamp
                );
                FORALL k IN v_card_ref.first..v_card_ref.last
                    UPDATE cms_card_detail_extention
                    SET
                        mo_disp_by = i.file_uploaded_by,
                        mo_disp_date = i.file_uploaded_on
                    WHERE
                        card_ref_no = v_card_ref(k);

            END IF;

            INSERT INTO cms_mo_dispatch_details (
                id,
                issuer_id,
                mo_id,
                reason,
                start_range,
                end_range,
                file_uploaded_by,
                file_uploaded_on,
                batch_id,
                awb_number,
                dispatch_date,
                record_no,
                file_name,
                process_status,
                mo_batch_id,
                mo_name,
                mo_address,
                courier_vendor_name,
                "comment"
            ) VALUES (
                rej_dispatch_seq.NEXTVAL,
                i.issuer_id,
                i.mo_id,
                'Successfully Inserted',
                i.start_range,
                i.end_range,
                i.file_uploaded_by,
                i.file_uploaded_on,
                i.batch_id,
                i.awb_number,
                i.dispatch_date,
                i.record_no,
                i.file_name,
                'SUCCESS',
                i.mo_batch_id,
                i.mo_name,
                i.mo_address,
                i.courier_vendor_name,
                i."comment"
            );

        END IF;

    END LOOP;

--    p_rejected_cnt := v_rejected_cnt;

    p_rejected_cnt := total_rejected_cnt + v_rej_cnt;
    dbms_output.put_line('p_rejected_cnt final ' || p_rejected_cnt);
    p_success_cnt := total_success_cnt;
    dbms_output.put_line('p_success_cnt: final ' || p_success_cnt);
    p_partial_cnt := total_partial_cnt;
    dbms_output.put_line('p_partial_cnt: final ' || p_partial_cnt);
    proc_processlog('MO_DISPATCH', v_procedure_name, v_object_type, 'final rejected cnt '
                                                                    || p_rejected_cnt
                                                                    || ' final success cnt '
                                                                    || p_success_cnt
                                                                    || ' final p_partial_cnt '
                                                                    || p_partial_cnt, systimestamp);

EXCEPTION
    WHEN OTHERS THEN
        p_out := 'Error Occurred...!!!!'
                 || sqlcode
                 || sqlerrm;
        dbms_output.put_line('Error occurred..' || p_out);
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE p_update_outlet_ack(p_outlet_batch_id character varying, p_outlet_ack_by numeric, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
pragma autonomous_transaction;
BEGIN
    UPDATE cms_card_detail_extention
    SET
        outlet_acknowledge_date = sysdate,
        outlet_acknowledge_by = p_outlet_ack_by
    WHERE
        outlet_batch_id = p_outlet_batch_id;

    p_out := 'SUCCESS';
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
--        ROLLBACK;
        p_out := 'FAILURE';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE pin_set_proc(p_bin character varying, p_card_no character varying, OUT p_activate character varying)
 SECURITY DEFINER
AS $procedure$
    v_event_cnt       NUMBER;
    v_event           NUMBER;
    exc_bin_not_configured EXCEPTION;
    v_replaced_cnt    NUMBER;
    v_replaced_card   VARCHAR2(2);
BEGIN
    SELECT
        COUNT(1)
    INTO v_replaced_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_card_no
        AND old_card_no IS NOT NULL;

    IF
        v_replaced_cnt = 1
    THEN
        v_replaced_card := 'Y';
    ELSE
        v_replaced_card := 'N';
    END IF;

    SELECT
        COUNT(1)
    INTO v_event_cnt
    FROM
        cms_binwise_activation_events
    WHERE
        bin = p_bin;

    IF
        v_event_cnt = 0
    THEN
        RAISE exc_bin_not_configured;
    END IF;
    SELECT
        event_id
    INTO v_event
    FROM
        cms_binwise_activation_events
    WHERE
        bin = p_bin;

    IF
        v_event = 1
    THEN
        p_activate := 'Y';
    ELSE
        p_activate := 'N';
    END IF;

EXCEPTION
    WHEN exc_bin_not_configured THEN
        p_activate := 'Bin Not Configured';
    WHEN OTHERS THEN
        p_activate := 'FAILURE';
        dbms_output.put_line('Error: '
                               || sqlerrm
                               || ' '
                               || dbms_utility.format_error_backtrace);
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE pin_unblock_daily_proc()
 SECURITY DEFINER
AS $procedure$
    v_msg varchar2(100);
    PRAGMA autonomous_transaction;
BEGIN
-- 06 FOR INCORRECT PIN
    FOR i IN (
        SELECT
            *
        FROM
            card_detail
        WHERE
            status = 'THL'
            AND reason_code = '06'
    ) LOOP

-- Insering into card detail history
---------------------------------------
prc_insert_card_detail_his(i.card_ref_number,v_msg);
if(v_msg='fail') then  -- if not inserted into card_detail_history
   continue;
end if;       
-- Updating the status and reason code
-----------------------------------------
        UPDATE card_detail
        SET
            status = 'A',
            reason_code = '00',
            pin_try_count =0,
            pin_block_date =null
        WHERE
            hash_card_number = i.hash_card_number
            AND status = 'THL'
            AND reason_code = '06';
           
   insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(i.card_ref_number,i.status,sysdate,'SCH',i.prep_account_number, 'DH','10');                  
        

    END LOOP;
    commit;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_card_adjustment(p_card_ref_number character varying, p_hold_flag character varying, p_txn_type character varying, p_amount numeric, p_force_debit_flag character varying, p_user_id character varying, p_narration character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

    v_card_cnt           NUMERIC := 0;
    v_account_number     account_details.account_number%TYPE;
    v_host_balance       number;--account_details.host_balance%TYPE;
    v_hash_card_number   card_detail.hash_card_number%TYPE;
    excep_card_details_not_found EXCEPTION;
	v_reson_code_cnt  number:=0;
	v_avl_bal numeric:=0;
	v_hold_bal numeric:=0;
	v_curr_bal numeric:=0;
    v_prev_bal numeric:=0;
	v_resp_code character varying(5);
	v_resp_msg character varying(50);
	v_settle_flag character varying(1);
BEGIN 

SELECT
     COUNT(1)
     INTO v_card_cnt
FROM
     card_detail        cd
     JOIN cms_cust_details   cust ON ( cust.cust_seq_id = cd.cust_seq_id )
     JOIN account_details    acc ON ( acc.account_number = cust.prepaid_account_number )
WHERE
     cd.card_ref_number = p_card_ref_number;
	 
select count(1) into v_reson_code_cnt
from card_detail cd
WHERE
cd.card_ref_number = p_card_ref_number
and cd.status='PHL'
and cd.reason_code='08';

if(v_reson_code_cnt>0) then
 p_out := '01';
 p_msg := 'Given card is in block state';
 return;
end if;

IF v_card_cnt > 0 then 

            SELECT
                  acc.account_number,
                  acc.available_balance ,
                  cd.hash_card_number
            INTO
                  v_account_number,
                  v_host_balance,
                  v_hash_card_number
            FROM
                  card_detail cd
                  JOIN cms_cust_details   cust ON ( cust.cust_seq_id = cd.cust_seq_id )
                  JOIN account_details    acc ON ( acc.account_number = cust.prepaid_account_number )
            WHERE
                  cd.card_ref_number = p_card_ref_number; 
      
IF p_txn_type = 'C' THEN 



     dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_amount,0,'C','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

            if v_resp_code !='00' then
         
            p_out :='01';
            p_msg :='Account balance update failed.';
           
           return;
       		else 


--insert into card adjustment 
                INSERT INTO cs_manual_adjustment (
                    transaction_date,
                    transaction_time,
                    card_number,
                    reference_number,
                    description,
                    amount,
                    dr_cr_ind,
                    source,
                    entry_date,
                    action_flag,
                    reason_code,
                    user_id,
                    action_date,
                    adjustment_related_to,
                    org_txn_date,
                    rrn,
                    tid,
                    seq_id,
                    fee_ind,
                    remarks,
                    txn_type,
                    settlement_date,
                    is_accountable,
                    prepaid_account_number,
                    available_balance,
                    hold_balance ,
                    current_balance,
                    settle_flag,
                    settle_date,
                    previous_balance
                ) VALUES (
                    sysdate,
                    to_char(sysdate, 'HH24:MI:SS'),
                    v_hash_card_number,--new card number
                    seq_adj_ref_number.NEXTVAL,
                    'Manual Adj',
                    p_amount,
                    p_txn_type,
                    'MANUAL_ADJ',
                    sysdate,
                    'A',
                    NULL,
                    p_user_id,
                    sysdate,
                    NULL,
                    NULL,
                    lpad(seq_adj_ref_rrn.NEXTVAL,16,'0'),
                    NULL,
                    to_char(sysdate, 'DDMONYY')
                    || lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                    NULL,
                    p_narration,
                    '30002',
                    sysdate,
                    'Y',
                    v_account_number,
                    v_avl_bal,
                    v_hold_bal,
                    v_curr_bal,
                    v_settle_flag,
                    systimestamp,
                    v_prev_bal
                );

--                UPDATE account_details
--                SET
--                    host_balance = ( host_balance + p_amount )
--                WHERE
--                    account_number = v_account_number;

                p_out := '00';
                p_msg := 'SUCCESS';
               
     end if;          

ELSIF p_txn_type = 'D' THEN

         IF v_host_balance >= p_amount then
   
         
         dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_amount,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
            p_out :='01';
            p_msg :='Account balance update failed.';
           
           return;
         
        else
         
--insert into card adjustment table
                     INSERT INTO cs_manual_adjustment (
                         transaction_date,
                         transaction_time,
                         card_number,
                         reference_number,
                         description,
                         amount,
                         dr_cr_ind,
                         source,
                         entry_date,
                         action_flag,
                         reason_code,
                         user_id,
                         action_date,
                         adjustment_related_to,
                         org_txn_date,
                         rrn,
                         tid,
                         seq_id,
                         fee_ind,
                         remarks,
                         txn_type,
                         settlement_date,
                         is_accountable,
                         prepaid_account_number,
                         available_balance ,
                         hold_balance ,
                         current_balance ,
                         settle_flag ,
                         settle_date ,
                         previous_balance
                     ) VALUES (
                         sysdate,
                         to_char(sysdate, 'HH24:MI:SS'),
                         v_hash_card_number,--new card number
                         seq_adj_ref_number.NEXTVAL,
                         'Manual Adj',
                         p_amount,
                         p_txn_type,
                         'MANUAL_ADJ',
                         sysdate,
                         'A',
                         NULL,
                         p_user_id,
                         sysdate,
                         NULL,
                         NULL,
                         lpad(seq_adj_ref_rrn.NEXTVAL,16,'0'),
                         NULL,
                         to_char(sysdate, 'DDMONYY')
                         || lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                         NULL,
                         p_narration,
                         '30001',
                         sysdate,
                         'Y',
                         v_account_number,
	                    v_avl_bal,
	                    v_hold_bal,
	                    v_curr_bal,
	                    v_settle_flag,
	                    systimestamp,
	                    v_prev_bal
                     );
--update account details table   
    
                     P_OUT:='00';
                     P_MSG:='SUCCESS';                                 
         end if;           
         else 
                    DBMS_OUTPUT.PUT_LINE(P_AMOUNT);
                     IF p_hold_flag = 'Y' AND p_force_debit_flag = 'Y'  THEN
   
--                         update account_details set hold_balance = (coalesce(hold_balance::double precision,0::double precision ) + p_amount )
--                         WHERE account_number =v_account_number;

dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_amount,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
          p_out :='01';
          p_msg :=v_resp_msg;
           
           return;
        
		 else 

						  INSERT INTO cs_manual_adjustment (
                         transaction_date,
                         transaction_time,
                         card_number,
                         reference_number,
                         description,
                         amount,
                         dr_cr_ind,
                         source,
                         entry_date,
                         action_flag,
                         reason_code,
                         user_id,
                         action_date,
                         adjustment_related_to,
                         org_txn_date,
                         rrn,
                         tid,
                         seq_id,
                         fee_ind,
                         remarks,
                         txn_type,
                         settlement_date,
                         is_accountable,
                         prepaid_account_number,
                         available_balance ,
                         hold_balance ,
                         current_balance ,
                         settle_flag ,
                         settle_date ,
                         previous_balance
                     ) VALUES (
                         sysdate,
                         to_char(sysdate, 'HH24:MI:SS'),
                         v_hash_card_number,--new card number
                         seq_adj_ref_number.NEXTVAL,
                         'Manual Adj',
                         p_amount,
                         p_txn_type,
                         'MANUAL_ADJ',
                         sysdate,
                         'A',
                         NULL,
                         p_user_id,
                         sysdate,
                         NULL,
                         NULL,
                         lpad(seq_adj_ref_rrn.NEXTVAL,16,'0'),
                         NULL,
                         to_char(sysdate, 'DDMONYY')
                         || lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                         NULL,
                         p_narration,
                         '30001',
                         sysdate,
                         'Y',
                         v_account_number,
	                    v_avl_bal,
	                    v_hold_bal,
	                    v_curr_bal,
	                    v_settle_flag,
	                    systimestamp,
	                    v_prev_bal
                     );
 
                         p_out := '00';
                         p_msg := 'SUCCESS';
				end if;
	
					elsIF p_hold_flag = 'N' AND p_force_debit_flag = 'Y'  THEN
				
					dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_amount,0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
          p_out :='01';
          p_msg :=v_resp_msg;
           
           return;
        
		 else 

						  INSERT INTO cs_manual_adjustment (
                         transaction_date,
                         transaction_time,
                         card_number,
                         reference_number,
                         description,
                         amount,
                         dr_cr_ind,
                         source,
                         entry_date,
                         action_flag,
                         reason_code,
                         user_id,
                         action_date,
                         adjustment_related_to,
                         org_txn_date,
                         rrn,
                         tid,
                         seq_id,
                         fee_ind,
                         remarks,
                         txn_type,
                         settlement_date,
                         is_accountable,
                         prepaid_account_number,
                         available_balance ,
                         hold_balance ,
                         current_balance ,
                         settle_flag ,
                         settle_date ,
                         previous_balance
                     ) VALUES (
                         sysdate,
                         to_char(sysdate, 'HH24:MI:SS'),
                         v_hash_card_number,--new card number
                         seq_adj_ref_number.NEXTVAL,
                         'Manual Adj',
                         p_amount,
                         p_txn_type,
                         'MANUAL_ADJ',
                         sysdate,
                         'A',
                         NULL,
                         p_user_id,
                         sysdate,
                         NULL,
                         NULL,
                         lpad(seq_adj_ref_rrn.NEXTVAL,16,'0'),
                         NULL,
                         to_char(sysdate, 'DDMONYY')
                         || lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                         NULL,
                         p_narration,
                         '30001',
                         sysdate,
                         'Y',
                         v_account_number,
	                    v_avl_bal,
	                    v_hold_bal,
	                    v_curr_bal,
	                    'Y',--default Y positive balance
	                    systimestamp,
	                    v_prev_bal
                     );
 
                         p_out := '00';
                         p_msg := 'SUCCESS';
				end if;
					
					
					
					elsIF p_hold_flag = 'Y' AND p_force_debit_flag = 'N'  THEN
					     p_out := '01';
                         p_msg := 'Host balance is less than debit adjustment.';                         
                     elsIF p_hold_flag = 'N' AND p_force_debit_flag = 'N' then
                        p_out := '01';
                        p_msg := 'Host balance is less than debit adjustment.';
                     else 
                     
                     p_out := '01';
                     p_msg := 'Insufficient Balance with empty flags.';
                       
                     end if;  -- hold flag if
    
         END IF;   --balance if
end IF;   --drcr if 
ELSE
    RAISE excep_card_details_not_found;
end if; -- count if

EXCEPTION
    WHEN excep_card_details_not_found THEN
        p_out := '01';
        p_msg := 'Given card reference details not found.';
    WHEN OTHERS THEN
        p_out := '01';
        p_msg := 'Adjusment error..!!'
                 || sqlcode
                 || sqlerrm;
     dbms_output.put_line('error occurred..'
                             || sqlcode
                             || sqlerrm);
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_card_adjustment_process(p_file_name character varying, p_batch_no character varying, p_user_id character varying, p_app_rejected_cnt character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_file_cnt number :=0;
v_file_dup_cnt number :=0;
v_card_cnt number :=0;
v_card_status number:=0;
v_account_number account_details.account_number%type;
v_host_balance number;--account_details.host_balance%type;
v_hash_card_number card_detail.hash_card_number%type;
v_success_cnt number:=0;
v_rejected_cnt number:=0;
v_avl_bal numeric:=0;
v_hold_bal numeric:=0;
v_curr_bal numeric:=0;
v_prev_bal numeric:=0;
v_resp_code character varying(5);
v_resp_msg character varying(50);
v_settle_flag character varying(1);
excep_file_upload exception;
excep_file_duplicate exception;

begin 
select count(1) into v_file_cnt from cms_card_adjustment_temp where file_name=p_file_name and batch_no=p_batch_no and status is null;
dbms_output.put_line('v_file_cnt '||v_file_cnt);
if v_file_cnt > 0 then
dbms_output.put_line('v_file_cnt '||v_file_cnt);
select count(1) into v_file_dup_cnt from cms_card_adjustment_summary where file_name=p_file_name ;
dbms_output.put_line('v_file_dup_cnt '||v_file_dup_cnt);
if v_file_dup_cnt =0 then
dbms_output.put_line('v_file_dup_cnt '||v_file_dup_cnt);

update cms_card_adjustment_temp set file_uploaded_by=p_user_id; 

select count(1) into v_card_status from card_detail cd  where cd.card_ref_number in(select card_ref_number from cms_card_adjustment_temp where file_name=p_file_name and batch_no=p_batch_no and status is null) 
and cd.status ='PHL' and cd.reason_code ='08';

if v_card_status > 0 then

update cms_card_adjustment_temp  set status='N' , Remarks='Given CRN is in block state with reason code 08.' where card_ref_number in(select card_ref_number from card_detail where status in('PHL') and reason_code='08') and file_name=P_file_name and batch_no=p_batch_no and status is null;

v_rejected_cnt := v_rejected_cnt + sql%rowcount;

dbms_output.put_line('Rejected cnt : '||v_rejected_cnt);
end if;

for cur_rec in(select * from cms_card_adjustment_temp where file_name=p_file_name and batch_no=p_batch_no and status is null order by record_no asc )
loop 
dbms_output.put_line('inside loop ');

select count(1) into v_card_cnt from cms_card_adjustment_temp temp join card_detail cd on(temp.card_ref_number=cd.card_ref_number)
join cms_cust_details cust on(cust.cust_seq_id=cd.cust_seq_id)
join account_details acc on(acc.account_number =cust.prepaid_account_number)
where cd.card_ref_number=cur_rec.card_ref_number and temp.simba_id = cur_rec.simba_id and temp.file_name=cur_rec.file_name and temp.batch_no=cur_rec.batch_no and temp.status is null;
dbms_output.put_line('v_card_cnt  '||v_card_cnt);

if v_card_cnt > 0 then
dbms_output.put_line('v_card_cnt  '||v_card_cnt);

select acc.account_number ,acc.available_balance , cd.hash_card_number into v_account_number ,v_host_balance, v_hash_card_number from cms_card_adjustment_temp temp join card_detail cd on(temp.card_ref_number=cd.card_ref_number)
join cms_cust_details cust on(cust.cust_seq_id=cd.cust_seq_id)
join account_details acc on(acc.account_number =cust.prepaid_account_number)
where cd.card_ref_number=cur_rec.card_ref_number and temp.simba_id = cur_rec.simba_id and temp.file_name=cur_rec.file_name and temp.batch_no=cur_rec.batch_no and temp.status is null;

if cur_rec.drcr='C' and cur_rec.status is null then 
dbms_output.put_line('txn_type  '||cur_rec.drcr);


    dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,cur_rec.amount,0,'C','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
         update cms_card_adjustment_temp  
           set status='N' , 
          		Remarks=v_resp_msg
          	where card_ref_number=cur_rec.card_ref_number
          	and simba_id = cur_rec.simba_id
          	and file_name=cur_rec.file_name
          	and batch_no=cur_rec.batch_no
          	and status is null;
          
			v_rejected_cnt := v_rejected_cnt + sql%rowcount;
        else 
--insert into card adjustment 

            INSERT INTO cs_manual_adjustment (
                transaction_date,
                transaction_time,
                card_number,
                reference_number,
                description,
                amount,
                dr_cr_ind,
                source,
                entry_date,
                action_flag,
                reason_code,
                user_id,
                action_date,
                adjustment_related_to,
                org_txn_date,
                rrn,
                tid,
                seq_id,
                fee_ind,
                remarks,
                txn_type,
                settlement_date,
                is_accountable,
                prepaid_account_number,
                available_balance,
                hold_balance,
                current_balance,
                settle_flag,
                settle_date,
                previous_balance,
                file_name,
                batch_no
            )
            values 
            (
                    sysdate ,
                    to_char(sysdate,'HH24:MI:SS'),
                    v_hash_Card_number,--new card number
                    SEQ_ADJ_REF_NUMBER.nextval,
                    'Manual Adj',
                    cur_rec.amount,
                    cur_rec.drcr,
                    'MANUAL_ADJ',
                    sysdate ,
                    'A' ,
                    null ,
                    cur_rec.file_uploaded_by,
                    sysdate,
                    null,
                    null,
                    lpad(SEQ_ADJ_REF_RRN.nextval,16,'0'),
                    null,
                    to_char(sysdate, 'DDMONYY')|| lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                    null,
                    cur_rec.adjustment_remark ,
                    '30002',
                    sysdate ,
                    'Y',
                    v_account_number,
                    v_avl_bal,
                    v_hold_bal,
                    v_curr_bal,
                    v_settle_flag,
                    sysdate,
                    v_prev_bal,
                    p_file_name,
                    p_batch_no
                    );

--      
--   update account_details set host_balance =(host_balance + cur_rec.amount) where account_number=v_account_number;                
--dbms_output.put_line('txn_type  c'||sql%rowcount);

  update cms_card_adjustment_temp  set status='Y' , Remarks='SUCCESS' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;
dbms_output.put_line('txn_type  c'||sql%rowcount);

v_success_cnt := v_success_cnt + 1;             
end if;               


elsif cur_rec.drcr='D'and cur_rec.status is null then

dbms_output.put_line('txn_type  D');

if  v_host_balance >= cur_rec.amount then

dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,cur_rec.amount,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
         update cms_card_adjustment_temp  
           set status='N' , 
          		Remarks=v_resp_msg
          	where card_ref_number=cur_rec.card_ref_number
          	and simba_id = cur_rec.simba_id
          	and file_name=cur_rec.file_name
          	and batch_no=cur_rec.batch_no
          	and status is null;
          
			v_rejected_cnt := v_rejected_cnt + sql%rowcount;
        else 

dbms_output.put_line('host greater  D');

--insert into card adjustment table
INSERT INTO cs_manual_adjustment (
                transaction_date,
                transaction_time,
                card_number,
                reference_number,
                description,
                amount,
                dr_cr_ind,
                source,
                entry_date,
                action_flag,
                reason_code,
                user_id,
                action_date,
                adjustment_related_to,
                org_txn_date,
                rrn,
                tid,
                seq_id,
                fee_ind,
                remarks,
                txn_type,
                settlement_date,
                is_accountable,
                prepaid_account_number,
                available_balance,
                hold_balance,
                current_balance,
                settle_flag,
                settle_date,
                previous_balance,
                file_name,
                batch_no
            )
            values 
            (
                    sysdate ,
                    to_char(sysdate,'HH24:MI:SS'),
                    v_hash_Card_number,--new card number
                    SEQ_ADJ_REF_NUMBER.nextval,
                    'Manual Adj',
                    cur_rec.amount,
                    cur_rec.drcr,
                    'MANUAL_ADJ',
                    sysdate ,
                    'A' ,
                    null ,
                    cur_rec.file_uploaded_by,
                    sysdate,
                    null,
                    null,
                    lpad(SEQ_ADJ_REF_RRN.nextval,16,'0'),
                    null,
                    to_char(sysdate, 'DDMONYY')|| lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                    null,
                    cur_rec.adjustment_remark ,
                    '30001',
                    sysdate ,
                    'Y',
                    v_account_number,
                    v_avl_bal,
                    v_hold_bal,
                    v_curr_bal,
                    v_settle_flag,
                    sysdate,
                    v_prev_bal,
                    p_file_name,
                    p_batch_no
                    );
--update account details table 

--   update account_details set host_balance =(host_balance-cur_rec.amount) where account_number=v_account_number;                

update cms_card_adjustment_temp  set  status='Y' , Remarks='SUCCESS' where card_ref_number=cur_rec.card_ref_number and simba_id = cur_rec.simba_id and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;
  
  v_success_cnt := v_success_cnt + 1;
 
 end if;
                                     
else 
dbms_output.put_line('host less  D');

--insert into the hold_balance

if cur_rec.hold_flag='Y' and cur_rec.force_debit_flag='Y' and cur_rec.status is null then 

dbms_output.put_line('update hold balance '||cur_rec.card_ref_number||cur_rec.amount);



dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,cur_rec.amount,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
         update cms_card_adjustment_temp  
           set status='N' , 
          		Remarks=v_resp_msg
          	where card_ref_number=cur_rec.card_ref_number
          	and simba_id = cur_rec.simba_id
          	and file_name=cur_rec.file_name
          	and batch_no=cur_rec.batch_no
          	and status is null;
          
			v_rejected_cnt := v_rejected_cnt + sql%rowcount;
        
		 else 

			INSERT INTO cs_manual_adjustment (
                transaction_date,
                transaction_time,
                card_number,
                reference_number,
                description,
                amount,
                dr_cr_ind,
                source,
                entry_date,
                action_flag,
                reason_code,
                user_id,
                action_date,
                adjustment_related_to,
                org_txn_date,
                rrn,
                tid,
                seq_id,
                fee_ind,
                remarks,
                txn_type,
                settlement_date,
                is_accountable,
                prepaid_account_number,
                available_balance,
                hold_balance,
                current_balance,
                settle_flag,
                settle_date,
                previous_balance,
                file_name,
                batch_no
            )
            values 
            (
                    sysdate ,
                    to_char(sysdate,'HH24:MI:SS'),
                    v_hash_Card_number,--new card number
                    SEQ_ADJ_REF_NUMBER.nextval,
                    'Manual Adj',
                    cur_rec.amount,
                    cur_rec.drcr,
                    'MANUAL_ADJ',
                    sysdate ,
                    'A' ,
                    null ,
                    cur_rec.file_uploaded_by,
                    sysdate,
                    null,
                    null,
                    lpad(SEQ_ADJ_REF_RRN.nextval,16,'0'),
                    null,
                    to_char(sysdate, 'DDMONYY')|| lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                    null,
                    cur_rec.adjustment_remark ,
                    '30001',
                    sysdate ,
                    'Y',
                    v_account_number,
                    v_avl_bal,
                    v_hold_bal,
                    v_curr_bal,
                    v_settle_flag,
                    sysdate,
                    v_prev_bal,
                    p_file_name,
                    p_batch_no
                    );

--update account_details set hold_balance = (nvl(hold_balance,0) + cur_rec.amount) where account_number=v_account_number;    

update cms_card_adjustment_temp  set status='Y' , Remarks='SUCCESS' where card_ref_number=cur_rec.card_ref_number and simba_id = cur_rec.simba_id and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

  v_success_cnt := v_success_cnt + 1;     

 end if;
 elsif  cur_rec.hold_flag='N' and cur_rec.force_debit_flag='Y' and cur_rec.status is null then

		
dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,cur_rec.amount,0,'D','N' ,v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
         update cms_card_adjustment_temp  
           set status='N' , 
          		Remarks=v_resp_msg
          	where card_ref_number=cur_rec.card_ref_number
          	and simba_id = cur_rec.simba_id
          	and file_name=cur_rec.file_name
          	and batch_no=cur_rec.batch_no
          	and status is null;
          
			v_rejected_cnt := v_rejected_cnt + sql%rowcount;
        
		 else 
dbms_output.put_line('settle_flag '||v_settle_flag);


			INSERT INTO cs_manual_adjustment (
                transaction_date,
                transaction_time,
                card_number,
                reference_number,
                description,
                amount,
                dr_cr_ind,
                source,
                entry_date,
                action_flag,
                reason_code,
                user_id,
                action_date,
                adjustment_related_to,
                org_txn_date,
                rrn,
                tid,
                seq_id,
                fee_ind,
                remarks,
                txn_type,
                settlement_date,
                is_accountable,
                prepaid_account_number,
                available_balance,
                hold_balance,
                current_balance,
                settle_flag,
                settle_date,
                previous_balance,
                file_name,
                batch_no
            )
            values 
            (
                    sysdate ,
                    to_char(sysdate,'HH24:MI:SS'),
                    v_hash_Card_number,--new card number
                    SEQ_ADJ_REF_NUMBER.nextval,
                    'Manual Adj',
                    cur_rec.amount,
                    cur_rec.drcr,
                    'MANUAL_ADJ',
                    sysdate ,
                    'A' ,
                    null ,
                    cur_rec.file_uploaded_by,
                    sysdate,
                    null,
                    null,
                    lpad(SEQ_ADJ_REF_RRN.nextval,16,'0'),
                    null,
                    to_char(sysdate, 'DDMONYY')|| lpad(cs_manual_adjustment_seq.NEXTVAL, 8, '0'),
                    null,
                    cur_rec.adjustment_remark ,
                    '30001',
                    sysdate ,
                    'Y',
                    v_account_number,
                    v_avl_bal,
                    v_hold_bal,
                    v_curr_bal,
                    'Y',  --default Y 
                    sysdate,
                    v_prev_bal,
                    p_file_name,
                    p_batch_no
                    );

--update account_details set hold_balance = (nvl(hold_balance,0) + cur_rec.amount) where account_number=v_account_number;    

update cms_card_adjustment_temp  set status='Y' , Remarks='SUCCESS' where card_ref_number=cur_rec.card_ref_number and simba_id = cur_rec.simba_id and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

  v_success_cnt := v_success_cnt + 1;      
 end if;


 else 
 
update cms_card_adjustment_temp  set status='N' , Remarks='Less Amount & Hold or Force Debit is N or null' where card_ref_number=cur_rec.card_ref_number and simba_id = cur_rec.simba_id and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

  v_rejected_cnt := v_rejected_cnt + 1;     

end if;   --hold flag end if
end if;   --balance if
end if;   --drcr if 

else 

update cms_card_adjustment_temp set status='N' , remarks='Given card reference not found '||cur_rec.card_ref_number where card_ref_number=cur_rec.card_ref_number and simba_id = cur_rec.simba_id and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

v_rejected_cnt:=v_rejected_cnt + 1;
end if;
end loop;

--insert into history table 
insert into cms_card_adjustment_history 
(
    id,
	card_ref_number,
	simba_id,
	drcr,
	amount,
	hold_flag,
	force_debit_flag ,
	status,
	remarks,
	file_name,
	batch_no,
	raw_data,
	file_uploaded_by,
	file_uploaded_date ,
	adjustment_remark,
	record_no
)
select 
   	id,
	card_ref_number,
	simba_id,
	drcr,
	amount,
	hold_flag,
	force_debit_flag ,
	status,
	remarks,
	file_name,
	batch_no,
	raw_data,
	file_uploaded_by,
	file_uploaded_date,
	adjustment_remark,
	record_no 
	from cms_card_adjustment_temp  where file_name=p_file_name and batch_no=p_batch_no; 
	
	--insert into summary table
  
  insert into cms_card_adjustment_summary
  (
    id,
	file_name,
	total_count,
	total_amount,
	success_count,
	rejected_count,
	batch_no,
	file_uploaded_by,
	file_uploaded_date
   )
   VALUES
   (
   SEQ_ADJ_SUMMARY_ID.nextval,
   p_file_name,
   v_file_cnt + p_app_rejected_cnt,
   0,
   v_success_cnt,
   v_rejected_cnt + p_app_rejected_cnt,
   p_batch_no,
   p_user_id,
   sysdate
   ); 	 	

p_out :='00';

p_msg :='File is processed successfully.';
dbms_output.put_line('file_processed_successfully.');

else 

raise excep_file_duplicate;

end if;

else 

raise excep_file_upload;

end if;

exception

when excep_file_upload then 

p_out :='01';

p_msg :='File is not uploaded successfully.';

when excep_file_duplicate then

p_out :='01';

p_msg :='Duplicate file found.';

when others then

p_out :='01';

p_msg :='File is not processed successfully.'||sqlcode||sqlerrm;

DBMS_OUTPUT.PUT_LINE(SQLCODE||SQLERRM);
	
	
end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_card_closure_hold_process()
 SECURITY DEFINER
AS $procedure$ 

v_hold_balance number:=0;
v_available_balance number:=0;
v_prep_account_number card_detail.prep_account_number%type;
v_hash_card_number card_detail.hash_Card_number%type;
v_arn_ref varchar2(100);
v_resp_code varchar(2);
v_resp_msg varchar(100);
v_settle_flag varchar(2);
v_avl_bal numeric:=0;
v_hold_bal numeric:=0;
v_curr_bal numeric:=0;
v_prev_bal numeric:=0;


begin

for cur_rec in(select * from card_detail where is_closure_hold='Y' and is_closure_hold_date is not null)
loop 
dbms_output.put_line('Start proc');
select hold_balance,available_balance into v_hold_balance,v_available_balance from account_details where account_number=cur_rec.prep_account_number;


dbms_output.put_line('v_hold_balance '||v_hold_balance||' v_available_balance '||v_available_balance);

if v_hold_balance = 0 then


dbms_output.put_line('Inside hold balance ');


		   SELECT
           lpad(load_seq.NEXTVAL,16,0)
           INTO v_arn_ref
           FROM dual;
		   

  		   -- Making Balance to zero
		   --------------------------
--		   balance_update(v_hash_card_number, abs(v_available_balance)::text, 'D', v_update_bal_code, v_update_bal_msg);
           
	             dbms_output.put_line('before account update proc call '||cur_rec.hash_Card_number||abs(v_available_balance));

      account_balance_update(cur_rec.hash_Card_number,abs(v_available_balance),0,(case when v_available_balance > 0 then 'D' when v_available_balance < 0 then 'C' end),'N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);
    
        if v_resp_code ='00' then  
          
          -- DEDUCT FROM SIMBA ACCOUNT
		   --------------------------------		   
           INSERT INTO simba_txn_detail
           (account_no, customer_account, card_no, txn_type, original_txn_ref, amount, txn_desc,drcr)
           VALUES('123456789', cur_rec.prep_account_number,cur_rec.hash_Card_number,(case when v_available_balance > 0 then '10118' when v_available_balance < 0 then '10119' end),v_arn_ref,abs(v_available_balance),(case when v_available_balance > 0 then 'Txn Credit' when v_available_balance < 0 then 'Txn Debit' end),(case when v_available_balance > 0 then 'C' when v_available_balance < 0 then 'D' end));
		   
		   -- INSERT INTO DIGITAL_TXN_AUTHORIZATION	
           ------------------------------------------		   
		   INSERT INTO digital_txn_authorization (
              id,
              arn,
              branch_id,
              card_enc,
              card_token,
              channel_id,
              channel_type,
              date_time,
              dr_cr_flag,
              msg_type,
              response_code,
              txn_amount,
              last_settle_date,
              mid,
              topup_pay_mode,
              topup_txn_refno,
              source_req_id,
              arn_reference,
              pg_mid,
              txn_id,
              ref_tid,
              txn_type,
              prepaid_account_number,
              available_balance,
   	        hold_balance,
	        current_balance,
	        settle_flag,
	        settle_date,
	        previous_balance 
               ) VALUES (
                   digital_txn_seq.NEXTVAL,
                   'SUCCESS',
                   null,
                   cur_rec.hash_Card_number,
                   cur_rec.hash_Card_Number,
                   null,--channel id
                   null, --p_channel_type
                   SYSDATE,
                   (case when v_available_balance > 0 then 'Dr' when v_available_balance < 0 then 'Cr' end),
                   'adjust',
                   '00',
                   abs(v_available_balance),
                   SYSDATE,
                   null, --mid
                   null, --p_pay_mode
                   null, -- p_pay_txn_ref_no
                   null, --p_src_req_id
                   v_arn_ref,
                   null, --p_pg_mid
                   null, --p_txn_id
                   null,  --p_ref_tid
	              (case when v_available_balance > 0 then '10119' when v_available_balance < 0 then '10118' end), -- Txn_type for dormancy    
                  cur_rec.prep_account_number,
                  v_avl_bal,
                  v_hold_bal,
                  v_curr_bal,
                  v_settle_flag,
                  systimestamp,
                  v_prev_bal
	           	);		   
		   
	          
		   -- MAKING CARD STATUS PHL
		   --------------------------
		    update card_detail 
			set reason_code='08',  -- reason code for card closure
			status='PHL',-- Status changes to PHL
			card_closure_date =sysdate
			where card_ref_number=cur_rec.card_ref_number;
		
		insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,cur_rec.status,sysdate,'Scheduler',cur_rec.prep_account_number, 'PH','08');                  
         end if;
else 

dbms_output.put_line('outside hold balance ');


update CARD_DETAIL set remarks ='Settlement not received close card' where card_ref_number=cur_rec.card_ref_number;


end if;

end loop;

exception

when others then

dbms_output.put_line('Error occurred.'||sqlcode||sqlerrm);

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_card_fee_process(p_file_name character varying, p_batch_no character varying, p_user_id character varying, p_app_rejected_cnt character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

    v_file_cnt       NUMBER := 0;
    v_file_dup_cnt   NUMBER := 0;
    v_success_cnt    NUMBER := 0;
    v_rejected_cnt   NUMBER := 0;
    v_card_cnt       NUMBER := 0;
   v_config_cnt      NUMBER := 0;
   v_invalid_txn_code_cnt NUMBER := 0;
   v_status           card_detail.status%type;
   v_reason_code      card_detail.reason_code%type;
   v_card_ref_cnt    number ; 
    excep_file_upload EXCEPTION;
    excep_file_duplicate EXCEPTION;
BEGIN
    SELECT
        COUNT(1)
    INTO v_file_cnt
    FROM
        cms_card_fee_temp
    WHERE
        file_name = p_file_name
        AND batch_no = p_batch_no;
DBMS_OUTPUT.PUT_LINE('p_file_name :'||p_file_name);
DBMS_OUTPUT.PUT_LINE('p_batch_no :'||p_batch_no);
DBMS_OUTPUT.PUT_LINE('v_file_cnt :'||v_file_cnt);

    IF v_file_cnt > 0 THEN
        SELECT
            COUNT(1)
        INTO v_file_dup_cnt
        FROM
            cms_card_fee_summary
        WHERE
            file_name = p_file_name;

        IF v_file_dup_cnt = 0 then
        DBMS_OUTPUT.PUT_LINE('v_file_dup_cnt :'||v_file_dup_cnt);

            UPDATE cms_card_fee_temp
            SET
                file_uploaded_by = p_user_id;

            select count(1) into v_invalid_txn_code_cnt from cms_card_fee_temp where fee_type not in(select txn_type from prd_fee_profile)
           and file_name=p_file_name and batch_no=p_batch_no;
  
          if v_invalid_txn_code_cnt > 0 then
           
           update cms_card_fee_temp set status='N' ,remark ='Invalid Fee type code.' where fee_type not in(select txn_type from prd_fee_profile)
           and file_name=p_file_name and batch_no=p_batch_no;
           
                    v_rejected_cnt := v_rejected_cnt + sql%rowcount ;
dbms_output.put_line('rejected cnt '||v_rejected_cnt);
           end if;
               
            FOR cur_rec IN (
                SELECT
                    *
                FROM
                    cms_card_fee_temp
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no
                    AND status IS null
                    and action_flag = 'A'
                    order by record_no asc
            ) LOOP
           
                        dbms_output.put_line('inside loop');

--            IF cur_rec.action_flag = 'A' then
            dbms_output.put_line('inside add A');
                SELECT
                    COUNT(1)
                INTO v_card_cnt
                FROM
                    cms_card_fee_config
                WHERE
                    card_ref_number =cur_rec.card_ref_number
                    AND txn_type = cur_rec.fee_type;
                   -- AND frequency = cur_rec.frequency;

                IF v_card_cnt > 0 THEN
                    UPDATE cms_card_fee_temp
                    SET
                        status = 'N',
                        remark = 'Duplicate fee configuration.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND fee_type = cur_rec.fee_type
                    --    AND frequency = cur_rec.frequency
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                 end if;
               
                
                 SELECT
                    COUNT(1)
                INTO v_card_ref_cnt
                FROM
                    card_detail
                WHERE
                    card_ref_number =cur_rec.card_ref_number;
                   -- AND frequency = cur_rec.frequency;

                IF v_card_ref_cnt = 0 THEN
                    UPDATE cms_card_fee_temp
                    SET
                        status = 'N',
                        remark = 'Card reference number not found.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND fee_type = cur_rec.fee_type
                    --    AND frequency = cur_rec.frequency
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                 end if;
                 
                
      
                IF v_card_ref_cnt > 0 THEN
                  
                select status , reason_code into v_status,v_reason_code from card_detail where card_ref_number =cur_rec.card_ref_number;
               
               if v_status ='PHL' and v_reason_code='08' then 
                UPDATE cms_card_fee_temp
                    SET
                        status = 'N',
                        remark = 'Card was closed.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND fee_type = cur_rec.fee_type
                    --    AND frequency = cur_rec.frequency
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                 end if;  
                 end if;                

                INSERT INTO cms_card_fee_config (
                    card_ref_number,
                    simba_id,
                    txn_type ,
                    frequency,
                    amount,
                    transaction_description,
                    action_flag,
                    status,
remark ,
                    file_uploaded_by,
                    file_uploaded_date
                ) select
                  card_ref_number,
                    simba_id,
                    fee_type,
                    frequency,
                    amount,
                    transaction_description,
                    action_flag,
                    'Y',
                    'SUCCESS',
                    file_uploaded_by,
                    systimestamp
                FROM
                    cms_card_fee_temp
                where
                    card_ref_number = cur_rec.card_ref_number
                    AND fee_type = cur_rec.fee_type
              --      AND frequency = cur_rec.frequency
                    AND action_flag = cur_rec.action_flag
                    and file_name = cur_rec.file_name
                    AND batch_no = cur_rec.batch_no
                    AND status IS null;                
               

                UPDATE cms_card_fee_temp
                SET
                    status = 'Y',
                    remark = 'SUCCESS'
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND fee_type = cur_rec.fee_type
                  --  AND frequency = cur_rec.frequency
                    AND action_flag = cur_rec.action_flag
                    AND status IS NULL;

                v_success_cnt := v_success_cnt + 1;
             
               end loop;
           
             
             
           FOR cur_rec IN (
                SELECT
                    *
                FROM
                    cms_card_fee_temp
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no
                    AND status IS null
                    and action_flag = 'U'
                    order by record_no  asc
            ) LOOP    
--            ELSIF cur_rec.action_flag = 'U' THEN

            DBMS_OUTPUT.PUT_LINE('Update card ref number '||cur_rec.card_ref_number);
           
           SELECT
                    COUNT(1)
                INTO v_card_cnt
                FROM
                    cms_card_fee_config
                WHERE
                    card_ref_number =cur_rec.card_ref_number
                    AND txn_type = cur_rec.fee_type;
                --    AND frequency = cur_rec.frequency;

                IF v_card_cnt = 0 THEN
                    UPDATE cms_card_fee_temp
                    SET
                        status = 'N',
                        remark = 'Fee types not found against the card'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND fee_type = cur_rec.fee_type
                        --AND frequency = cur_rec.frequency
                        and action_flag =cur_rec.action_flag
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                  end if;

  SELECT
                    COUNT(1)
                INTO v_card_ref_cnt
                FROM
                    card_detail
                WHERE
                    card_ref_number =cur_rec.card_ref_number;
                   -- AND frequency = cur_rec.frequency;

                IF v_card_ref_cnt = 0 THEN
                    UPDATE cms_card_fee_temp
                    SET
                        status = 'N',
                        remark = 'Card reference number not found.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND fee_type = cur_rec.fee_type
                    --    AND frequency = cur_rec.frequency
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                 end if;
                 
                
      
                IF v_card_ref_cnt > 0 THEN
                  
                select status , reason_code into v_status,v_reason_code from card_detail where card_ref_number =cur_rec.card_ref_number;
               
               if v_status ='PHL' and v_reason_code='08' then 
                UPDATE cms_card_fee_temp
                    SET
                        status = 'N',
                        remark = 'Card was closed.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND fee_type = cur_rec.fee_type
                    --    AND frequency = cur_rec.frequency
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                 end if;  
                 end if;                
                 
                 
                INSERT INTO cms_card_fee_config_history (
                    card_ref_number,
                    simba_id,
                    fee_type,
                    frequency,
                    amount,
                    transaction_description,
                    action_flag,
                    status,
					remark ,
                    file_uploaded_by,
                    file_uploaded_date,
                    inserted_date,
                    inserted_by
                )
                    SELECT
                        card_ref_number,
                        simba_id,
                        txn_type ,
                        frequency,
                        amount,
                        transaction_description,
                        action_flag,
                        status,
						remark ,
                        file_uploaded_by,
                        file_uploaded_date,
                        systimestamp inserted_date,
                        cur_rec.file_uploaded_by  
                    FROM
                        cms_card_fee_config
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND txn_type = cur_rec.fee_type
                        and cur_rec.status is null;
                  --      AND frequency = cur_rec.frequency;

                UPDATE cms_card_fee_config
                SET
                    txn_type = nvl(cur_rec.fee_type,fee_type),
                    frequency = nvl(cur_rec.frequency,frequency),
                    amount = nvl(cur_rec.amount,amount),
                    transaction_description = nvl(cur_rec.transaction_description,transaction_description),
                    action_flag = nvl(cur_rec.action_flag,action_flag),
                    status = 'Y',
					remark='SUCCESS',
                    file_uploaded_by = cur_rec.file_uploaded_by,
                    file_uploaded_date = systimestamp
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND txn_type = cur_rec.fee_type
                    and cur_rec.status is null;
              --      AND frequency = cur_rec.frequency;

                UPDATE cms_card_fee_temp
                SET
                    status = 'Y',
                    remark = 'SUCCESS'
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND fee_type = cur_rec.fee_type
                   -- AND frequency = cur_rec.frequency
                    AND action_flag = cur_rec.action_flag
                    AND status IS NULL;

                v_success_cnt := v_success_cnt + 1;

           end loop;  
         
         
          FOR cur_rec IN (
                SELECT
                    *
                FROM
                    cms_card_fee_temp
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no
                    AND status IS null
                    and action_flag = 'D'
                    order by record_no  asc
            ) LOOP  
--            ELSIF cur_rec.action_flag = 'D' then
            dbms_output.put_line('Inside delete');
              SELECT
                        count(1) into v_config_cnt
                    FROM
                        cms_card_fee_config
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND txn_type = cur_rec.fee_type;
                   --     AND frequency = cur_rec.frequency;
               
            if v_config_cnt > 0 then
           
                        dbms_output.put_line('v_config_cnte');

                INSERT INTO cms_card_fee_config_history (
                    card_ref_number,
                    simba_id,
                    fee_type,
                    frequency,
                    amount,
                    transaction_description,
                    action_flag,
                    status,
					remark ,
                    file_uploaded_by,
                    file_uploaded_date,
                    inserted_date,
                    inserted_by
                )
                    SELECT
                        card_ref_number,
                        simba_id,
                        txn_type ,
                        frequency,
                        amount,
                        transaction_description,
                        action_flag,
                        status,
						remark ,
                        file_uploaded_by,
                        file_uploaded_date,
                        systimestamp inserted_date,
                        cur_rec.file_uploaded_by
                    FROM
                        cms_card_fee_config
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND txn_type = cur_rec.fee_type;
                      --  AND frequency = cur_rec.frequency;

                DELETE FROM cms_card_fee_config
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND txn_type = cur_rec.fee_type;
                 --   AND frequency = cur_rec.frequency;

                UPDATE cms_card_fee_temp
                SET
                    status = 'Y',
                    remark = 'SUCCESS'
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND fee_type = cur_rec.fee_type
                   -- AND frequency = cur_rec.frequency
                    AND action_flag = cur_rec.action_flag
                    AND status IS NULL;

                v_success_cnt := v_success_cnt + 1;
               
               else
                                      dbms_output.put_line('no records found');
 
                UPDATE cms_card_fee_temp
                SET
                    status = 'N',
                    remark = 'No such fees configured to remove.'
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND fee_type = cur_rec.fee_type
                   -- AND frequency = cur_rec.frequency
                    AND action_flag = cur_rec.action_flag
                    AND status IS NULL;
                   
                   v_rejected_cnt := v_rejected_cnt + 1;
   
               
               end if;
            END LOOP;

            INSERT INTO cms_card_fee_history (
                card_ref_number,
                simba_id,
                fee_type,
                frequency,
                amount,
                transaction_description,
                action_flag,
                status,
                remark,
                file_uploaded_by,
                file_uploaded_date,
				file_name,
				batch_no,
				record_no
            )
                SELECT
                    card_ref_number,
                    simba_id,
                    fee_type,
                    frequency,
                    amount,
                    transaction_description,
                    action_flag,
                    status,
                    remark,
                    file_uploaded_by,
                    file_uploaded_date,
					file_name,
					batch_no,
					record_no
                FROM
                    cms_card_fee_temp
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no;
--insert into summary table

            INSERT INTO cms_card_fee_summary (
                id,
                file_name,
                total_count,
                success_count,
                rejected_count,
                batch_no,
                file_uploaded_by,
                file_uploaded_date
            ) VALUES (
                seq_card_fee_summary_id.NEXTVAL,
                p_file_name,
                v_file_cnt + p_app_rejected_cnt,
                v_success_cnt,
                v_rejected_cnt + p_app_rejected_cnt,
                p_batch_no,
                p_user_id,
                sysdate
            );

            p_out := '00';
            p_msg := 'File is processed successfully.';
        ELSE
            RAISE excep_file_duplicate;
                   DBMS_OUTPUT.PUT_LINE('Duplicate file');

        END IF;

    ELSE
        RAISE excep_file_upload;
    END IF;

EXCEPTION
    WHEN excep_file_upload THEN
        p_out := '01';
        p_msg := 'File is not uploaded successfully.';
    WHEN excep_file_duplicate THEN
        p_out := '01';
        p_msg := 'Duplicate file found.';
    WHEN OTHERS THEN
        p_out := '01';
        p_msg := 'File is not processed successfully.'||sqlerrm;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_card_statement(p_card_ref_number character varying, p_txn_count character varying, p_from_date character varying, p_to_date character varying, p_txn_type character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

    v_first              NUMBER := 1;
    v_last               NUMBER := p_txn_count;
    v_hash_no   card_detail.hash_card_number%TYPE;
    v_count              NUMBER;
BEGIN
	
	SELECT
        hash_card_number
    INTO v_hash_no
    FROM
        card_detail
    WHERE
        card_ref_number = p_card_ref_number;


    IF ( p_txn_count IS NOT NULL OR p_txn_count <> 0 ) AND p_from_date IS NULL AND p_to_date IS NULL AND p_txn_type IS NULL THEN
        dbms_output.put_line('if part');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,                               
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,        
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type,wallet_name, cif_id ,beneficiryaccountno ,MERCHANT_NAME
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                    sys_txn_date ,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,
                                    cif_id ,beneficiryaccountno ,d.F043 MERCHANT_NAME

                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )

                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type,
                                      (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,
                                       cif_id ,beneficiryaccountno ,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                   date_time,
                                   t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,
                                       cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                      join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_enc=v_hash_no
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                      (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,
                                       cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                         join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                                   UNION ALL
                                    select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                   t.txn_type ,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,
                                       cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE ,
                                  req.wallet_name,
                                  req.cif_id,
                                  req.beneficiryaccountno,MERCHANT_NAME
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND rownum1 >= v_first
                           AND rownum1 <= v_last
                          order by Transaction_Date||Transaction_Time desc;

    ELSIF p_from_date IS NOT NULL AND p_to_date IS NOT NULL AND ( p_txn_count = 0 OR p_txn_count IS NULL ) AND p_txn_type IS NULL
    THEN
        dbms_output.put_line('if part 2');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER by Transaction_Date||Transaction_Time desc
                                      -- sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time, 
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type,
                               wallet_name, cif_id ,beneficiryaccountno ,MERCHANT_NAME
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                          sys_txn_date,
                                   t.txn_type   ,
                                 (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name, cif_id ,beneficiryaccountno ,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name, cif_id ,beneficiryaccountno ,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type     t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )

                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name, cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                     join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )

                                   WHERE
                                       d.card_enc=v_hash_no
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name, cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                                   UNION ALL
                                     select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name, cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE ,
                               wallet_name,
                               cif_id ,beneficiryaccountno,MERCHANT_NAME
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND trunc(req.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
                           order by Transaction_Date||Transaction_Time desc
                           ;

    ELSIF p_from_date IS NULL AND p_to_date IS NULL AND ( p_txn_count = 0 OR p_txn_count IS NULL ) AND p_txn_type IS NOT NULL THEN
        dbms_output.put_line('if part 3');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,                            
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type,
                              wallet_name,cif_id ,beneficiryaccountno,MERCHANT_NAME
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                     sys_txn_date,
                                     t.txn_type,
                                      (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                      join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno, d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( t.txn_type = t.txn_type )   
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                  select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,'' MERCHANT_NAME
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_enc=v_hash_no
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,'' MERCHANT_NAME
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                                   UNION ALL
                                     select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,'' MERCHANT_NAME
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                        join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE ,
                               wallet_name,cif_id ,beneficiryaccountno,MERCHANT_NAME
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND typ_name.txn_type = p_txn_type
                          order by Transaction_Date||Transaction_Time desc;

    ELSE
        
		if(p_txn_count is not null) then
		dbms_output.put_line('else part');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,        
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type,wallet_name,cif_id ,beneficiryaccountno,MERCHANT_NAME
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                     sys_txn_date,
                                     t.txn_type,
                                      (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( t.txn_type = t.txn_type )    
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                     (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,'' MERCHANT_NAME
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_Enc=v_hash_no
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,'' MERCHANT_NAME
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                                   UNION ALL
                                     select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,'' MERCHANT_NAME
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                        join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE ,
                                wallet_name,cif_id ,beneficiryaccountno,MERCHANT_NAME
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND rownum1 >= v_first
                           AND rownum1 <= v_last
                           AND trunc(req.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy'
                           )
                           AND typ_name.txn_type = p_txn_type
                          order by Transaction_Date||Transaction_Time desc;
			else
			         OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,         
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type,wallet_name,cif_id ,beneficiryaccountno,MERCHANT_NAME
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                     sys_txn_date,
                                     t.txn_type,
                                      (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                        join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                   sys_txn_date,
                                   t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name,cif_id ,beneficiryaccountno,d.f043 MERCHANT_NAME
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( t.txn_type = t.txn_type )
                                        join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name  ,cif_id ,beneficiryaccountno   ,'' MERCHANT_NAME                                                                   FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_Enc=v_hash_no
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name ,cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number=v_hash_no
                                   UNION ALL
                                   select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type,
                                    (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name ,cif_id ,beneficiryaccountno ,'' MERCHANT_NAME
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                       join  cms_cust_details_extension ccde on ( d.prepaid_account_number =ccde.cust_seq_id )
                                   WHERE
                                       d.card_number =v_hash_no
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE ,
                               wallet_name,cif_id ,beneficiryaccountno,MERCHANT_NAME
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND trunc(req.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
                           AND typ_name.txn_type = p_txn_type
                          order by Transaction_Date||Transaction_Time desc;
		         END if;
						

    END IF;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('In Exception '
                             || sqlcode
                             || ' Error Message: '
                             || sqlerrm);
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_card_status_update(p_file_name character varying, p_batch_no character varying, p_user_id character varying, p_app_rejected_cnt character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

    v_file_cnt       NUMBER := 0;
    v_file_dup_cnt   NUMBER := 0;
    v_card_cnt       NUMBER := 0;
    v_dup_card_cnt   NUMBER := 0;
    v_rejected_cnt   NUMBER := 0;
    v_success_cnt    NUMBER := 0;
    v_reason_cnt     NUMBER := 0;
    v_reason_code    VARCHAR2(5);
    v_exits_reason_code    VARCHAR2(5);
    v_card_status    VARCHAR2(5);
    v_avl_bal        NUMBER :=0;
    v_hold_bal       NUMBER :=0;
    v_closuer_cnt    NUMBER :=0;
    v_prepaid_account_number account_details.account_number%type;
    excep_file_found EXCEPTION;
    excep_file_duplicate EXCEPTION;
BEGIN
    SELECT
        COUNT(1)
    INTO v_file_cnt
    FROM
        cms_card_status_temp ccst
    WHERE
        file_name = p_file_name
        AND batch_no = p_batch_no;

    IF v_file_cnt > 0 THEN
        dbms_output.put_line('inside file upload cnt');
        SELECT
            COUNT(1)
        INTO v_file_dup_cnt
        FROM
            cms_card_status_summary ccss
        WHERE
            file_name = p_file_name
            AND batch_no = p_batch_no;

        IF v_file_dup_cnt = 0 THEN
            dbms_output.put_line('duplicate file not found');
            UPDATE cms_card_status_temp
            SET
                file_uploaded_by = p_user_id;

            FOR cur_rec IN (
                SELECT
                    *
                FROM
                    cms_card_status_temp
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no
                    AND status IS null
                    order by record_no asc
            ) LOOP
                SELECT
                    COUNT(1)
                INTO v_card_cnt
                FROM
                    card_detail
                WHERE
                    card_ref_number = cur_rec.card_ref_number;

                IF v_card_cnt = 0 THEN
                    UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Given card reference not present.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
					Continue;
                END IF;

                SELECT
                    COUNT(1)
                INTO v_dup_card_cnt
                FROM
                    cms_card_status_temp ccst
                WHERE
                    card_ref_number = cur_rec.card_ref_number
                    AND file_name = cur_rec.file_name
                    AND batch_no = cur_rec.batch_no
                    AND status IS NULL;

                IF v_dup_card_cnt > 1 THEN
                    UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Duplicate card reference present in the file.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
					Continue;
                END IF;

                SELECT
                    COUNT(1)
                INTO v_reason_cnt
                FROM
                    cms_hotlist_reason_code
                WHERE
                    reason_code = cur_rec.reason_code
                    and card_type=cur_rec.card_status;
                   

                IF v_reason_cnt = 0 THEN
                    UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Invalid reason code.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND reason_code = cur_rec.reason_code
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
					Continue;
                ELSE
                    SELECT
                        reason_code
                    INTO v_reason_code
                    FROM
                        cms_hotlist_reason_code chrc
                    WHERE
                        reason_code = cur_rec.reason_code;
                  

                END IF;

                SELECT
                    status,reason_code
                INTO v_card_status,v_exits_reason_code
                FROM
                    card_detail
                WHERE
                    card_ref_number = cur_rec.card_ref_number;
              

      if cur_rec.reason_code='08'   and cur_rec.card_status ='PHL' and cur_rec.reason_code != v_exits_reason_code and cur_rec.status is null then 
          		
                UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Transaction Declined to perform account closure.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND reason_code = cur_rec.reason_code
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
					Continue;
                 end if;
      
                   
                   
                   select available_balance,hold_balance,account_number into v_avl_bal,v_hold_bal,v_prepaid_account_number from account_details ad  where ad.account_number in(select prep_account_number from card_detail where card_ref_number=cur_rec.card_ref_number);               
--Code commented due to decline card closure bank request                       
                if cur_rec.reason_code='08'   and cur_rec.card_status ='PHL' and cur_rec.reason_code != v_exits_reason_code and cur_rec.status is null then 
               
                if (v_avl_bal!=0 or v_hold_bal!=0) then 
					
                UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Card Closuer account balance is not zero.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND reason_code = cur_rec.reason_code
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
					Continue;
                
                end if;
                end if;
               
                   
                IF v_card_status = 'THL' and v_exits_reason_code !='07' AND cur_rec.card_status ='A' and cur_rec.status is null then 
                                   DBMS_OUTPUT.PUT_LINE('inside 05');

                UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Not allowed to active the card.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND reason_code = cur_rec.reason_code
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + sql%rowcount;        
                
                end if;
               
               
               if v_card_status = 'A'  and cur_rec.card_status='THL' and cur_rec.reason_code !='07' then 

 				dbms_output.put_line('Unable to allow the block the card.');               
               UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Not allowed to block the card due to reason code.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND reason_code = cur_rec.reason_code
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

               
                    v_rejected_cnt := v_rejected_cnt + sql%rowcount;        

               end if;
                   
                    
                IF  cur_rec.reason_code ='08' and cur_rec.card_status ='PHL' and cur_rec.reason_code != v_exits_reason_code and cur_rec.status is null THEN
                   DBMS_OUTPUT.PUT_LINE('inside 08 blocked');
                
                                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'PHL',
                                reason_code = nvl(v_reason_code, cur_rec.reason_code),
                                card_closure_date =sysdate,
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;
                         
                               
                               
                              UPDATE cms_cust_details 
                            SET
                                employee_active_status ='D',
                                employee_active_status_date =sysdate,
                                employee_deactive_status_date =sysdate,
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                prepaid_account_number = v_prepaid_account_number;
                           
---insert into last_action_on card              
                             
						insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'PH',nvl(v_reason_code, cur_rec.reason_code));                  

--insert into history table

                            INSERT INTO cms_card_detail_history (
                                old_pan,
                                new_pan,
                                cust_name,
                                status_flag,
                                serial_no,
                                insert_time,
                                email_time,
                                remark,
                                channel_id,
                                pin_offset,
                                reason_code,
                                caf_flag,
                                caf_generated_by,
                                caf_generation_date,
                                caf_eligibility,
                                cust_seq,
                                old_mask_card_no,
                                new_mask_card_no,
                                new_card_ref_number,
                                old_card_ref_number,
                                card_ref_number
                            )
                                SELECT
                                    a.hash_card_number,
                                    a.hash_card_number,
                                    b.first_name
                                    || ' '
                                    || b.last_name,
                                    'PHL',
                                    serial_no_seq.NEXTVAL,
                                    sysdate,
                                    sysdate,
                                    NULL,
                                    0,
                                    NULL,
                                    nvl(v_reason_code, cur_rec.reason_code),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    a.cust_seq_id,
                                    c.mask_card_number,
                                    c.mask_card_number,
                                    a.card_ref_number,
                                    a.card_ref_number,
                                    a.card_ref_number
                                FROM
                                    card_detail                 a,
                                    cms_cust_details            b,
                                    cms_card_detail_extention   c
                                WHERE
                                    a.card_ref_number = c.card_ref_no
                                    AND a.cust_seq_id = b.cust_seq_id
                                    AND a.card_ref_number = cur_rec.card_ref_number;

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
 
                
                end if;
 
                IF v_card_status != cur_rec.card_status and cur_rec.reason_code !='08' THEN
                        DBMS_OUTPUT.PUT_LINE('inside 08');

--code for the change status and 
                    IF v_card_status = 'PHL' AND cur_rec.card_status IN (
                        'INA',
                        'A',
                        'THL'
                    ) and cur_rec.status is null THEN
                                                              DBMS_OUTPUT.PUT_LINE('inside phl');

                        UPDATE cms_card_status_temp
                        SET
                            status = 'N',
                            remark = 'Current card status is PHL'
                        WHERE
                            card_ref_number = cur_rec.card_ref_number
                            AND file_name = cur_rec.file_name
                            AND batch_no = cur_rec.batch_no
                            AND status IS NULL;

                        v_rejected_cnt := v_rejected_cnt + 1;
                        
                    ELSIF v_card_status = 'INA' AND cur_rec.card_status IN (
--                        'A',
                        'PHL'
--                        ,'THL'
                    ) and cur_rec.status is null THEN
                                          DBMS_OUTPUT.PUT_LINE('inside INA');

                        IF cur_rec.card_status = 'A' THEN
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'A',
                                card_activated_on = sysdate,
                                updated_by = cur_rec.file_uploaded_by,
                                reason_code='00',
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;

                           insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'DH','00');                  
    
                               
                               
                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        ELSIF cur_rec.card_status = 'PHL' THEN
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'PHL',
                                reason_code = nvl(v_reason_code, cur_rec.reason_code),
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;

                               insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'PH',nvl(v_reason_code, cur_rec.reason_code));                  

--insert into history table

                            INSERT INTO cms_card_detail_history (
                                old_pan,
                                new_pan,
                                cust_name,
                                status_flag,
                                serial_no,
                                insert_time,
                                email_time,
                                remark,
                                channel_id,
                                pin_offset,
                                reason_code,
                                caf_flag,
                                caf_generated_by,
                                caf_generation_date,
                                caf_eligibility,
                                cust_seq,
                                old_mask_card_no,
                                new_mask_card_no,
                                new_card_ref_number,
                                old_card_ref_number,
                                card_ref_number
                            )
                                SELECT
                                    a.hash_card_number,
                                    a.hash_card_number,
                                    b.first_name
                                    || ' '
                                    || b.last_name,
                                    'PHL',
                                    serial_no_seq.NEXTVAL,
                                    sysdate,
                                    sysdate,
                                    NULL,
                                    0,
                                    NULL,
                                    nvl(v_reason_code, cur_rec.reason_code),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    a.cust_seq_id,
                                    c.mask_card_number,
                                    c.mask_card_number,
                                    a.card_ref_number,
                                    a.card_ref_number,
                                    a.card_ref_number
                                FROM
                                    card_detail                 a,
                                    cms_cust_details            b,
                                    cms_card_detail_extention   c
                                WHERE
                                    a.card_ref_number = c.card_ref_no
                                    AND a.cust_seq_id = b.cust_seq_id
                                    AND a.card_ref_number = cur_rec.card_ref_number;

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        ELSIF cur_rec.card_status = 'THL' THEN
                      DBMS_OUTPUT.PUT_LINE('inside thl');
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'THL',
                                reason_code = nvl(v_reason_code, cur_rec.reason_code),
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;
							
                            insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'TH');                  
   
--insert into history table

                            INSERT INTO cms_card_detail_history (
                                old_pan,
                                new_pan,
                                cust_name,
                                status_flag,
                                serial_no,
                                insert_time,
                                email_time,
                                remark,
                                channel_id,
                                pin_offset,
                                reason_code,
                                caf_flag,
                                caf_generated_by,
                                caf_generation_date,
                                caf_eligibility,
                                cust_seq,
                                old_mask_card_no,
                                new_mask_card_no,
                                new_card_ref_number,
                                old_card_ref_number,
                                card_ref_number
                            )
                                SELECT
                                    a.hash_card_number,
                                    a.hash_card_number,
                                    b.first_name
                                    || ' '
                                    || b.last_name,
                                    'THL',
                                    serial_no_seq.NEXTVAL,
                                    sysdate,
                                    sysdate,
                                    NULL,
                                    0,
                                    NULL,
                                    nvl(v_reason_code, cur_rec.reason_code),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    a.cust_seq_id,
                                    c.mask_card_number,
                                    c.mask_card_number,
                                    a.card_ref_number,
                                    a.card_ref_number,
                                    a.card_ref_number
                                FROM
                                    card_detail                 a,
                                    cms_cust_details            b,
                                    cms_card_detail_extention   c
                                WHERE
                                    a.card_ref_number = c.card_ref_no
                                    AND a.cust_seq_id = b.cust_seq_id
                                    AND a.card_ref_number = cur_rec.card_ref_number;

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        END IF;
                    ELSIF v_card_status = 'A' AND cur_rec.card_status IN (
                        'THL',
                        'PHL'
                    ) and  cur_rec.status is null THEN
                        IF cur_rec.card_status = 'PHL' THEN
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'PHL',
                                reason_code = nvl(v_reason_code, cur_rec.reason_code),
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;
							
                            insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'PH',nvl(v_reason_code, cur_rec.reason_code));                  
   
--insert into history table

                            INSERT INTO cms_card_detail_history (
                                old_pan,
                                new_pan,
                                cust_name,
                                status_flag,
                                serial_no,
                                insert_time,
                                email_time,
                                remark,
                                channel_id,
                                pin_offset,
                                reason_code,
                                caf_flag,
                                caf_generated_by,
                                caf_generation_date,
                                caf_eligibility,
                                cust_seq,
                                old_mask_card_no,
                                new_mask_card_no,
                                new_card_ref_number,
                                old_card_ref_number,
                                card_ref_number
                            )
                                SELECT
                                    a.hash_card_number,
                                    a.hash_card_number,
                                    b.first_name
                                    || ' '
                                    || b.last_name,
                                    'PHL',
                                    serial_no_seq.NEXTVAL,
                                    sysdate,
                                    sysdate,
                                    NULL,
                                    0,
                                    NULL,
                                    nvl(v_reason_code, cur_rec.reason_code),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    a.cust_seq_id,
                                    c.mask_card_number,
                                    c.mask_card_number,
                                    a.card_ref_number,
                                    a.card_ref_number,
                                    a.card_ref_number
                                FROM
                                    card_detail                 a,
                                    cms_cust_details            b,
                                    cms_card_detail_extention   c
                                WHERE
                                    a.card_ref_number = c.card_ref_no
                                    AND a.cust_seq_id = b.cust_seq_id
                                    AND a.card_ref_number = cur_rec.card_ref_number;

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        ELSIF cur_rec.card_status = 'THL' and cur_rec.reason_code='07' THEN
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'THL',
                                reason_code = nvl(v_reason_code, cur_rec.reason_code),
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;
                               
                               
                               insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'TH',nvl(v_reason_code, cur_rec.reason_code));                  


--insert into history table

                            INSERT INTO cms_card_detail_history (
                                old_pan,
                                new_pan,
                                cust_name,
                                status_flag,
                                serial_no,
                                insert_time,
                                email_time,
                                remark,
                                channel_id,
                                pin_offset,
                                reason_code,
                                caf_flag,
                                caf_generated_by,
                                caf_generation_date,
                                caf_eligibility,
                                cust_seq,
                                old_mask_card_no,
                                new_mask_card_no,
                                new_card_ref_number,
                                old_card_ref_number,
                                card_ref_number
                            )
                                SELECT
                                    a.hash_card_number,
                                    a.hash_card_number,
                                    b.first_name
                                    || ' '
                                    || b.last_name,
                                    'THL',
                                    serial_no_seq.NEXTVAL,
                                    sysdate,
                                    sysdate,
                                    NULL,
                                    0,
                                    NULL,
                                    nvl(v_reason_code, cur_rec.reason_code),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    a.cust_seq_id,
                                    c.mask_card_number,
                                    c.mask_card_number,
                                    a.card_ref_number,
                                    a.card_ref_number,
                                    a.card_ref_number
                                FROM
                                    card_detail                 a,
                                    cms_cust_details            b,
                                    cms_card_detail_extention   c
                                WHERE
                                    a.card_ref_number = c.card_ref_no
                                    AND a.cust_seq_id = b.cust_seq_id
                                    AND a.card_ref_number = cur_rec.card_ref_number;

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        END IF;
                    ELSIF v_card_status = 'THL' AND cur_rec.card_status IN (
                        'A',
                        'PHL'
                    ) and cur_rec.status is null then
                    
                    DBMS_OUTPUT.PUT_LINE('inside thl active');
                        IF cur_rec.card_status = 'A' and  v_exits_reason_code ='07' THEN
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'A',
                                card_activated_on = sysdate,
                                reason_code='00',
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;
                               
                              insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'DH',nvl(v_reason_code, cur_rec.reason_code));                  
 

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        ELSIF cur_rec.card_status = 'PHL' THEN
                            INSERT INTO card_detail_history (
                                bin,
                                expiry_date,
                                card_number,
                                product_id,
                                pin_offset,
                                service_code,
                                status,
                                pan_seq_no,
                                cvv_1_flag,
                                cvv_2_flag,
                                i_cvv_flag,
                                on_boarded_by,
                                on_boarded_date,
                                recard_flag,
                                old_card_no,
                                pin_gen_method,
                                form_factor,
                                txn_auth_profile_flag,
                                customer_profile_flag,
                                card_profile_flag,
                                txn_profile_flag,
                                fee_profile_flag,
                                merchant_profile_flag,
                                balance_profile_flag,
                                usage_profile_flag,
                                valid_thru,
                                valid_from,
                                online_bal,
                                offline_bal_on_host,
                                chip_offline_bal,
                                daily_usage_amt,
                                daily_usage_cnt,
                                monthly_usage_amt,
                                monthly_usage_cnt,
                                yearly_usage_amt,
                                yearly_usage_cnt,
                                mobile_no,
                                email_id,
                                issuer_id,
                                branch_id,
                                customer_name,
                                embossname,
                                column_3,
                                column_4,
                                column_5,
                                column_6,
                                column_7,
                                column_8,
                                column_9,
                                column_10,
                                created_date,
                                updated_date,
                                created_by,
                                updated_by,
                                cust_ref_no,
                                prep_account_number,
                                cust_seq_id,
                                reason_code,
                                pin_status,
                                card_activated_on,
                                last_updated_on_host,
                                card_offline_bal,
                                offline_bal,
                                shadow_bal,
                                hot_list_desc_code,
                                hot_list_type,
                                id,
                                batch_no,
                                instance_issuance_flag,
                                response,
                                renewal_flag,
                                replacement_flag,
                                hash_card_number,
                                card_ref_number,
                                enrypted_card_no,
                                outlet_id,
                                mask_card_no,
                                is_instant,
                                fee_amount,
                                initial_load_done,
                                afcs_hash_number,
                                old_offset,
                                gst_rate,
                                net_host_balance,
                                max_balance_max_kyc,
                                max_balance_min_kyc,
                                kyc_type,
                                is_first_topup_done,
                                monthly_topup_limit_max_kyc,
                                monthly_topup_limit_min_kyc,
                                monthly_txn_count_max_kyc,
                                monthly_txn_count_min_kyc,
                                yearly_topup_limit_max_kyc,
                                yearly_topup_limit_min_kyc,
                                yearly_txn_count_max_kyc,
                                yearly_txn_count_min_kyc,
                                pin_try_count,
                                last_pin_failed_time,
                                his_id,
                                insert_time
                            )
                                SELECT
                                    bin,
                                    expiry_date,
                                    card_number,
                                    product_id,
                                    pin_offset,
                                    service_code,
                                    status,
                                    pan_seq_no,
                                    cvv_1_flag,
                                    cvv_2_flag,
                                    i_cvv_flag,
                                    on_boarded_by,
                                    on_boarded_date,
                                    recard_flag,
                                    old_card_no,
                                    pin_gen_method,
                                    form_factor,
                                    txn_auth_profile_flag,
                                    customer_profile_flag,
                                    card_profile_flag,
                                    txn_profile_flag,
                                    fee_profile_flag,
                                    merchant_profile_flag,
                                    balance_profile_flag,
                                    usage_profile_flag,
                                    valid_thru,
                                    valid_from,
                                    online_bal,
                                    offline_bal_on_host,
                                    chip_offline_bal,
                                    daily_usage_amt,
                                    daily_usage_cnt,
                                    monthly_usage_amt,
                                    monthly_usage_cnt,
                                    yearly_usage_amt,
                                    yearly_usage_cnt,
                                    mobile_no,
                                    email_id,
                                    issuer_id,
                                    branch_id,
                                    customer_name,
                                    embossname,
                                    column_3,
                                    column_4,
                                    column_5,
                                    column_6,
                                    column_7,
                                    column_8,
                                    column_9,
                                    column_10,
                                    created_date,
                                    updated_date,
                                    created_by,
                                    updated_by,
                                    cust_ref_no,
                                    prep_account_number,
                                    cust_seq_id,
                                    reason_code,
                                    pin_status,
                                    card_activated_on,
                                    last_updated_on_host,
                                    card_offline_bal,
                                    offline_bal,
                                    shadow_bal,
                                    hot_list_desc_code,
                                    hot_list_type,
                                    id,
                                    batch_no,
                                    instance_issuance_flag,
                                    response,
                                    renewal_flag,
                                    replacement_flag,
                                    hash_card_number,
                                    card_ref_number,
                                    enrypted_card_no,
                                    outlet_id,
                                    mask_card_no,
                                    is_instant,
                                    fee_amount,
                                    initial_load_done,
                                    afcs_hash_number,
                                    old_offset,
                                    gst_rate,
                                    net_host_balance,
                                    max_balance_max_kyc,
                                    max_balance_min_kyc,
                                    kyc_type,
                                    is_first_topup_done,
                                    monthly_topup_limit_max_kyc,
                                    monthly_topup_limit_min_kyc,
                                    monthly_txn_count_max_kyc,
                                    monthly_txn_count_min_kyc,
                                    yearly_topup_limit_max_kyc,
                                    yearly_topup_limit_min_kyc,
                                    yearly_txn_count_max_kyc,
                                    yearly_txn_count_min_kyc,
                                    pin_try_count,
                                    last_pin_failed_time,
                                    seq_card_details_his_id.NEXTVAL AS his_id,
                                    systimestamp insert_time
                                FROM
                                    card_detail
                                WHERE
                                    card_ref_number = cur_rec.card_ref_number;

                            UPDATE card_detail
                            SET
                                status = 'PHL',
                                reason_code = nvl(v_reason_code, cur_rec.reason_code),
                                updated_by = cur_rec.file_uploaded_by,
                                updated_date = sysdate
                            WHERE
                                card_ref_number = cur_rec.card_ref_number;
							
                               insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(cur_rec.card_ref_number,v_card_status,sysdate,p_file_name,v_prepaid_account_number, 'PH',nvl(v_reason_code, cur_rec.reason_code));                  

--insert into history table

                            INSERT INTO cms_card_detail_history (
                                old_pan,
                                new_pan,
                                cust_name,
                                status_flag,
                                serial_no,
                                insert_time,
                                email_time,
                                remark,
                                channel_id,
                                pin_offset,
                                reason_code,
                                caf_flag,
                                caf_generated_by,
                                caf_generation_date,
                                caf_eligibility,
                                cust_seq,
                                old_mask_card_no,
                                new_mask_card_no,
                                new_card_ref_number,
                                old_card_ref_number,
                                card_ref_number
                            )
                                SELECT
                                    a.hash_card_number,
                                    a.hash_card_number,
                                    b.first_name
                                    || ' '
                                    || b.last_name,
                                    'PHL',
                                    serial_no_seq.NEXTVAL,
                                    sysdate,
                                    sysdate,
                                    NULL,
                                    0,
                                    NULL,
                                    nvl(v_reason_code, cur_rec.reason_code),
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    a.cust_seq_id,
                                    c.mask_card_number,
                                    c.mask_card_number,
                                    a.card_ref_number,
                                    a.card_ref_number,
                                    a.card_ref_number
                                FROM
                                    card_detail                 a,
                                    cms_cust_details            b,
                                    cms_card_detail_extention   c
                                WHERE
                                    a.card_ref_number = c.card_ref_no
                                    AND a.cust_seq_id = b.cust_seq_id
                                    AND a.card_ref_number = cur_rec.card_ref_number;

                            UPDATE cms_card_status_temp
                            SET
                                status = 'Y',
                                remark = 'SUCCESS'
                            WHERE
                                card_ref_number = cur_rec.card_ref_number
                                AND file_name = p_file_name
                                AND batch_no = p_batch_no
                                AND status IS NULL;

                            v_success_cnt := v_success_cnt + 1;
                        END IF;
                        ELSE 
                        
                        UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Not allowed changed status.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                    END IF;
                ELSE
                    UPDATE cms_card_status_temp
                    SET
                        status = 'N',
                        remark = 'Not allowed changed status.'
                    WHERE
                        card_ref_number = cur_rec.card_ref_number
                        AND file_name = cur_rec.file_name
                        AND batch_no = cur_rec.batch_no
                        AND status IS NULL;

                    v_rejected_cnt := v_rejected_cnt + 1;
                END IF;

            END LOOP;

            INSERT INTO cms_card_status_history (
                id,
                card_ref_number,
                card_status,
                reason_code,
                remark,
                simba_id,
                file_name,
                batch_no,
                raw_data,
                status,
                file_uploaded_by,
                file_uploaded_date,
                record_no
            )
                SELECT
                    id,
                    card_ref_number,
                    card_status,
                    reason_code,
                    remark,
                    simba_id,
                    file_name,
                    batch_no,
                    raw_data,
                    status,
                    file_uploaded_by,
                    file_uploaded_date,
                    record_no 
                FROM
                    cms_card_status_temp
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no;

            INSERT INTO cms_card_status_summary (
                id,
                file_name,
                total_count,
                success_count,
                reject_count,
                batch_no,
                file_uploaded_by,
                file_uploaded_date
            ) VALUES (
                ( seq_card_status_summary_id.NEXTVAL ),
                p_file_name,
                v_file_cnt + p_app_rejected_cnt,
                v_success_cnt,
                v_rejected_cnt + p_app_rejected_cnt,
                p_batch_no,
                p_user_id,
                sysdate
            );

            p_out := '00';
            p_msg := 'File processed sccessfully.';
        ELSE
            RAISE excep_file_duplicate;
        END IF;

    ELSE
        RAISE excep_file_found;
    END IF;

EXCEPTION
    WHEN excep_file_found THEN
        p_out := '01';
        p_msg := 'File is not uploaded successfully.';
    WHEN excep_file_duplicate THEN
        p_out := '01';
        p_msg := 'Duplicate file name found.';
    WHEN OTHERS THEN
        p_out := '01';
        p_msg := 'File is not uploaded successfully.'
                 || sqlerrm
                 || sqlcode;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_country_whitelist_process(p_file_name character varying, p_batch_no character varying, p_user_id character varying, p_app_rejected_cnt character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_file_cnt number:=0;
v_file_dup_cnt number :=0;
v_card_cnt number :=0;
v_dup_card_cnt number :=0;
v_rejected_cnt number :=0;
v_success_cnt number :=0;
v_reason_cnt number :=0;
v_mast_card_cnt number:=0;
v_blacklist_cnt number:=0;
v_valid_card_cnt number :=0;
v_cust_seq_id varchar(50);
v_nationality varchar(50);
v_card_status_cnt number:=0;
v_card_present_cnt number :=0;
v_emp_disable_cnt number :=0;
v_employer_dis_cnt number:=0;
excep_file_found exception;
excep_file_duplicate exception;

begin 
	
select count(1) into v_file_cnt from  cms_country_whitelist_temp where file_name=p_file_name and batch_no=p_batch_no;

dbms_output.put_line('v_file_cnt'||v_file_cnt);

if v_file_cnt > 0 then
dbms_output.put_line('v_file_cnt'||v_file_cnt);

select count(1) into v_file_dup_cnt from cms_country_whitelist_summary where file_name=p_file_name;
dbms_output.put_line('v_file_dup_cnt'||v_file_dup_cnt);

if v_file_dup_cnt =0 then
dbms_output.put_line('v_file_dup_cnt'||v_file_dup_cnt);

update cms_country_whitelist_temp set file_uploaded_by=p_user_id;

for cur_rec in (select * from cms_country_whitelist_temp where file_name=p_file_name and batch_no=p_batch_no and status is null order by record_no asc)
Loop


select count(1) into v_card_present_cnt from card_detail where card_ref_number=cur_rec.card_ref_number;

if v_card_present_cnt = 0 then

    update cms_country_whitelist_temp set status='N' , remarks='Invalid Card reference number' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;
    v_rejected_cnt := v_rejected_cnt + 1;

end if;



select count(1) into v_card_cnt from cms_country_whitelist_temp where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;
dbms_output.put_line('v_card_cnt'||v_card_cnt);

if v_card_cnt > 1 then 
dbms_output.put_line('v_card_cnt'||v_card_cnt);
update cms_country_whitelist_temp set status='N' , remarks='Duplicate card reference number in the file.' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;
v_rejected_cnt := v_rejected_cnt + 1;
end if;


--code committed due allowed the blacklist country.
--select count(1) into v_blacklist_cnt from cms_country_whitelist_temp ccw  where card_ref_number=cur_rec.card_ref_number
--and (country_list like '%IRN%' or country_list like '%SYR%' or country_list like 'UKR' or country_list like '%PRK%')
--and status is null;
--
--if v_blacklist_cnt > 0 then
--
--dbms_output.put_line('v_blacklist_cnt'||v_mast_card_cnt);
--update cms_country_whitelist_temp set status='N' , remarks='Blacklisted Country Code' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;
--v_rejected_cnt := v_rejected_cnt + 1;
--dbms_output.put_line('v_rejected_cnt'||v_rejected_cnt);
--end if;


select count(1) into v_card_status_cnt from  card_detail where card_ref_number=cur_rec.card_ref_number and status not in('A','INA');

if v_card_status_cnt > 0 then
dbms_output.put_line('v_card_status_cnt '||v_card_status_cnt );

update cms_country_whitelist_temp set status='N' , remarks='Card is inactive.' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

v_rejected_cnt := v_rejected_cnt + 1;
end if;

--check employee disable

select count(1) into v_emp_disable_cnt from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id)
where cd.card_ref_number= cur_rec.card_ref_number and cust.employee_active_status ='D';

if v_emp_disable_cnt > 0 then

dbms_output.put_line('v_card_status_cnt '||v_card_status_cnt );

update cms_country_whitelist_temp set status='N' , remarks='employee is disabled.' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

v_rejected_cnt := v_rejected_cnt + 1;

end if;



--check employer disable 

select count(1) into v_employer_dis_cnt from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id)
join corporate corp on(cust.employer_id=corp.employer_id)
where cd.card_ref_number= cur_rec.card_ref_number and corp.status ='D';

if v_employer_dis_cnt > 0 then

dbms_output.put_line('v_card_status_cnt '||v_card_status_cnt );

update cms_country_whitelist_temp set status='N' , remarks='employer is disabled.' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

v_rejected_cnt := v_rejected_cnt + 1;

end if;






select count(1) into v_mast_card_cnt from cms_country_whitelist ccw join cms_country_whitelist_temp temp
on(ccw.card_ref_no=temp.card_ref_number)
where ccw.card_ref_no=cur_rec.card_ref_number
and temp.status is null;

dbms_output.put_line('v_mast_card_cnt'||v_mast_card_cnt);

if v_mast_card_cnt = 0 then

--insert

INSERT INTO cms_country_whitelist
(card_ref_no, country_list, nationality, entry_date, update_date, updated_by)
select temp.card_ref_number,temp.country_list,cust.nationality,sysdate,sysdate,p_user_id from cms_country_whitelist_temp temp join card_detail cd on(temp.card_ref_number=cd.card_ref_number)
join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id) where temp.card_ref_number =cur_rec.card_ref_number
and temp.file_name =cur_rec.file_name and temp.batch_no =cur_rec.batch_no and temp.status is null;
dbms_output.put_line('COUNTRY WHILET COUNT '||sql%ROWCOUNT);


update cms_country_whitelist_temp set status='Y', remarks='SUCCESS' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

if sql%rowcount > 0 then 
v_success_cnt :=v_success_cnt + 1;
end if;

else 

update cms_country_whitelist set country_list =cur_rec.country_list , update_date=sysdate, updated_by=cur_rec.file_uploaded_by where card_ref_no=cur_rec.card_ref_number;
dbms_output.put_line('country_list update '||sql%rowcount);

insert into cms_country_whitelist_master (card_ref_no,country_list,nationality,entry_date,update_date,updated_by,insert_date) 
select card_ref_no,country_list,nationality,entry_date,update_date,updated_by,sysdate from cms_country_whitelist where card_ref_no=cur_rec.card_ref_number;

update cms_country_whitelist_temp set status='Y', remarks='SUCCESS' where card_ref_number=cur_rec.card_ref_number and file_name=cur_rec.file_name and batch_no=cur_rec.batch_no and status is null;

v_success_cnt :=v_success_cnt + 1;


end if;

end loop;

insert into cms_country_whitelist_history 
(
card_ref_number ,
simba_id ,
country_list ,
raw_date ,
file_name ,
batch_no ,
file_uploaded_by ,
file_uploaded_date,
status,
remarks,
record_no 
)
select 
card_ref_number ,
simba_id ,
country_list ,
raw_date ,
file_name ,
batch_no ,
file_uploaded_by ,
file_uploaded_date,
status,
remarks,
record_no 
from cms_country_whitelist_temp where file_name=p_file_name and batch_no=p_batch_no;

insert into cms_country_whitelist_summary 
(
	id ,
	file_name ,
	total_count ,
	success_count ,
	rejected_count ,
	batch_no ,
	file_uploaded_by ,
	file_uploaded_date 
)
values 
(
	(seq_country_white_summary_id.nextval),
	p_file_name,
	v_file_cnt + p_app_rejected_cnt,
	v_success_cnt,
	v_rejected_cnt + p_app_rejected_cnt,
	p_batch_no,
	p_user_id,
	sysdate
);

p_out:='00';

p_msg :='File processed sccessfully.';

dbms_output.put_line('p_out  '||p_out||' p_msg '||p_msg);

else 

raise excep_file_duplicate;

end if ;

else 

raise  excep_file_found;

end if;

exception
when excep_file_found then

p_out :='01';

p_msg :='File is not uploaded successfully.';

when excep_file_duplicate then

p_out :='01';

p_msg :='Duplicate file name found.';
	

when others then

p_out :='01';

p_msg :='File is not uploaded successfully.';

dbms_output.put_line('sqlcode  '||sqlcode||' sqlerrm '||sqlerrm);

end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_deduct_issuance_fee(p_card_ref_number character varying, p_txn_type character varying, p_identifier character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 
v_card_cnt numeric :=0;
v_group_waiver_id character varying(10);
v_waiver_cnt numeric :=0;
v_last_action_cnt numeric:=0;
v_fee_cnt numeric :=0;
v_prep_account_number card_detail.prep_account_number%type;
v_hash_card_number card_detail.hash_card_number%type;
v_fee_amt cms_card_fee_config.amount%type;
v_frequency pcs_fee_waiver.frequency%type;
v_txn_count pcs_fee_waiver.txn_count%type;
v_avl_bal account_details.available_balance%type;
v_hold_bal account_details.hold_balance%type;
v_curr_bal account_details.current_balance%type;
v_resp_code character varying(10);
v_resp_msg character varying(1000);
v_settle_flag cs_fee_temp.settle_flag%type;
v_vat_fee  numeric :=0;
v_total_vat_fee numeric(10,2) :=0;
v_total_fee numeric(10,2) :=0;
v_prev_bal numeric :=0;
begin

select count(1) into v_card_cnt from card_detail cd join cms_cust_details cust on(cd.prep_account_number=prepaid_account_number)
join corporate c  on(cust.employer_id=c.employer_id)
where cd.card_ref_number=p_card_ref_number;

dbms_output.put_line('card account '||v_card_cnt);
	
if v_card_cnt > 0 then
dbms_output.put_line('Inside card cnt ');
select c.group_id, cd.prep_account_number,cd.hash_card_number into v_group_waiver_id,v_prep_account_number,v_hash_card_number from card_detail cd join cms_cust_details cust on(cd.prep_account_number=prepaid_account_number)
join corporate c  on(cust.employer_id=c.employer_id)
where cd.card_ref_number=p_card_ref_number;

dbms_output.put_line('Inside card cnt  v_group_waiver_id '||v_group_waiver_id);
select count(1) into v_waiver_cnt from pcs_fee_waiver pfw  where txn_type=p_txn_type and group_id =v_group_waiver_id;

if v_waiver_cnt > 0 then


select frequency, txn_count into v_frequency , v_txn_count from pcs_fee_waiver where txn_type=p_txn_type and group_id=v_group_waiver_id;
dbms_output.put_line('frequency and txn count : '||v_frequency||v_txn_count);
if v_frequency in ('1','2','3','4') then


select count(1) into v_last_action_cnt from action_on_card aoc where  prepaid_account_number=v_prep_account_number and action_flag=p_identifier
and trunc(action_date) >= decode (v_frequency,'1',trunc(sysdate),'2',date_trunc('week', sysdate),'3',date_trunc('month', sysdate),'4',date_trunc('year', sysdate));
dbms_output.put_line('v_last_action_cnt '||v_last_action_cnt);
if  v_last_action_cnt >= v_txn_count then

--fee deduction on card 
dbms_output.put_line('Inside fee deduction on card ');

select count(1) into v_fee_cnt from cms_card_fee_config where txn_type=p_txn_type and card_ref_number=p_card_ref_number;

if v_fee_cnt > 0 then

select amount into v_fee_amt from cms_card_fee_config where txn_type=p_txn_type and card_ref_number=p_card_ref_number;


fee_vat_calculation(v_fee_amt ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;

dbms_output.put_line('v_totol_vat_fee '||v_vat_fee||' v_flat_fee_amount '||v_fee_amt);



v_total_fee:=v_fee_amt  + v_total_vat_fee;



dbms_output.put_line('fee amount '||v_total_fee);
         dbms_output.put_line('before account update proc call '||v_hash_card_number);

      account_balance_update(v_hash_card_number,v_total_fee,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code ='00' then 
   
dbms_output.put_line('inside fee update');   
    INSERT INTO cs_fee_temp (
        date_time,
        fee_description,
        card_number,
        fee_amt,
        rrn,
        reversal_flag,
        settle_date,
        acc_flag,
        fee_ind,
        acc_date,
        seq_id,
        balance_update_flag,
        balance_update_date,
        bal_update_flag_ruk,
        bal_update_date_ruk,
        rev_org_seq_id,
            -- tid,
        stan,
        batch_number,
        ticket_id,
        entry_date_time,
        drcr,
        bal_update_settl_flag,
        bal_update_settl_date,
        available_balance,
        hold_balance,
        current_balance,
        settle_flag,
        prepaid_account_number,
        mark_up_fee ,
        vat_fee ,
        previous_balance
    ) VALUES (
        sysdate,
        (select txn_name from transaction_type where txn_type=p_txn_type),
        v_hash_card_number,
        v_total_fee,
        lpad(cs_fee_temp_rrn.NEXTVAL,16,'0'),
        NULL,
        case when v_settle_flag='Y' then sysdate else null end,
        NULL,
        p_txn_type,
        NULL,
        to_char(sysdate, 'DDMONYY')
        || '.'
        || lpad(cs_fee_temp_seq.NEXTVAL, 8, '0'),
        'N',
        NULL,
        'N',
        NULL,
        NULL,
            --p_outlet_id,
        NULL,
        NULL,
        NULL,
        sysdate,
        'Dr',
        NULL,
        null,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_settle_flag,
        v_prep_account_number,
        0,
        v_total_vat_fee,
        v_prev_bal
    );

p_out:='00';

p_msg:='Success';

dbms_output.put_line('Success ');

else 

 p_out:='01';

p_msg:='Account balance update failed';

dbms_output.put_line('Success ');

end if;
else 

p_out:='00';

p_msg:='Success';

--success becuase fee can add or delete

dbms_output.put_line('fee is not configured ');

end if;

else 


p_out:='00';

p_msg:='Success';

end if;


end if;

else 

dbms_output.put_line('No waiver applied on card ');
--no waiver applied on card 


select count(1) into v_fee_cnt from cms_card_fee_config where txn_type=p_txn_type and card_ref_number=p_card_ref_number;
if v_fee_cnt > 0 then

select amount into v_fee_amt from cms_card_fee_config where txn_type=p_txn_type and card_ref_number=p_card_ref_number;

fee_vat_calculation(v_fee_amt ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;

dbms_output.put_line('v_totol_vat_fee '||v_vat_fee||' v_flat_fee_amount '||v_fee_amt);

v_total_fee:=v_fee_amt  + v_total_vat_fee;


dbms_output.put_line('fee amount '||v_total_fee);

         dbms_output.put_line('before account update proc call '||v_hash_card_number);

      account_balance_update(v_hash_card_number,v_total_fee,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code ='00' then 
   
dbms_output.put_line('inside fee update');   
    INSERT INTO cs_fee_temp (
        date_time,
        fee_description,
        card_number,
        fee_amt,
        rrn,
        reversal_flag,
        settle_date,
        acc_flag,
        fee_ind,
        acc_date,
        seq_id,
        balance_update_flag,
        balance_update_date,
        bal_update_flag_ruk,
        bal_update_date_ruk,
        rev_org_seq_id,
            -- tid,
        stan,
        batch_number,
        ticket_id,
        entry_date_time,
        drcr,
        bal_update_settl_flag,
        bal_update_settl_date,
        available_balance,
        hold_balance,
        current_balance,
        settle_flag,
        prepaid_account_number,
        mark_up_fee ,
        vat_fee ,
        previous_balance
    ) VALUES (
        sysdate,
        (select txn_name from transaction_type where txn_type=p_txn_type),
        v_hash_card_number,
        v_total_fee,
        lpad(cs_fee_temp_rrn.NEXTVAL,16,'0'),
        NULL,
        case when v_settle_flag='Y' then sysdate else null end,
        NULL,
        p_txn_type,
        NULL,
        to_char(sysdate, 'DDMONYY')
        || '.'
        || lpad(cs_fee_temp_seq.NEXTVAL, 8, '0'),
        'N',
        NULL,
        'N',
        NULL,
        NULL,
            --p_outlet_id,
        NULL,
        NULL,
        NULL,
        sysdate,
        'Dr',
        NULL,
        null,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_settle_flag,
        v_prep_account_number,
        0,
        v_total_vat_fee ,
        v_prev_bal
    );

   p_out:='00';

p_msg:='Success';

dbms_output.put_line('Success ');
end if;

else 



p_out:='00';

p_msg:='Success';

--success becuase fee can add or delete




end if;

end if;



else 

p_out :='01';
p_msg :='Card details not found.';

dbms_output.put_line('Card details not found');
end if;

exception 
when others then
--rollback;
dbms_output.put_line('Error sqlcode '||sqlcode||sqlerrm);
p_out:='01';
p_msg:='Invalid fee configuration.';

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_disable_employee(p_employee_id character varying, p_status character varying, p_user_name character varying, OUT p_out_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_card_ref_number  varchar2(100);
v_msg   varchar2(500);
v_balance   numeric;
v_arn_ref    varchar2(30);
v_prep_account_number varchar2(50);
v_hash_card_number varchar2(70);
v_status varchar2(4);
v_update_bal_code         VARCHAR2(10);
v_update_bal_msg          VARCHAR2(10);
v_instr_profile_id number;
v_dormacy_period  number;
v_product_id   number;
v_closure_minimum_amount number;
v_dormant_fee_cnt  number;
v_employee_disable_cnt number;
v_dormant_fee_amount number;
v_minimum_amount number:=0;
v_vat_fee number :=0;
v_hold_balance numeric:=0;
    v_avl_bal numeric:=0;
	v_hold_bal numeric:=0;
	v_curr_bal numeric:=0;
	v_resp_code character varying(5);
	v_resp_msg character varying(50);
	v_settle_flag character varying(1);
    v_prev_bal numeric:=0;

pragma autonomous_transaction;
BEGIN
    -- 1. ADDING CUSTOMER TO HISTORY TABLE :
	-------------------------------------	
	INSERT INTO cms_cust_details_history (
        salutation,
        first_name,
        middle_name,
        last_name,
        age,
        gender,
        date_of_birth,
        current_address_line1,
        current_address_line2,
        current_address_line3,
        current_pin_code,
        current_city,
        current_state,
        current_country,
        permanent_address_line1,
        permanent_address_line2,
        permanent_address_line3,
        permanent_pin_code,
        permanent_city,
        permanent_state,
        permanent_country,
        current_landline_number,
        permanent_landline_number,
        mobile_number,
        email_id,
        fax_no,
        marital_status,
        minor_flag,
        nre_o,
        occupation,
        pan_number,
        aadhar_number,
        passport_number,
        image_details,
        company_name,
        company_address_line1,
        company_address_line2,
        company_address_line3,
        company_telephone_number1,
        company_fax_number1,
        company_url,
        company_city,
        company_state,
        company_country,
        company_code,
        education,
        license_number,
        photo_nonphoto,
        branch_id,
        staf_code,
        embossing_line2,
        card_type,
        product_id,
        bin,
        batch_no,
        kyc_required,
        cust_ref_number,
        prepaid_account_number,
        uploaded_by,
        uploaded_on,
        card_gen_date,
        card_gen_by,
        pin_gen_date,
        pin_gen_by,
        cvv_gen_date,
        cvv_gen_by,
        embossing_file_gen_date,
        embossing_file_gen_by,
        embossing_file_name,
        cust_seq_id,
        issuer_id,
        dispatch_status,
        checker_status,
        checker_verified_on,
        checker_verified_by,
        tag_generated_by,
        tag_generated_date,
        embossname,
        cheker_description,
        outlet_id,
        application_ref_no,
        photo_id,
        pass_type,
        pass_amount,
        delivery_dest,
        old_to_newaccount_flag,
        old_card_number,
        n_rega_job_card,
        voter_id,
        cust_type,
        status,
        kyc_flag,
        min_kyc_updated_date,
        max_kyc_updated_date,
        is_minor,
        embossa_name1,
        embossa_name2,
        embossa_name3,
        employee_id,
        employer_id,
        employee_name,
        employee_account_number,
        employee_active_status,
        employee_active_status_date,
        updated_by,
        updated_date,
        employee_mol_id,
        emirates_id,
        emirates_name,
        nationality,
        product_code,
        mothers_name
    )
        SELECT
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line1,
            current_address_line2,
            current_address_line3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line1,
            permanent_address_line2,
            permanent_address_line3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_landline_number,
            permanent_landline_number,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line1,
            company_address_line2,
            company_address_line3,
            company_telephone_number1,
            company_fax_number1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_nonphoto,
            branch_id,
            staf_code,
            embossing_line2,
            card_type,
            product_id,
            bin,
            batch_no,
            kyc_required,
            cust_ref_number,
            prepaid_account_number,
            uploaded_by,
            uploaded_on,
            card_gen_date,
            card_gen_by,
            pin_gen_date,
            pin_gen_by,
            cvv_gen_date,
            cvv_gen_by,
            embossing_file_gen_date,
            embossing_file_gen_by,
            embossing_file_name,
            cust_seq_id,
            issuer_id,
            dispatch_status,
            checker_status,
            checker_verified_on,
            checker_verified_by,
            tag_generated_by,
            tag_generated_date,
            embossname,
            cheker_description,
            outlet_id,
            application_ref_no,
            photo_id,
            pass_type,
            pass_amount,
            delivery_dest,
            old_to_newaccount_flag,
            old_card_number,
            n_rega_job_card,
            voter_id,
            cust_type,
            status,
            kyc_flag,
            min_kyc_updated_date,
            max_kyc_updated_date,
            is_minor,
            embossa_name1,
            embossa_name2,
            embossa_name3,
            employee_id,
            employer_id,
            employee_name,
            employee_account_number,
            employee_active_status,
            employee_active_status_date,
            updated_by,
            updated_date,
            employee_mol_id,
            emirates_id,
            emirates_name,
            nationality,
            product_code,
            mothers_name
        FROM
            cms_cust_details ccd
        WHERE
            employee_id = p_employee_id;


select count(1) into v_employee_disable_cnt from cms_cust_details ccd  where employee_id = p_employee_id
       and employee_active_status ='D';
              
    if v_employee_disable_cnt=0 then       
-- 2. MAKING EMPLOYEE DISABLE
------------------------------
    UPDATE cms_cust_details
    SET
        employee_active_status =p_status,
        employee_active_status_date = sysdate,
        employee_deactive_status_date=sysdate
    WHERE
        employee_id = p_employee_id
       and employee_active_status !='D';
       
       dbms_output.put_line('After disable employeee');

    select card_ref_number,prep_account_number,hash_card_number,product_id,status,hold_balance
  into v_card_ref_number,v_prep_account_number,v_hash_card_number,v_product_id,v_status,v_hold_balance
from(
 select rownum ,cd.card_ref_number,cd.prep_account_number,cd.hash_card_number,cd.product_id,cd.status,ad.hold_balance 
    from card_detail cd join cms_cust_details ccd
	on (cd.cust_seq_id=ccd.cust_seq_id)
	join account_details ad  on(ad.account_number=cd.prep_account_number)
	and ccd.employee_id = p_employee_id
    and cd.status in('A','THL','PHL')
   order by card_activated_on  desc
  )where rownum=1;

     -- DORMANCY_FLAG AND DORMANCY DATE CHANGE IN CARD DETAIL
----------------------------------------------------------
        SELECT
            id
        INTO v_instr_profile_id
        FROM
            prd_instrument_profile pip
        WHERE
            product_id = v_product_id;

        SELECT
            dormancy_period,closure_minimum_amount
        INTO v_dormacy_period, v_closure_minimum_amount
        FROM
            prd_instrument_details pid
        WHERE
            instrument_profile_id = v_instr_profile_id;
 dbms_output.put_line('v_dormacy_period '||v_dormacy_period||' v_card_ref_number '||v_card_ref_number);
        prc_dormancy_on_card(v_card_ref_number,v_dormacy_period, v_msg);  
       
dbms_output.put_line('dormance msg '||v_msg);

        IF ( v_msg = 'fail' ) THEN
            --CONTINUE;
			return;
        END IF;
  --  Applying Fee  (currently sending some dummy txn_type 9999 for doemancy)
  -----------------
dbms_output.put_line('Dormancy fee call ');
       prc_fee_for_dormancy(v_card_ref_number, '10111', v_balance);
      
      
--addition closure fee code 
select count(1) into v_dormant_fee_cnt from cms_card_fee_config ccfc where card_ref_number=v_card_ref_number
and txn_type='10110';

if v_dormant_fee_cnt > 0 then

dbms_output.put_line('card level fee pick up');

select ccfc.amount  into v_dormant_fee_amount from cms_card_fee_config ccfc where card_ref_number=v_card_ref_number
and txn_type='10110';

fee_vat_calculation(v_dormant_fee_amount ,  v_vat_fee );

v_dormant_fee_amount :=v_dormant_fee_amount + v_vat_fee;

else 
dbms_output.put_line('Product level fee pick up');
SELECT
           pid.fee_amount  into v_dormant_fee_amount
        FROM
            prd_fee_profile pid
        WHERE
            pid.instrument_profile_id = v_instr_profile_id
           and pid.txn_type='10110';
v_dormant_fee_amount :=v_dormant_fee_amount + v_vat_fee;

end if;
dbms_output.put_line('Dormancy fee after v_closure_fee_amount'||v_dormant_fee_amount||' v_closure_minimum_amount '||v_closure_minimum_amount ||' v_balance'||v_balance);

 v_minimum_amount := v_dormant_fee_amount + v_closure_minimum_amount;
      
dbms_output.put_line('v_minimum_amount fee after v_minimum_amount'||v_minimum_amount);

IF (v_balance <= v_minimum_amount) then

dbms_output.put_line('v_hold_balance '||v_hold_balance);

  if v_hold_balance > 0 then 
  
  dbms_output.put_line('wait 5 days for the settlement from last settlement transaction_date');
 
 
		update card_detail set is_closure_hold ='Y',is_closure_hold_date =sysdate where card_ref_number=v_card_ref_number;
 
 
  else 
   
		dbms_output.put_line('negative balance'||v_balance);

		-- ADDING CREDIT ENTRY TO DIGITAL TABLE
		   -------------------------------------------
		   SELECT
           lpad(load_seq.NEXTVAL,16,0)
           INTO v_arn_ref
           FROM dual;
		   

  		   -- Making Balance to zero
		   --------------------------
--		   balance_update(v_hash_card_number, abs(v_balance)::text, 'D', v_update_bal_code, v_update_bal_msg);
           
	             dbms_output.put_line('before account update proc call '||v_hash_card_number||abs(v_balance));

      account_balance_update(v_hash_card_number,abs(v_balance),0,case when v_balance < 0 then 'C' when v_balance > 0 then 'D' end,'N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);
    
        if v_resp_code ='00' then  
          
          -- DEDUCT FROM SIMBA ACCOUNT
		   --------------------------------		   
           INSERT INTO simba_txn_detail
           (account_no, customer_account, card_no, txn_type, original_txn_ref, amount, txn_desc,drcr)
           VALUES('123456789', v_prep_account_number,v_hash_card_number,(case when v_balance < 0 then '10119' when v_balance > 0 then '10118' end),v_arn_ref,abs(v_balance),(case when v_balance < 0 then 'txn debit' when v_balance > 0 then 'txn credit' end),(case when v_balance < 0 then 'Dr' when v_balance > 0 then 'Cr' end));
		   
		   -- INSERT INTO DIGITAL_TXN_AUTHORIZATION	
           ------------------------------------------		   
		   INSERT INTO digital_txn_authorization (
              id,
              arn,
              branch_id,
              card_enc,
              card_token,
              channel_id,
              channel_type,
              date_time,
              dr_cr_flag,
              msg_type,
              response_code,
              txn_amount,
              last_settle_date,
              mid,
              topup_pay_mode,
              topup_txn_refno,
              source_req_id,
              arn_reference,
              pg_mid,
              txn_id,
              ref_tid,
              txn_type,
              prepaid_account_number,
              available_balance,
   	        hold_balance,
	        current_balance,
	        settle_flag,
	        settle_date,
	        previous_balance 
               ) VALUES (
                   digital_txn_seq.NEXTVAL,
                   'SUCCESS',
                   null,
                   v_hash_card_number,
                   v_hash_card_number,
                   null,--channel id
                   null, --p_channel_type
                   SYSDATE,
                   (case when v_balance < 0 then 'Cr' when v_balance > 0 then 'Dr' end),
                   'adjust',
                   '00',
                   abs(v_balance),
                   SYSDATE,
                   null, --mid
                   null, --p_pay_mode
                   null, -- p_pay_txn_ref_no
                   null, --p_src_req_id
                   v_arn_ref,
                   null, --p_pg_mid
                   null, --p_txn_id
                   null,  --p_ref_tid
	              (case when v_balance < 0 then '10118' when v_balance > 0 then '10119' end), -- Txn_type for dormancy    
                  v_prep_account_number,
                  v_avl_bal,
                  v_hold_bal,
                  v_curr_bal,
                  v_settle_flag,
                  systimestamp,
                  v_prev_bal
	           	);		   
		   
	          
		   -- MAKING CARD STATUS PHL
		   --------------------------
		    update card_detail 
			set reason_code='08',  -- reason code for card closure
			status='PHL',-- Status changes to PHL
			card_closure_date =sysdate
			where card_ref_number=v_card_ref_number;
		
		insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(v_card_ref_number,v_status,sysdate,p_user_name,v_prep_account_number, 'PH','08');                  

            
p_out_msg := 'success';
else 
    
    p_out_msg :='fail';
   
   dbms_output.put_line('Balance update failed');
  
  return;
   end if;

end if; ---hold amount if

elsif (v_balance=0) then
		
		dbms_output.put_line('zero balance'||v_balance);

		   -- MAKING CARD STATUS PHL
		   ---------------------------
			update card_detail 
			set reason_code='08',  -- reason code for card closure
			status='PHL',           -- Status changes to PHL
			card_closure_date=sysdate
			where card_ref_number=v_card_ref_number;
		
		insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(v_card_ref_number,v_status,sysdate,p_user_name,v_prep_account_number,'PH','08');                  

	    elsif  (v_balance > v_minimum_amount) and v_status='A' then
	    dbms_output.put_line('Positive balance active status');
	   
	   
	    --Deduct card closure fee
	    
	    prc_fee_for_dormancy(v_card_ref_number, '10110', v_balance);
	   
	    --positive balance
			 UPDATE card_detail
		    SET
		        card_closure_date = sysdate + v_dormacy_period
		    WHERE
		        card_ref_number = v_card_ref_number;
		    commit;
       
		 elsif  (v_balance > v_minimum_amount) and v_status in('PHL','THL') then   
		  
		 DBMS_OUTPUT.PUT_LINE('POSITIVE BALANCE PHL THL STATUS');
		
		 
		if v_hold_balance > 0 then 
  
  dbms_output.put_line('wait 5 days for the settlement from transaction date positive balance');
      
		update card_detail set is_closure_hold ='Y',is_closure_hold_date =sysdate where card_ref_number=v_card_ref_number;
 
 
	  else 
   
		dbms_output.put_line('positive balance'||v_balance);

		-- ADDING CREDIT ENTRY TO DIGITAL TABLE
		   -------------------------------------------
		   SELECT
           lpad(load_seq.NEXTVAL,16,0)
           INTO v_arn_ref
           FROM dual;
		   

  		   -- Making Balance to zero
		   --------------------------
--		   balance_update(v_hash_card_number, abs(v_balance)::text, 'D', v_update_bal_code, v_update_bal_msg);
           
	             dbms_output.put_line('before account update proc call '||v_hash_card_number||abs(v_balance));

      account_balance_update(v_hash_card_number,abs(v_balance),0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);
    
        if v_resp_code ='00' then  
          
          -- DEDUCT FROM SIMBA ACCOUNT
		   --------------------------------		   
           INSERT INTO simba_txn_detail
           (account_no, customer_account, card_no, txn_type, original_txn_ref, amount, txn_desc,drcr)
           VALUES('123456789', v_prep_account_number,v_hash_card_number,'10118',v_arn_ref,abs(v_balance),'txn credit','C');
		   
		   -- INSERT INTO DIGITAL_TXN_AUTHORIZATION	
           ------------------------------------------		   
		   INSERT INTO digital_txn_authorization (
              id,
              arn,
              branch_id,
              card_enc,
              card_token,
              channel_id,
              channel_type,
              date_time,
              dr_cr_flag,
              msg_type,
              response_code,
              txn_amount,
              last_settle_date,
              mid,
              topup_pay_mode,
              topup_txn_refno,
              source_req_id,
              arn_reference,
              pg_mid,
              txn_id,
              ref_tid,
              txn_type,
              prepaid_account_number,
              available_balance,
   	        hold_balance,
	        current_balance,
	        settle_flag,
	        settle_date,
	        previous_balance 
               ) VALUES (
                   digital_txn_seq.NEXTVAL,
                   'SUCCESS',
                   null,
                   v_hash_card_number,
                   v_hash_card_number,
                   null,--channel id
                   null, --p_channel_type
                   SYSDATE,
                   'Dr',
                   'adjust',
                   '00',
                   abs(v_balance),
                   SYSDATE,
                   null, --mid
                   null, --p_pay_mode
                   null, -- p_pay_txn_ref_no
                   null, --p_src_req_id
                   v_arn_ref,
                   null, --p_pg_mid
                   null, --p_txn_id
                   null,  --p_ref_tid
	              '10119', -- Txn_type for dormancy    
                  v_prep_account_number,
                  v_avl_bal,
                  v_hold_bal,
                  v_curr_bal,
                  v_settle_flag,
                  systimestamp,
                  v_prev_bal
	           	);		   
		   
	          
		   -- MAKING CARD STATUS PHL
		   --------------------------
		    update card_detail 
			set reason_code='08',  -- reason code for card closure
			status='PHL',-- Status changes to PHL
			card_closure_date =sysdate
			where card_ref_number=v_card_ref_number;
		
		insert into action_on_card (
						card_ref_no,status,action_date,action_type,prepaid_account_number,action_flag,reason_code)
						values 
						(v_card_ref_number,v_status,sysdate,p_user_name,v_prep_account_number, 'PH','08');                  

            
p_out_msg := 'success';
else 
    
    p_out_msg :='fail';
   
   dbms_output.put_line('Balance update failed');
  
  return;
   end if;

end if; ---hold amount if
		 
		 END IF;
--		    commit;		   
    p_out_msg := 'success';
   else
   p_out_msg :='Already disabled.';
  dbms_output.put_line('Employee account already disabled.');
  end if;
EXCEPTION
    WHEN OTHERS then
        dbms_output.put_line('Error occured '||sqlcode||sqlerrm);
        p_out_msg := 'fail'||sqlcode||sqlerrm;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_dormancy_on_card(p_card_ref_no character varying, p_dormanacy_period numeric, OUT p_out_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_msg  varchar2(30);
--pragma autonomous_transaction;
BEGIN
    
	prc_insert_card_detail_his(p_card_ref_no,v_msg);
    if(v_msg='fail') then  -- if not inserted into card_detail_history
       p_out_msg := 'fail';
	   return;
    end if;

    UPDATE card_detail
    SET
        dormancy_flag = 'Y',
        dormancy_date = sysdate
    WHERE
        card_ref_number = p_card_ref_no;
    commit;
    p_out_msg := 'success';
EXCEPTION
    WHEN OTHERS THEN
        p_out_msg := 'fail';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_employee_update_detail(p_file_name character varying, p_batch_no character varying, p_user_id character varying, p_app_rejected_cnt character varying, p_product_id character varying, OUT p_out character varying, OUT p_msg character varying, OUT p_card_gen_flag character varying, OUT p_card_gen_cnt character varying)
 SECURITY DEFINER
AS $procedure$ 

    v_count            NUMBER := 0;
    v_total_count      NUMBER := 0;
    v_bin              NUMBER;
    v_flag             VARCHAR2(1);
    v_prod_id          VARCHAR2(10) := 1;
    v_employee_cnt     NUMBER;
    v_out              VARCHAR2(50);  
    v_cust_id          VARCHAR2(50);
    v_cust_ref_no      VARCHAR2(50);
    v_prepaid_acc_no   VARCHAR2(50);
    v_prefix           VARCHAR2(20);
    v_prefix_len       NUMBER;
    v_add_count        NUMBER := 0;
    v_update_cnt       NUMBER := 0;
   v_cust_cnt          NUMBER :=0;
    v_disable_cnt      NUMBER := 0;
    v_excep_cnt        NUMBER := 0;
    v_employer_id      NUMBER := 0;
    excep_file_upload EXCEPTION;
	v_employer_id_cnt Number:=0;
	v_cust_check_cnt  Number;
	v_reprocessed_cnt number:=0;
	v_dis_cnt         number:=0;
    v_emp_disable_cnt number:=0;
    v_employee_disable_cnt number:=0;
   v_card_holder_cnt number:=0;
  v_status_cnt number :=0;
	pragma autonomous_transaction;
BEGIN
    dbms_output.put_line('Started'
                         || p_file_name
                         || p_user_id
                         || p_batch_no
                         || p_product_id);

PROC_PROCESSLOG('prc_employee_update_detail','prc_employee_update_detail','PROCEDURE','prc_employee_update_detail STARTTED...!!'|| p_file_name||' '|| p_user_id||' '|| p_batch_no||' '|| p_product_id,SYSDATE);
    
	 select
	count(1) into v_reprocessed_cnt
    from
	CMS_EMPLOYEE_UPDATE_SUMMARY
    where
	file_name =p_file_name;
    if(v_reprocessed_cnt>0) then
	   p_out := '01';
       p_msg := 'File is already processed';
	   return;
	end if;	
	SELECT
        COUNT(1)
    INTO v_total_count
    FROM 
        CMS_EMPLOYEE_UPDATE_TEMP       
    WHERE
        file_name = p_file_name
        AND batch_no = p_batch_no;

    dbms_output.put_line('v_total_count' || v_total_count);
    IF v_total_count > 0 THEN   --file upload count check
        dbms_output.put_line('Inside file upload check');
        SELECT
            COUNT(1)
        INTO v_count
        FROM
            CMS_EMPLOYEE_UPDATE_TEMP
        WHERE
            batch_no = p_batch_no
            AND action_flag in ('U','D');


        IF v_count > 0 THEN
            dbms_output.put_line(' v_count U D' || v_count);

 	
		
  ---loop for updation           
            FOR cur_rec IN (
                SELECT
                    *
                FROM
                    CMS_EMPLOYEE_UPDATE_TEMP
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no
--                     AND product_id = v_prod_id
                    AND action_flag = 'U'
                    AND status IS null
                    order by record_no  asc
            ) LOOP
			
						--------------------------------------------------------------
			IF cur_rec.kyc_flag IS NULL OR cur_rec.kyc_flag = 'N' THEN
			
			dbms_output.put_line(' KYC FLAG NULL ');

                UPDATE cms_employee_update_temp
                SET
                     status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'KYC flag is N'
                WHERE
                    employee_id = cur_rec.employee_id
                AND batch_no = p_batch_no
--				AND product_id = v_prod_id
				AND kyc_flag = cur_rec.kyc_flag
			    and status is null;
				
				v_excep_cnt :=v_excep_cnt + sql%rowcount;
                dbms_output.put_line(' KYC FLAG NULL '||SQL%ROWCOUNT);
				continue;
            END IF;				
--
--           SELECT COUNT(1) INTO v_card_holder_cnt FROM cms_cust_details cd 
-- 					 WHERE 
-- 			       card_holder_code=cur_rec.card_holder_code;
--
--		       IF v_card_holder_cnt > 1 THEN
--                 UPDATE CMS_EMPLOYEE_UPDATE_TEMP
--                 SET
--                     status = 'N',--status = 'R',
--                     remarks = 'N',
--                     remarks_description = 'Card holder code already exists.'
--                 WHERE
--                     card_holder_code=cur_rec.card_holder_code
--                     AND batch_no = p_batch_no
--                     and status is null;
--  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
--
--                 dbms_output.put_line(' v_card_holder_cnt '||SQL%ROWCOUNT);
--				    continue;
--              END IF;	
--
--           
           
           SELECT COUNT(1) INTO v_employer_id_cnt FROM corporate 
 					 WHERE 
 			        employer_id = cur_rec.employer_id;

		       IF v_employer_id_cnt = 0 THEN
                 UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Invalid employer Id'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
					 AND Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;

                 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
				    continue;
              END IF;	

               SELECT COUNT(1) INTO v_employer_id_cnt FROM corporate 
			   WHERE employer_id = cur_rec.employer_id and status='D';					

		       IF v_employer_id_cnt > 0 THEN
                 UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                 SET
                     status = 'N',
                     remarks = 'N',
                     remarks_description = 'Employer is disable'
                 WHERE
                    employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                    AND batch_no = p_batch_no
                    and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
					continue;
             END IF;		
            
            
            
          SELECT COUNT(1) INTO v_employee_disable_cnt FROM cms_cust_details 
			   WHERE employee_id = cur_rec.employee_id and employee_active_status ='D';					

		       IF v_employee_disable_cnt > 0 THEN
                 UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                 SET
                     status = 'N',
                     remarks = 'N',
                     remarks_description = 'Employee is disable.'
                 WHERE
                    employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                    AND batch_no = p_batch_no
                    and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
					continue;
             END IF;		
	     
           	SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_employee_update_temp  
             WHERE
 			     employee_id=cur_rec.employee_id
                     AND batch_no = p_batch_no
                     AND action_flag = 'U'
                     and status is null;
                 
				
 dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 1 THEN
                 UPDATE cms_employee_update_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Duplicate employee id in the file.'
                 WHERE
                     employee_id=cur_rec.employee_id
                     AND batch_no = p_batch_no
                     AND action_flag = 'U'
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;
 
            
            
		---------------------------------------------------------------------	
                dbms_output.put_line('Inside update loopp');
                
                -- Insert Into History Table
                -------------------------------
                INSERT INTO cms_cust_details_history (
                    salutation,
                    first_name,
                    middle_name,
                    last_name,
                    age,
                    gender,
                    date_of_birth,
                    current_address_line1,
                    current_address_line2,
                    current_address_line3,
                    current_pin_code,
                    current_city,
                    current_state,
                    current_country,
                    permanent_address_line1,
                    permanent_address_line2,
                    permanent_address_line3,
                    permanent_pin_code,
                    permanent_city,
                    permanent_state,
                    permanent_country,
                    current_landline_number,
                    permanent_landline_number,
                    mobile_number,
                    email_id,
                    fax_no,
                    marital_status,
                    minor_flag,
                    nre_o,
                    occupation,
                    pan_number,
                    aadhar_number,
                    passport_number,
                    image_details,
                    company_name,
                    company_address_line1,
                    company_address_line2,
                    company_address_line3,
                    company_telephone_number1,
                    company_fax_number1,
                    company_url,
                    company_city,
                    company_state,
                    company_country,
                    company_code,
                    education,
                    license_number,
                    photo_nonphoto,
                    branch_id,
                    staf_code,
                    embossing_line2,
                    card_type,
                    product_id,
                    bin,
                    batch_no,
                    kyc_required,
                    cust_ref_number,
                    prepaid_account_number,
                    uploaded_by,
                    uploaded_on,
                    card_gen_date,
                    card_gen_by,
                    pin_gen_date,
                    pin_gen_by,
                    cvv_gen_date,
                    cvv_gen_by,
                    embossing_file_gen_date,
                    embossing_file_gen_by,
                    embossing_file_name,
                    cust_seq_id,
                    issuer_id,
                    dispatch_status,
                    checker_status,
                    checker_verified_on,
                    checker_verified_by,
                    tag_generated_by,
                    tag_generated_date,
                    embossname,
                    cheker_description,
                    outlet_id,
                    application_ref_no,
                    photo_id,
                    pass_type,
                    pass_amount,
                    delivery_dest,
                    old_to_newaccount_flag,
                    old_card_number,
                    n_rega_job_card,
                    voter_id,
                    cust_type,
                    status,
                    kyc_flag,
                    min_kyc_updated_date,
                    max_kyc_updated_date,
                    is_minor,
                  --  embossa_name1,
                  --  embossa_name2,
                  --  embossa_name3,
                    employee_id,
                    employer_id,
                 --   employee_name,
                 --   employee_account_number,
                 --   employee_active_status,
                 --   employee_active_status_date,
                 --   updated_by,
                 --   updated_date,
                    employee_mol_id,
                    emirates_id,
                    emirates_name,
                    nationality,
                --    product_code,
                    mothers_name,
                    insert_date,
                    card_holder_code
                )
                    SELECT
                        salutation,
                        first_name,
                        middle_name,
                        last_name,
                        age,
                        gender,
                        date_of_birth,
                        current_address_line1,
                        current_address_line2,
                        current_address_line3,
                        current_pin_code,
                        current_city,
                        current_state,
                        current_country,
                        permanent_address_line1,
                        permanent_address_line2,
                        permanent_address_line3,
                        permanent_pin_code,
                        permanent_city,
                        permanent_state,
                        permanent_country,
                        current_landline_number,
                        permanent_landline_number,
                        mobile_number,
                        email_id,
                        fax_no,
                        marital_status,
                        minor_flag,
                        nre_o,
                        occupation,
                        pan_number,
                        aadhar_number,
                        passport_number,
                        image_details,
                        company_name,
                        company_address_line1,
                        company_address_line2,
                        company_address_line3,
                        company_telephone_number1,
                        company_fax_number1,
                        company_url,
                        company_city,
                        company_state,
                        company_country,
                        company_code,
                        education,
                        license_number,
                        photo_nonphoto,
                        branch_id,
                        staf_code,
                        embossing_line2,
                        card_type,
                        product_id,
                        bin,
                        batch_no,
                        kyc_required,
                        cust_ref_number,
                        prepaid_account_number,
                        uploaded_by,
                        uploaded_on,
                        card_gen_date,
                        card_gen_by,
                        pin_gen_date,
                        pin_gen_by,
                        cvv_gen_date,
                        cvv_gen_by,
                        embossing_file_gen_date,
                        embossing_file_gen_by,
                        embossing_file_name,
                        cust_seq_id,
                        issuer_id,
                        dispatch_status,
                        checker_status,
                        checker_verified_on,
                        checker_verified_by,
                        tag_generated_by,
                        tag_generated_date,
                        embossname,
                        cheker_description,
                        outlet_id,
                        application_ref_no,
                        photo_id,
                        pass_type,
                        pass_amount,
                        delivery_dest,
                        old_to_newaccount_flag,
                        old_card_number,
                        n_rega_job_card,
                        voter_id,
                        cust_type,
                        status,
                        kyc_flag,
                        min_kyc_updated_date,
                        max_kyc_updated_date,
                        is_minor,
                    --    embossa_name1,
                    --    embossa_name2,
                    --    embossa_name3,
                        employee_id,
                        employer_id,
                    --    employee_name,
                    --    employee_account_number,
                    --    employee_active_status,
                    --    employee_active_status_date,
                    --    updated_by,
                    --    updated_date,
                        employee_mol_id,
                        emirates_id,
                        emirates_name,
                        nationality,
                    --    product_code,
                        mothers_name,
                        sysdate,
                        card_holder_code
                    FROM
                        cms_cust_details
                    WHERE
                        employee_id = cur_rec.employee_id
                        AND employee_mol_id = cur_rec.employee_mol_id
                        AND emirates_id = cur_rec.emirates_id
                        and employee_id in(select employee_id from cms_employee_update_temp where employee_id=cur_rec.employee_id and status is null);
                
                
                
                dbms_output.put_line('Inside update ');
                
                -- Actual Update in Customer Table
                -------------------------------------

                UPDATE cms_cust_details
                SET
--                    employee_id = nvl(cur_rec.employee_id, employee_id),
--                    employer_id = nvl(cur_rec.employer_id, employer_id),
                    first_name = nvl(cur_rec.employee_first_name, first_name),
                    last_name = nvl(cur_rec.employee_last_name, last_name),
                    embossname = nvl(cur_rec.employee_first_name
                                     || ' '
                                     || cur_rec.employee_last_name, embossname),
                    date_of_birth = nvl(cur_rec.employee_dob, date_of_birth),
                    mobile_number =nvl(cur_rec.employee_mobile_number,mobile_number::text)::numeric,
                    current_address_line1 = nvl(cur_rec.employee_address, current_address_line1),
                    employee_account_number = nvl(cur_rec.employee_account_number, employee_account_number),
                    kyc_flag = nvl(cur_rec.kyc_flag, kyc_flag),
                    batch_no = p_batch_no,
                    updated_by = p_user_id,
                    updated_date = sysdate,
					nationality=nvl(cur_rec.nationality,nationality),
--					emirates_name=nvl(cur_rec.emirates_name,emirates_name),
--					emirates_id=nvl(cur_rec.emirates_id,emirates_id),
					gender=nvl(cur_rec.gender,gender),
					mothers_name =nvl(cur_rec.mothers_name,mothers_name),
					card_holder_code =nvl(cur_rec.card_holder_code,card_holder_code)
                WHERE
                    employee_id = cur_rec.employee_id
                    AND employee_mol_id = cur_rec.employee_mol_id
                    AND emirates_id = cur_rec.emirates_id
                   and employee_id in(select employee_id from cms_employee_update_temp where employee_id=cur_rec.employee_id and cur_rec.status is null);				
					
                v_cust_check_cnt:=SQL%rowcount;
               
--               dbms_output.put_line('v_cust_check_cnt '||v_cust_check_cnt);
                v_update_cnt := v_update_cnt +v_cust_check_cnt;
		--uncomment by binaya		
			if(v_cust_check_cnt=0) then
				   UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                   SET
                    status = 'N',
                    remarks = 'N',
                   remarks_description = 'Employee Is Not Present'
                    WHERE
                    employee_id = cur_rec.employee_id
                    AND employee_mol_id = cur_rec.employee_mol_id
                    AND emirates_id = cur_rec.emirates_id
                    AND batch_no = p_batch_no
                    AND action_flag = 'U'
                    AND status IS NULL;	
					v_excep_cnt :=v_excep_cnt + sql%rowcount;
				    Continue;
				end if;
				
				dbms_output.put_line('Inside update 1');
                UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                SET
                    status = 'S',
                    remarks = 'Y',
                    remarks_description = 'SUCCESS'
                WHERE
                    employee_id = cur_rec.employee_id
                    AND employee_mol_id = cur_rec.employee_mol_id
                    AND emirates_id = cur_rec.emirates_id
                    AND batch_no = p_batch_no
                    AND action_flag = 'U'
                    AND status IS NULL;

            END LOOP;
   --for loop end for updation
   
  
--loop for disable           
   for cur_rec in ( SELECT
                *
            FROM
                CMS_EMPLOYEE_UPDATE_TEMP
            WHERE
                file_name = p_file_name
                AND batch_no = p_batch_no
                AND action_flag = 'D'
                AND status is null
                order by record_no asc )         
   loop
    dbms_output.put_line('Inside disable loopp');
   
   select count(1) into v_emp_disable_cnt from cms_cust_details where employee_id =cur_rec.employee_id
   and employee_mol_id =cur_rec.employee_mol_id
   and emirates_id =cur_rec.emirates_id
   and employee_active_status ='D';
    dbms_output.put_line('v_emp_disable_cnt '||v_emp_disable_cnt);
  
  if v_emp_disable_cnt > 0 then
   
  UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                 SET
                  status = 'N',
                  remarks = 'N',
                  remarks_description = 'Employee is already disabled.'
                  WHERE
                  employee_id = cur_rec.employee_id
                  AND employee_mol_id = cur_rec.employee_mol_id
                  AND emirates_id = cur_rec.emirates_id
                  AND batch_no = p_batch_no
                  AND action_flag = 'D'
                  AND status IS NULL;	
                 
	    v_excep_cnt :=v_excep_cnt + sql%rowcount;
  
  end if;
	
select count(1) into v_status_Cnt from card_detail cd join cms_cust_details cust on(cd.prep_account_number=cust.prepaid_account_number)
where cust.employee_id=cur_rec.employee_id
and cd.status='INA';

if v_status_cnt > 0 then

  UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                 SET
                  status = 'N',
                  remarks = 'N',
                  remarks_description = 'INA status card can not be disabled.'
                  WHERE
                  employee_id = cur_rec.employee_id
                  AND employee_mol_id = cur_rec.employee_mol_id
                  AND emirates_id = cur_rec.emirates_id
                  AND batch_no = p_batch_no
                  AND action_flag = 'D'
                  AND status IS NULL;	
     v_excep_cnt :=v_excep_cnt + sql%rowcount;
 
end if; 
--   update cms_cust_details set 
--          employee_active_status='D',
--          employee_active_status_date=sysdate
--   WHERE
--          employee_id = cur_rec.employee_id
--	      AND employee_mol_id=cur_rec.employee_mol_id
--		  AND Emirates_Id = cur_rec.Emirates_Id
--		  and employee_active_status !='D';
--		
select count(1) into v_cust_cnt from cms_cust_details where employee_id =cur_rec.employee_id;
if v_cust_cnt = 0 then


    dbms_output.put_line('v_cust_cnt '||v_cust_cnt);

 	    UPDATE CMS_EMPLOYEE_UPDATE_TEMP
                 SET
                  status = 'N',
                  remarks = 'N',
                  remarks_description = 'Customer Is Not Present'
                  WHERE
                  employee_id = cur_rec.employee_id
                  AND employee_mol_id = cur_rec.employee_mol_id
                  AND emirates_id = cur_rec.emirates_id
                  AND batch_no = p_batch_no
                  AND action_flag = 'D'
                  AND status IS NULL;	
	    v_excep_cnt :=v_excep_cnt + sql%rowcount;

else
 

select count(1) into v_dis_cnt from cms_employee_update_temp ceut  where employee_id = cur_rec.employee_id
                  AND employee_mol_id = cur_rec.employee_mol_id
                  AND emirates_id = cur_rec.emirates_id
                  AND batch_no = p_batch_no
                  AND action_flag = 'D'
                  AND status IS null;
                 
                 
if v_dis_cnt > 0 then


     prc_disable_employee(cur_rec.employee_id,'D',cur_rec.file_name,v_out); 		
    
    dbms_output.put_line('v_out '||v_out);


    
    if v_out ='success' then
    
   UPDATE CMS_EMPLOYEE_UPDATE_TEMP
          SET
          status = 'S',
          remarks = 'Y',
          remarks_description = 'SUCCESS'
          WHERE
          employee_id = cur_rec.employee_id
		  AND employee_mol_id=cur_rec.employee_mol_id
		  AND Emirates_Id = cur_rec.Emirates_Id
          AND batch_no = p_batch_no
          AND action_flag = 'D'
          AND status is null;
         v_disable_cnt :=v_disable_cnt+1;
      
        else 
        
        
        UPDATE CMS_EMPLOYEE_UPDATE_TEMP
          SET
          status = 'N',
          remarks = 'N',
          remarks_description = 'Card disabled failed.'
          WHERE
          employee_id = cur_rec.employee_id
		  AND employee_mol_id=cur_rec.employee_mol_id
		  AND Emirates_Id = cur_rec.Emirates_Id
          AND batch_no = p_batch_no
          AND action_flag = 'D'
          AND status is null;
         v_excep_cnt :=v_excep_cnt + sql%rowcount;
        
        end if;
   end if;     
    end if;            
   end loop;
   --for loop end for disable   
 

         
            INSERT INTO CMS_EMPLOYEE_UPDATE_SUMMARY (
                id,
                file_name,
                total_count,
                add_count,
                update_count,
                disable_count,
                success_count,
                reject_count,
                exception_count,
                batch_no,
                file_uploaded_by,
                file_uploaded_date
            ) VALUES (
                CMS_EMPLOYEE_UPDATE_SUMMARY_seq.NEXTVAL,
                p_file_name,
                ( v_total_count + nvl(p_app_rejected_cnt, 0) ),
                v_add_count,
                v_update_cnt,
                v_disable_cnt,
                ( v_add_count + v_update_cnt + v_disable_cnt ),
                ( nvl(p_app_rejected_cnt, 0) + nvl(v_excep_cnt, 0) ),
                v_excep_cnt,
                p_batch_no,
                p_user_id,
                sysdate
            );

           INSERT INTO CMS_EMPLOYEE_UPDATE_HISTORY ( 
                id,
                employee_id,
                employer_id,
                employee_first_name,
                employee_last_name,
                employee_dob,
                employee_mobile_number,
                employee_address,
                employee_account_number,
                kyc_flag,
                cust_seq_id,
                action_flag,
                status,
                remarks,
                remarks_description,
                batch_no,
                file_name,
                file_uploaded_by,
                file_uploaded_date,
                product_id,
                bin,
                employee_mol_id,
                emirates_id,
                emirates_name,
                nationality,
                product_code,
                embossa_name1,
                embossa_name2,
                embossa_name3,
                gender,
                mothers_name,
                card_holder_code,
                record_no
            )
                SELECT
                    id,
                    employee_id,
                    employer_id,
                    employee_first_name,
                    employee_last_name,
                    employee_dob,
                    employee_mobile_number,
                    employee_address,
                    employee_account_number,
                    kyc_flag,
                    cust_seq_id,
                    action_flag,
                    status,
                    remarks,
                    remarks_description,
                    batch_no,
                    file_name,
                    file_uploaded_by,
                    file_uploaded_date,
                    product_id,
                    bin,
                    employee_mol_id,
                    emirates_id,
                    emirates_name,
                    nationality,
                    product_code,
                    embossa_name1,
                    embossa_name2,
                    embossa_name3,
                    gender,
                    mothers_name,
                    card_holder_code,
                    record_no
                FROM
                    CMS_EMPLOYEE_UPDATE_TEMP
                WHERE
                    file_name = p_file_name
                    AND batch_no = p_batch_no;

            p_out := '00';
            p_msg := 'Success';
            dbms_output.put_line('p_out '|| p_out|| ' p_msg '|| p_msg);
        Else
            p_out := '01';
            p_msg := 'There is no Update/ Disable Records';
            dbms_output.put_line('p_out '|| p_out|| ' p_msg '|| p_msg);
        END IF;
        

    ELSE
        RAISE excep_file_upload;
    END IF;    --file_upload count check end;
     commit;
EXCEPTION
    WHEN excep_file_upload THEN
        p_out := '01';
        p_msg := 'File is not uploaded successfully';
    WHEN OTHERS THEN
        p_out := '01';
        p_msg := 'Error in file upload'|| sqlcode|| sqlerrm;
        dbms_output.put_line('p_out '|| p_out|| ' p_msg '|| p_msg);
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_employer_disable(p_employer_id character varying, OUT p_mesg character varying)
 SECURITY DEFINER
AS $procedure$

    p_status                  VARCHAR2(1) := 'D';
    v_instrument_profile_id   VARCHAR2(100);
    v_fee_amt                 NUMBER;
    v_cnt                     NUMBER;
    v_update_bal_code         VARCHAR2(10);
    v_update_bal_msg          VARCHAR2(500);
    v_msg                     VARCHAR2(10);
	pragma autonomous_transaction;
BEGIN
-- Disable Employer (Corporate Table)
--------------------------------------------    
    UPDATE corporate
    SET
        status = p_status,
        updated_date=sysdate
    WHERE
        employer_id = p_employer_id;

    FOR a IN (
        SELECT
            ccd.*,
            cd.card_ref_number
        FROM
            cms_cust_details   ccd
            JOIN card_detail        cd ON cd.cust_seq_id = ccd.cust_seq_id
        WHERE
            employer_id = p_employer_id
    ) LOOP
--Disabling Employees (under disable employer)
----------------------------------------------
        prc_disable_employee(a.employee_id, 'D','SimbaUser' ,v_msg);
       dbms_output.put_line('Employer disable msg'||v_msg);
        IF ( v_msg = 'fail' ) THEN
            CONTINUE;
        END IF;
 
    END LOOP;
	COMMIT;
	p_mesg:='success';
EXCEPTION
    WHEN OTHERS then
	   p_mesg:='fail';

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_employer_disable(p_employer_id character varying, p_user_name character varying, OUT p_mesg character varying)
 SECURITY DEFINER
AS $procedure$

    p_status                  VARCHAR2(1) := 'D';
    v_instrument_profile_id   VARCHAR2(100);
    v_fee_amt                 NUMBER;
    v_cnt                     NUMBER;
    v_update_bal_code         VARCHAR2(10);
    v_update_bal_msg          VARCHAR2(500);
    v_msg                     VARCHAR2(10);
	pragma autonomous_transaction;
BEGIN
-- Disable Employer (Corporate Table)
--------------------------------------------    
    UPDATE corporate
    SET
        status = p_status,
        updated_date=sysdate
    WHERE
        employer_id = p_employer_id;

    FOR a IN (
        SELECT
            ccd.*,
            cd.card_ref_number
        FROM
            cms_cust_details   ccd
            JOIN card_detail        cd ON cd.cust_seq_id = ccd.cust_seq_id
        WHERE
            employer_id = p_employer_id
    ) LOOP
--Disabling Employees (under disable employer)
----------------------------------------------
        prc_disable_employee(a.employee_id, 'D', p_user_name, v_msg);
       dbms_output.put_line('Employer disable msg'||v_msg);
        IF ( v_msg = 'fail' ) THEN
            CONTINUE;
        END IF;
 
    END LOOP;
	COMMIT;
	p_mesg:='success';
EXCEPTION
    WHEN OTHERS then
	   p_mesg:='fail';

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_fee_calc(p_hash_card_number character varying, p_amount numeric, p_txn_type character varying, p_org_txn_type character varying, p_intl_flag character varying, OUT p_out character varying, OUT p_msg character varying, OUT p_fee_amt numeric, OUT p_mark_up_fee numeric, OUT p_vat_fee numeric)
 SECURITY DEFINER
AS $procedure$ 
v_card_ref_number card_detail.card_ref_number%type;
v_prepaid_account_number account_details.account_number%type;
v_employee_id cms_cust_details.employee_id%type;
v_employer_id cms_cust_details.employer_id%type;
v_product_id card_detail.product_id%type;
v_fee_cnt numeric :=0;
v_fee_card_cnt numeric:=0;
v_fee_waiver_cnt numeric:=0;
v_frequency pcs_fee_waiver.frequency%type;
v_txn_waiver_count pcs_fee_waiver.txn_count%type;
v_txn_cnt numeric :=0; 
v_flat_fee_amount numeric(10,2):=0;
v_txn_amount numeric:=0;
v_mark_up_fee numeric:=0;
v_vat_fee  numeric :=0;
v_total_mark_up_fee numeric(10,2):=0;
v_total_vat_fee numeric(10,2) :=0;
v_total_fee numeric(10,2) :=0;
v_group_id varchar(10);
v_markup_cnt number :=0;
begin 
	
	select cd.card_ref_number,ad.account_number, cust.employee_id, cust.employer_id ,cd.product_id
	into v_card_ref_number, v_prepaid_account_number,v_employee_id,v_employer_id , v_product_id
	from card_detail cd join cms_cust_details cust on(cd.prep_account_number=cust.prepaid_account_number) 
	 join account_details ad  on(ad.account_number=cust.prepaid_account_number)
	 where cd.hash_Card_number=p_hash_Card_number;
	
	insert into processlog(process_id,object_name,object_type,"comments",entry_date)
	values('prc_fee_calc','prc_fee_calc','proc',p_hash_Card_number||' -h-  '||p_txn_type||' -TT--'||p_org_txn_type||'--OG-- '||p_intl_flag,sysdate);

	
	
select count(1) into v_markup_cnt from prd_fee_profile where instrument_profile_id in(select id from prd_instrument_profile pip where pip.product_id=v_product_id)	
and txn_type =p_txn_type;

if v_markup_cnt > 0 then

select markup_fee_perc into v_mark_up_fee from prd_fee_profile where instrument_profile_id in(select id from prd_instrument_profile pip where pip.product_id=v_product_id)	
and txn_type =p_txn_type;

end if;
	
select count(1) into v_fee_card_cnt from cms_card_fee_config ccfc  where card_ref_number=v_card_ref_number and txn_type=p_txn_type;

dbms_output.put_line('v_fee_card_cnt '||v_fee_card_cnt);

if v_fee_card_cnt > 0 then

dbms_output.put_line('v_fee_card_cnt '||v_fee_card_cnt);


select count(1) into v_fee_waiver_cnt from pcs_fee_waiver pfw  where pfw.txn_type =p_txn_type and pfw.group_id in(select group_id from corporate c  where c.employer_id=v_employer_id);


dbms_output.put_line('v_fee_waiver_cnt '||v_fee_waiver_cnt);



if v_fee_waiver_cnt > 0 then 

select frequency,txn_count into v_frequency,v_txn_waiver_count from pcs_fee_waiver where txn_type=p_txn_type and group_id in(select group_id from corporate c  where c.employer_id=v_employer_id);


dbms_output.put_line('frequency '||v_frequency||' txn_count '||v_txn_waiver_count);



if v_frequency in ('1','2','3','4') then --daily weekly mothly yearly

select count(1) into v_txn_cnt  from aswt_switch_txn_authrization asta  where asta.f002=p_hash_card_number 
and asta.f039='00' and asta.txn_type=p_org_txn_type and asta.intl_flag=p_intl_flag
and trunc(asta.sys_txn_date) >= decode (v_frequency,'1',trunc(sysdate),'2',date_trunc('week', sysdate),'3',date_trunc('month', sysdate),'4',date_trunc('year', sysdate));

if v_txn_cnt < v_txn_waiver_count then
dbms_output.put_line('In waiver subcidy');

p_out:='00';
p_msg:='Success';
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;

else

dbms_output.put_line('over txn count excessed fee applied');

select amount into v_flat_fee_amount from cms_card_fee_config ccfc  where card_ref_number=v_card_ref_number and txn_type=p_txn_type;

if v_mark_up_fee !=0 then


v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;

dbms_output.put_line('v_total_mark_up_fee '||v_total_mark_up_fee);

end if; --mark up fee


fee_vat_calculation(v_flat_fee_amount ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;

dbms_output.put_line('v_totol_vat_fee '||v_vat_fee||' v_flat_fee_amount '||v_flat_fee_amount||' v_total_mark_up_fee '||v_total_mark_up_fee);

v_total_fee:=v_flat_fee_amount + v_total_vat_fee;


dbms_output.put_line('TOTAL FEE AMTOUNT '||v_total_fee);


p_out:='00';
p_msg:='Success';
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;


end if;

elsif v_frequency = 0  then

dbms_output.put_line('In frequence 0');

select count(1) into v_txn_cnt  from cs_fee_temp asta  where asta.card_number=p_hash_card_number 
and asta.fee_ind=p_org_txn_type ;

if v_txn_cnt > v_txn_waiver_count then

dbms_output.put_line('over txn count excessed fee applied');

select amount,mark_up_fee into v_flat_fee_amount,v_mark_up_fee from cms_card_fee_config ccfc  where card_ref_number=v_card_ref_number and txn_type=p_txn_type;

if v_mark_up_fee !=0 then


v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;

dbms_output.put_line('v_total_mark_up_fee '||v_total_mark_up_fee);

end if; --mark up fee


fee_vat_calculation(v_flat_fee_amount ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;

dbms_output.put_line('v_totol_vat_fee '||v_vat_fee||' v_flat_fee_amount '||v_flat_fee_amount||' v_total_mark_up_fee '||v_total_mark_up_fee);

v_total_fee:=v_flat_fee_amount + v_total_vat_fee;


dbms_output.put_line('TOTAL FEE AMTOUNT '||v_total_fee);


p_out:='00';
p_msg:='Success';
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;


else 

p_out:='00';
p_msg:='Success';
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;

end if;

end if;  --frequency

else

dbms_output.put_line('flat charges  fee ');



select amount into v_flat_fee_amount from cms_card_fee_config ccfc  where card_ref_number=v_card_ref_number and txn_type=p_txn_type;


dbms_output.put_line('flat charges  fee '||v_flat_fee_amount||' mark_up_fee '||v_mark_up_fee);


if v_mark_up_fee !=0 then



v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;
dbms_output.put_line('v_total_mark_up_fee '||v_total_mark_up_fee);


end if; --mark up fee


fee_vat_calculation(v_flat_fee_amount ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;

dbms_output.put_line('v_totol_vat_fee '||v_vat_fee||' v_flat_fee_amount '||v_flat_fee_amount||' v_total_mark_up_fee '||v_total_mark_up_fee);

v_total_fee:=v_flat_fee_amount + v_total_vat_fee;


dbms_output.put_line('TOTAL FEE AMTOUNT '||v_total_fee);


p_out:='00';
p_msg:='Success';
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;




end if;

else

dbms_output.put_line('Fee not configured in card wise fee config');
p_out:='01';

p_msg :='Fee is not configured.';

p_fee_amt :=0;
p_mark_up_fee:=0;
p_vat_fee:=0;




end if;
	
	
	
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_fee_for_dormancy(p_card_ref_no character varying, p_txn_type character varying, OUT v_balance numeric)
 SECURITY DEFINER
AS $procedure$

    v_hash_card_number        VARCHAR2(100);
    v_instrument_profile_id   VARCHAR2(10);
    v_update_bal_code         VARCHAR2(10);
    v_update_bal_msg          VARCHAR2(10);
    v_fee_amt                 NUMBER;
    v_product_id              NUMBER;
    v_prep_account_number         varchar2(50);
    v_avl_bal numeric:=0;
	v_hold_bal numeric:=0;
	v_curr_bal numeric:=0;
	v_resp_code character varying(5);
	v_resp_msg character varying(50);
	v_settle_flag character varying(1);
	v_cnt number;
    v_vat_fee numeric :=0;
    v_prev_bal numeric :=0;
--    pragma autonomous_transaction;
BEGIN
    SELECT
        hash_card_number,
        product_id,
        prep_account_number
    INTO
        v_hash_card_number,
        v_product_id,
        v_prep_account_number
    FROM
        card_detail
    WHERE
        card_ref_number = p_card_ref_no;

    SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_card_fee_config
    WHERE
        card_ref_number = p_card_ref_no
        AND txn_type =p_txn_type;

    IF ( v_cnt > 0 ) THEN
      dbms_output.put_line('Inside card level fee');
-- Card Level Fee Checking
---------------------------
        SELECT
            amount
        INTO v_fee_amt
        FROM
            cms_card_fee_config
        WHERE
            card_ref_number = p_card_ref_no
            AND txn_type =p_txn_type;

    ELSE    

      dbms_output.put_line('Inside product level fee');
-- Product Level Fee Checking
-------------------------------
        SELECT
            id
        INTO v_instrument_profile_id
        FROM
            prd_instrument_profile pip
        WHERE
            product_id = v_product_id; 
dbms_output.put_line('v_instrument_profile_id '||v_instrument_profile_id||'v_product_id '||v_product_id);
           
        SELECT
            fee_amount
        INTO v_fee_amt
        FROM
            prd_fee_profile
        WHERE
            instrument_profile_id = v_instrument_profile_id
            AND txn_type = p_txn_type;
      dbms_output.put_line(' v_fee_amt '||v_fee_amt);

    END IF;

   
--    balance_update(v_hash_card_number, v_fee_amt::text, 'D', v_update_bal_code, v_update_bal_msg);
--    IF ( v_update_bal_code = '00' AND v_update_bal_code = 'SUCCESS' ) THEN
--        COMMIT;
--    END IF;

   
   fee_vat_calculation(v_fee_amt ,  v_vat_fee );
           dbms_output.put_line('v_vat_fee '||v_vat_fee);

   v_fee_amt:=v_fee_amt + v_vat_fee;
              dbms_output.put_line('total v_fee_amt '||v_fee_amt);

           dbms_output.put_line('before account update proc call '||v_hash_card_number);

      account_balance_update(v_hash_card_number,v_fee_amt,0,'D','Y',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code ='00' then 
   
   
    INSERT INTO cs_fee_temp (
        date_time,
        fee_description,
        card_number,
        fee_amt,
        rrn,
        reversal_flag,
        settle_date,
        acc_flag,
        fee_ind,
        acc_date,
        seq_id,
        balance_update_flag,
        balance_update_date,
        bal_update_flag_ruk,
        bal_update_date_ruk,
        rev_org_seq_id,
            -- tid,
        stan,
        batch_number,
        ticket_id,
        entry_date_time,
        drcr,
        bal_update_settl_flag,
        bal_update_settl_date,
        available_balance,
        hold_balance,
        current_balance,
        settle_flag,
        prepaid_account_number ,
        mark_up_fee,
        vat_fee,
        previous_balance
    ) VALUES (
        sysdate,
        (select typ.txn_name from transaction_type typ where typ.txn_type=p_txn_type),
        v_hash_card_number,
        v_fee_amt,
        LPAD(cs_fee_temp_rrn.NEXTVAL,16,'0'),
        NULL,
        case when v_settle_flag='Y' then sysdate else null end,
        NULL,
        p_txn_type,
        NULL,
        to_char(sysdate, 'DDMONYY')
        || '.'
        || lpad(cs_fee_temp_seq.NEXTVAL, 8, '0'),
        'N',
        NULL,
        'N',
        NULL,
        NULL,
            --p_outlet_id,
        NULL,
        NULL,
        NULL,
        sysdate,
        'Dr',
        NULL,
        null,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_settle_flag,
        v_prep_account_number,
        0,
        v_vat_fee,
        v_prev_bal
    );
	v_balance :=v_avl_bal; 
 end if;
    
   
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_fund_transfer(p_card_ref_number character varying, p_amount character varying, p_account_number character varying, OUT p_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 
v_count numeric:=0;
v_trf_balance numeric(10);
v_account_number account_details.account_number%type;
v_hash_card_number card_detail.hash_card_number%type;
v_issuer_id card_detail.issuer_id%type;
v_arn_ref digital_txn_authorization.arn_reference%type;
v_avl_bal account_details.available_balance%type;
v_hold_bal account_details.hold_balance%type;
v_curr_bal account_details.current_balance%type;
v_resp_code character varying(10);
v_resp_msg character varying(1000);
v_settle_flag cs_fee_temp.settle_flag%type;
v_prev_bal numeric :=0;
excep_card_not_found exception;
excep_invalid_bal_trf exception;
begin 
select count(1) into v_count from card_detail where card_ref_number=p_card_ref_number;	

if v_count > 0 then 

select cust.prepaid_account_number,cd.hash_card_number,cd.issuer_id into v_account_number,v_hash_card_number,v_issuer_id from card_detail cd join cms_cust_details cust on(cd.cust_seq_id=cust.cust_seq_id)
where card_ref_number=p_card_ref_number;

select available_balance into v_trf_balance from account_details ad  where account_number=v_account_number;

if v_trf_balance = to_number(p_amount) then

--insert into digital for debit
    SELECT
        lpad(
            load_seq.NEXTVAL,
            16,
            0
        )
    INTO
        v_arn_ref
    FROM
        dual;

       
       
   --update account balance
          
--       update account_details set host_balance= host_balance- p_amount::numeric where account_number = v_account_number;

     dbms_output.put_line('before account update proc call '||v_hash_card_number);

      account_balance_update(v_hash_card_number,p_amount,0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);
   
    if v_resp_code ='00' then
       
       
    INSERT INTO digital_txn_authorization (
        id,
        arn,
        branch_id,
        card_enc,
        card_token,
        channel_id,
        channel_type,
        date_time,
        dr_cr_flag,
        msg_type,
        response_code,
        txn_amount,
        last_settle_date,
        mid,
        topup_pay_mode,
        topup_txn_refno,
        source_req_id,
        arn_reference,
        pg_mid,
        txn_id,
        ref_tid,
        txn_type,
        prepaid_account_number ,
        available_balance ,
        hold_balance ,
        current_balance ,
        settle_flag ,
        settle_date ,
        previous_balance
    ) VALUES (
        digital_txn_seq.NEXTVAL,
        'SUCCESS',
        null,
        v_hash_card_number,
        v_hash_card_number,
        null,--channel id
        null, --p_channel_type
        SYSDATE,
        'Dr',
        'Balance Transfer',
        '00',
        p_amount,
        SYSDATE,
        null, --mid
        null, --p_pay_mode
        null, -- p_pay_txn_ref_no
        null, --p_src_req_id
        v_arn_ref,
        null, --p_pg_mid
        null, --p_txn_id
        null,  --p_ref_tid
		'95028',
		v_account_number,
		v_avl_bal,
		v_hold_bal,
		v_curr_bal,
		v_settle_flag,
		sysdate,
		v_prev_bal
        );

       
       dbms_output.put_line('after insert');
       
--insert into fund tansfer Cr entry into fund transfer

      insert into digital_balance_transfer
       (
        Id,
        date_time,
        card_ref_number,
        hash_card_number,
        account_number,
        amount,
        drcr,
        txn_type,
        description		      
       )
       values
       (
       digital_bal_trans.nextval,
       systimestamp,
       p_card_ref_number,
       v_hash_card_number,
       p_account_number,
       p_amount,
       'Cr',
       '95028',
       'Balance Transfer'
       );
      

dbms_output.put_line('Success');      
p_code :='00';

p_msg :='SUCCESS';

else 

p_code :='01';

p_msg :='Account balance update failed.';


end if;
--insert into the master table

else 

raise excep_invalid_bal_trf;

end if;

else 

raise excep_card_not_found;

end if;
exception 
when excep_card_not_found then

p_code :='01';

p_msg :='Invalid CRN.';

when excep_invalid_bal_trf then 

p_code :='01';

p_msg :='Balance transfer amount is not matched with available balance';

when others then 

	p_code :='01';
dbms_output.put_line(sqlerrm);
p_msg :='FAILURE';

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_get_fee_amount(p_payment_mode character varying, p_txn_type character varying, p_txn_usage_type character varying, p_response_code character varying, p_entry_mode character varying, p_hash_card_number character varying, p_amount character varying, OUT p_out character varying, OUT p_fee_desc character varying)
 SECURITY DEFINER
AS $procedure$ 


v_amount character varying(5);
v_fee_desc prd_fee_profile_extension.fee_desc%type;

begin 
	
	
select amount,fee_desc into v_amount,v_fee_desc from prd_fee_profile_extension  
where payment_mode=p_payment_mode 
and txn_type=p_txn_type 
and txn_usage_type=p_txn_usage_type 
and case when p_response_code=0 then response_code=p_response_code else response_code is null end
and case when p_entry_mode=810 then entry_mode=p_entry_mode else entry_mode is null end;

p_out :=v_amount; 
p_fee_desc :=v_fee_desc;

exception         
when others then

p_out:='0';

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_get_product_bin_det(p_bin character varying, p_product_code character varying, OUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$
BEGIN
    OPEN p_out FOR
	select
	a."name",
	a.bin,
	a.bin_start_range,
	a.bin_end_range,
	a.bin_type,
	b."name",
	b.fee_profile_desc,
	b.fee_type,
	b.fee_amount,
	b.max_waiver_count,
	b.max_wavier_amt,
	b.fee_initiate_point
from
	prd_bin_profile a
join PRD_FEE_PROFILE b on
	a.instrument_profile_id = b.instrument_profile_id
left join prd_txn_profile ptp on
	a.instrument_profile_id = ptp.instrument_profile_id
where
	a.bin =p_bin
	and a.product_code =p_product_code;    
	

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_insert_account_det_his(p_account_no character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
BEGIN
    INSERT INTO account_details_history (
        account_id,
        account_number,
        host_balance,
        card_offline_balance,
        product_id,
        issuer_id,
        branch_id,
        balance_sharing,
        created_date,
        created_by,
        updated_date,
        updated_by,
        soft_delete,
        batch_no,
        cust_seq_id,
        balance,
        account_status,
        hold_balance,
            previous_balance,
            available_balance,
            current_balance
    )
        SELECT
            account_id,
            account_number,
            host_balance,
            card_offline_balance,
            product_id,
            issuer_id,
            branch_id,
            balance_sharing,
            created_date,
            created_by,
            updated_date,
            updated_by,
            soft_delete,
            batch_no,
            cust_seq_id,
            balance,
            account_status,
            hold_balance,
            previous_balance,
            available_balance,
            current_balance
        FROM
            account_details
        WHERE
            account_number = p_account_no;

    p_out := 'success';
EXCEPTION
    WHEN OTHERS THEN
        p_out := 'fail';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_insert_card_detail_his(p_card_ref_no character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
BEGIN
     INSERT INTO card_detail_history (
bin,expiry_date,card_number,product_id,pin_offset,service_code,status,pan_seq_no,cvv_1_flag,cvv_2_flag,i_cvv_flag,on_boarded_by,on_boarded_date,recard_flag,old_card_no,pin_gen_method,form_factor,txn_auth_profile_flag,customer_profile_flag,card_profile_flag,txn_profile_flag,fee_profile_flag,merchant_profile_flag,balance_profile_flag,usage_profile_flag,valid_thru,valid_from,online_bal,offline_bal_on_host,chip_offline_bal,daily_usage_amt,daily_usage_cnt,monthly_usage_amt,monthly_usage_cnt,yearly_usage_amt,yearly_usage_cnt,mobile_no,email_id,issuer_id,branch_id,customer_name,embossname,column_3,column_4,column_5,column_6,column_7,column_8,column_9,column_10,created_date,updated_date,created_by,updated_by,cust_ref_no,prep_account_number,cust_seq_id,reason_code,pin_status,card_activated_on,last_updated_on_host,card_offline_bal,offline_bal,shadow_bal,hot_list_desc_code,hot_list_type,id,batch_no,instance_issuance_flag,response,renewal_flag,replacement_flag,hash_card_number,card_ref_number,enrypted_card_no,outlet_id,mask_card_no,is_instant,fee_amount,initial_load_done,afcs_hash_number,old_offset,gst_rate,net_host_balance,max_balance_max_kyc,max_balance_min_kyc,kyc_type,is_first_topup_done,monthly_topup_limit_max_kyc,monthly_topup_limit_min_kyc,monthly_txn_count_max_kyc,monthly_txn_count_min_kyc,yearly_topup_limit_max_kyc,yearly_topup_limit_min_kyc,yearly_txn_count_max_kyc,yearly_txn_count_min_kyc,pin_try_count,last_pin_failed_time,remarks,dormancy_flag,dormancy_date,pin_block_date,date_time
     )
         SELECT
              bin,
	expiry_date,
	card_number,
	product_id,
	pin_offset,
	service_code,
	status,
	pan_seq_no,
	cvv_1_flag,
	cvv_2_flag,
	i_cvv_flag,
	on_boarded_by,
	on_boarded_date,
	recard_flag,
	old_card_no,
	pin_gen_method,
	form_factor,
	txn_auth_profile_flag,
	customer_profile_flag,
	card_profile_flag,
	txn_profile_flag,
	fee_profile_flag,
	merchant_profile_flag,
	balance_profile_flag,
	usage_profile_flag,
	valid_thru,
	valid_from,
	online_bal,
	offline_bal_on_host,
	chip_offline_bal,
	daily_usage_amt,
	daily_usage_cnt,
	monthly_usage_amt,
	monthly_usage_cnt,
	yearly_usage_amt,
	yearly_usage_cnt,
	mobile_no,
	email_id,
	issuer_id,
	branch_id,
	customer_name,
	embossname,
	column_3,
	column_4,
	column_5,
	column_6,
	column_7,
	column_8,
	column_9,
	column_10,
	created_date,
	updated_date,
	created_by,
	updated_by,
	cust_ref_no,
	prep_account_number,
	cust_seq_id,
	reason_code,
	pin_status,
	card_activated_on,
	last_updated_on_host,
	card_offline_bal,
	offline_bal,
	shadow_bal,
	hot_list_desc_code,
	hot_list_type,
	id,
	batch_no,
	instance_issuance_flag,
	response,
	renewal_flag,
	replacement_flag,
	hash_card_number,
	card_ref_number,
	enrypted_card_no,
	outlet_id,
	mask_card_no,
	is_instant,
	fee_amount,
	initial_load_done,
	afcs_hash_number,
	old_offset,
	gst_rate,
	net_host_balance,
	max_balance_max_kyc,
	max_balance_min_kyc,
	kyc_type,
	is_first_topup_done,
	monthly_topup_limit_max_kyc,
	monthly_topup_limit_min_kyc,
	monthly_txn_count_max_kyc,
	monthly_txn_count_min_kyc,
	yearly_topup_limit_max_kyc,
	yearly_topup_limit_min_kyc,
	yearly_txn_count_max_kyc,
	yearly_txn_count_min_kyc,
	pin_try_count,
	last_pin_failed_time,
	remarks,
	dormancy_flag,
	dormancy_date,
	pin_block_date,
    sysdate
FROM
    card_detail
WHERE
    card_ref_number = p_card_ref_no;
--                               INSERT INTO cms_card_detail_history (
--                                old_pan,
--                                new_pan,
--                                cust_name,
--                                status_flag,
--                                serial_no,
--                                insert_time,
--                                email_time,
--                                remark,
--                                channel_id,
--                                pin_offset,
--                                reason_code,
--                                caf_flag,
--                                caf_generated_by,
--                                caf_generation_date,
--                                caf_eligibility,
--                                cust_seq,
--                                old_mask_card_no,
--                                new_mask_card_no,
--                                new_card_ref_number,
--                                old_card_ref_number,
--                                card_ref_number
--                            )
--                                SELECT
--                                    a.hash_card_number,
--                                    a.hash_card_number,
--                                    b.first_name
--                                    || ' '
--                                    || b.last_name,
--                                    a.status,
--                                    serial_no_seq.NEXTVAL,
--                                    sysdate,
--                                    sysdate,
--                                    NULL,
--                                    0,
--                                    NULL,
--                                    a.reason_code,
--                                    NULL,
--                                    NULL,
--                                    NULL,
--                                    NULL,
--                                    a.cust_seq_id,
--                                    c.mask_card_number,
--                                    c.mask_card_number,
--                                    a.card_ref_number,
--                                    a.card_ref_number,
--                                    a.card_ref_number
--                                FROM
--                                    card_detail                 a,
--                                    cms_cust_details            b,
--                                    cms_card_detail_extention   c
--                                WHERE
--                                    a.card_ref_number = c.card_ref_no
--                                    AND a.cust_seq_id = b.cust_seq_id
--                                    AND a.card_ref_number =p_card_ref_no;

    p_out := 'success';
EXCEPTION
    WHEN OTHERS THEN
        p_out := 'fail'||sqlcode||sqlerrm;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_insert_cms_cust_det_hist(p_cust_seq_id character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
BEGIN
    INSERT INTO cms_cust_details_history (
        salutation,
        first_name,
        middle_name,
        last_name,
        age,
        gender,
        date_of_birth,
        current_address_line1,
        current_address_line2,
        current_address_line3,
        current_pin_code,
        current_city,
        current_state,
        current_country,
        permanent_address_line1,
        permanent_address_line2,
        permanent_address_line3,
        permanent_pin_code,
        permanent_city,
        permanent_state,
        permanent_country,
        current_landline_number,
        permanent_landline_number,
        mobile_number,
        email_id,
        fax_no,
        marital_status,
        minor_flag,
        nre_o,
        occupation,
        pan_number,
        aadhar_number,
        passport_number,
        image_details,
        company_name,
        company_address_line1,
        company_address_line2,
        company_address_line3,
        company_telephone_number1,
        company_fax_number1,
        company_url,
        company_city,
        company_state,
        company_country,
        company_code,
        education,
        license_number,
        photo_nonphoto,
        branch_id,
        staf_code,
        embossing_line2,
        card_type,
        product_id,
        bin,
        batch_no,
        kyc_required,
        cust_ref_number,
        prepaid_account_number,
        uploaded_by,
        uploaded_on,
        card_gen_date,
        card_gen_by,
        pin_gen_date,
        pin_gen_by,
        cvv_gen_date,
        cvv_gen_by,
        embossing_file_gen_date,
        embossing_file_gen_by,
        embossing_file_name,
        cust_seq_id,
        issuer_id,
        dispatch_status,
        checker_status,
        checker_verified_on,
        checker_verified_by,
        tag_generated_by,
        tag_generated_date,
        embossname,
        cheker_description,
        outlet_id,
        application_ref_no,
        photo_id,
        pass_type,
        pass_amount,
        delivery_dest,
        old_to_newaccount_flag,
        old_card_number,
        n_rega_job_card,
        voter_id,
        cust_type,
        status,
        kyc_flag,
        min_kyc_updated_date,
        max_kyc_updated_date,
        is_minor,
	--	embossa_name1,
	--	embossa_name2,
	--	embossa_name3,
        employee_id,
        employer_id,
	--	employee_name,
	--	employee_account_number,
	--	employee_active_status,
	--	employee_active_status_date,
	--	updated_by,
	--	updated_date,
        employee_mol_id,
        emirates_id,
        emirates_name,
        nationality,
	--	product_code,
        mothers_name
    )
        SELECT
            salutation,
            first_name,
            middle_name,
            last_name,
            age,
            gender,
            date_of_birth,
            current_address_line1,
            current_address_line2,
            current_address_line3,
            current_pin_code,
            current_city,
            current_state,
            current_country,
            permanent_address_line1,
            permanent_address_line2,
            permanent_address_line3,
            permanent_pin_code,
            permanent_city,
            permanent_state,
            permanent_country,
            current_landline_number,
            permanent_landline_number,
            mobile_number,
            email_id,
            fax_no,
            marital_status,
            minor_flag,
            nre_o,
            occupation,
            pan_number,
            aadhar_number,
            passport_number,
            image_details,
            company_name,
            company_address_line1,
            company_address_line2,
            company_address_line3,
            company_telephone_number1,
            company_fax_number1,
            company_url,
            company_city,
            company_state,
            company_country,
            company_code,
            education,
            license_number,
            photo_nonphoto,
            branch_id,
            staf_code,
            embossing_line2,
            card_type,
            product_id,
            bin,
            batch_no,
            kyc_required,
            cust_ref_number,
            prepaid_account_number,
            uploaded_by,
            uploaded_on,
            card_gen_date,
            card_gen_by,
            pin_gen_date,
            pin_gen_by,
            cvv_gen_date,
            cvv_gen_by,
            embossing_file_gen_date,
            embossing_file_gen_by,
            embossing_file_name,
            cust_seq_id,
            issuer_id,
            dispatch_status,
            checker_status,
            checker_verified_on,
            checker_verified_by,
            tag_generated_by,
            tag_generated_date,
            embossname,
            cheker_description,
            outlet_id,
            application_ref_no,
            photo_id,
            pass_type,
            pass_amount,
            delivery_dest,
            old_to_newaccount_flag,
            old_card_number,
            n_rega_job_card,
            voter_id,
            cust_type,
            status,
            kyc_flag,
            min_kyc_updated_date,
            max_kyc_updated_date,
            is_minor,
	--	embossa_name1,
	--	embossa_name2,
	--	embossa_name3,
            employee_id,
            employer_id,
	--	employee_name,
	--	employee_account_number,
	--	employee_active_status,
	--	employee_active_status_date,
	--	updated_by,
	--	updated_date,
            employee_mol_id,
            emirates_id,
            emirates_name,
            nationality,
	--	product_code,
            mothers_name
        FROM
            cms_cust_details
        WHERE
            cust_seq_id = p_cust_seq_id;

    p_out := 'success';
EXCEPTION
    WHEN OTHERS THEN
        p_out := 'fail';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_non_scheme_txn_settled()
 SECURITY DEFINER
AS $procedure$ 

v_count numeric :=0;
v_avl_bal numeric :=0;
begin 

for i in ( select * from cs_fee_temp where (settle_flag='N' or settle_flag is null ))

loop 
v_avl_bal:=balance_check(i.card_number) ;
dbms_output.put_line('hash_card_number balance '||v_avl_bal||' rrn '||i.rrn);
if v_avl_bal >= 0  then

update cs_fee_temp set settle_flag='Y',settle_date =sysdate where card_number=i.card_number and rrn =i.rrn;
dbms_output.put_line('fee settled cnt '||sql%rowcount);
end if;
end loop;


for j in ( select * from cs_manual_adjustment cma where (settle_flag='N' or settle_flag is null ))

loop 
v_avl_bal:=balance_check(j.card_number) ;
dbms_output.put_line('hash_card_number balance '||v_avl_bal||' rrn '||j.rrn);

if v_avl_bal >= 0  then

update cs_manual_adjustment set settle_flag='Y',settle_date =sysdate where card_number=j.card_number and  rrn=j.rrn;
dbms_output.put_line('adjustment settled cnt '||sql%rowcount);

end if;
end loop;

exception 

when others then

dbms_output.put_line(' sql code '||sqlcode||sqlerrm);

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_onboard_employee(p_file_name character varying, p_user_id character varying, p_batch_no character varying, p_product_id character varying, p_app_rejected_cnt character varying, OUT p_card_gen_flag character varying, OUT p_card_gen_cnt character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_count            NUMBER := 0;
    v_total_count      NUMBER :=0;
    v_bin              NUMBER;
    v_flag             VARCHAR2(1);
    v_prod_id          varchar2(10) := 1;
    v_employee_cnt     NUMBER;
    v_cust_id          VARCHAR2(50);
    v_cust_ref_no      VARCHAR2(50);
    v_prepaid_acc_no   VARCHAR2(50);
    v_prefix           VARCHAR2(20);
    v_prefix_len       NUMBER;
    v_add_count        NUMBER := 0;
	v_update_cnt       NUMBER := 0;
	v_disable_cnt      NUMBER := 0;
	v_excep_cnt      NUMBER := 0;
	v_employer_id      NUMBER := 0;
     excep_file_upload exception ;
    
    l_context text;
	v_card_holder_count NUMBER := 0;
    v_emp_disable_cnt number:=0;
begin
																																 

dbms_output.put_line('Started'||p_file_name||p_user_id||p_batch_no||p_product_id);
    SELECT
        COUNT(1)
    INTO v_total_count
    FROM
        cms_employee_onboard_temp
    WHERE
        file_name = p_file_name
        AND batch_no = p_batch_no;

dbms_output.put_line('v_total_count'||v_total_count);

update cms_employee_onboard_temp set product_id =v_prod_id where file_name=p_file_name and batch_no=p_batch_no;

  IF v_total_count > 0 THEN   --file upload count check
dbms_output.put_line('Inside file upload check');
    SELECT
        COUNT(1)
    INTO v_count
    FROM
        cms_employee_onboard_temp
    WHERE
        batch_no = p_batch_no
        AND action_flag = 'A'
		and product_id=v_prod_id;

    IF v_count > 0 THEN
	dbms_output.put_line(' v_count A '||v_count);
 
	
	select bin into v_bin from sequence_master where product_id=v_prod_id;

update cms_employee_onboard_temp set bin=v_bin where file_name=p_file_name and batch_no=p_batch_no;
	dbms_output.put_line(' BIN UPDATE'||SQL%ROWCOUNT);
 
-- SELECT DISTINCT
           
--             nvl(product_id, '0')
--         INTO
--             v_prod_id
--         FROM
--             cms_employee_onboard_temp
--         WHERE
--             batch_no = p_batch_no
--             AND action_flag IN (
--                 'A',
--                 'U',
--                 'D'
--             )
-- 			and product_id=v_prod_id;

        SELECT
            locked
        INTO v_flag
        FROM
            sequence_master
        WHERE
            bin = v_bin
            AND product_id = v_prod_id;
dbms_output.put_line(' v_flag'||v_flag);
 
    END IF;

IF v_flag = 'N' THEN
    UPDATE sequence_master
    SET
        locked = 'Y'
    WHERE
        bin = v_bin
        AND product_id = v_prod_id;
       
dbms_output.put_line(' sequence_master '||SQL%ROWCOUNT);

  
        FOR cur_rec IN (
            SELECT
                *
            FROM
                cms_employee_onboard_temp
            WHERE
                file_name = p_file_name
                AND batch_no = p_batch_no
			    AND product_id = v_prod_id
                AND action_flag = 'A'

        ) LOOP
            IF cur_rec.kyc_flag IS NULL OR cur_rec.kyc_flag = 'N' THEN
			
			dbms_output.put_line(' KYC FLAG NULL ');

                UPDATE cms_employee_onboard_temp
                SET
                     status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'KYC flag is N'
                WHERE
                    employee_id = cur_rec.employee_id
                AND batch_no = p_batch_no
				AND product_id = v_prod_id
				AND action_flag='A'
                AND status is null;
				
				v_excep_cnt :=v_excep_cnt + sql%rowcount;
dbms_output.put_line(' KYC FLAG NULL '||SQL%ROWCOUNT);
            END IF;

            SELECT
                COUNT(1)
            INTO v_employee_cnt
            FROM
                cms_employee_onboard_temp
            WHERE
                employee_mol_id=cur_rec.employee_mol_id
				AND Emirates_Id = cur_rec.Emirates_Id
                AND batch_no = p_batch_no
				AND product_id = v_prod_id
                AND action_flag = 'A'
                AND status is null;
dbms_output.put_line('v_employee_cnt 1 '||v_employee_cnt);
  
            IF v_employee_cnt > 1 THEN
                UPDATE cms_employee_onboard_temp
                SET
                    status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'duplicate records in the file'
                WHERE
                    employee_id = cur_rec.employee_id
                    AND batch_no = p_batch_no
					AND product_id = v_prod_id
                    AND action_flag = 'A'
                    AND status is null;
 					v_excep_cnt :=v_excep_cnt + sql%rowcount;

dbms_output.put_line(' v_employee_cnt '||SQL%ROWCOUNT);
            END IF;

             SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_cust_details cust 
             WHERE
 			     employee_mol_id=cur_rec.employee_mol_id;
										  
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee with same employee mol id exists'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
										  
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;
			 
			 SELECT
                 COUNT(1)
             INTO v_card_holder_count 
             FROM
                  cms_cust_details cust 
             WHERE
 			     card_holder_code =cur_rec.card_holder_code;
			
			
			IF v_card_holder_count > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee with same Card holder code  exists'
                 WHERE
                      Emirates_Id = cur_rec.Emirates_Id
					  And card_holder_code=cur_rec.card_holder_code
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
			end if;
             SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_cust_details cust 
             WHERE
 			      Emirates_Id = cur_rec.Emirates_Id;
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee with same  emirates id exists'
                 WHERE
                      Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;

            SELECT COUNT(1) INTO v_emp_disable_cnt FROM corporate cop join cms_employee_onboard_temp temp on(cop.employer_id=temp.employer_id)
					 WHERE 
						cop.status ='D' and 
			        	temp.employer_id = cur_rec.employer_id
				        and temp.employee_mol_id=cur_rec.employee_mol_id
						AND temp.Emirates_Id = cur_rec.Emirates_Id
	                     AND temp.batch_no = p_batch_no
	                     AND temp.action_flag = 'A'
	                     and temp.status is null;
					
			       IF v_emp_disable_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employer is disabled.'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;

 dbms_output.put_line(' employer disable cnt '||SQL%ROWCOUNT);
             END IF;		
					
	
			 
			 SELECT COUNT(1) INTO v_employer_id FROM corporate 
					 WHERE 
						status ='A' and 
			        	employer_id = cur_rec.employer_id;
					
			       IF v_employer_id = 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Invalid employer Id'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;

 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;		
					
				
					

            SELECT
                cust_seq_id,
                cust_ref_number,
                prepaid_account_number,
                prefix,
                length(prefix)
            INTO
                v_cust_id,
                v_cust_ref_no,
                v_prepaid_acc_no,
                v_prefix,
                v_prefix_len
            FROM
                sequence_master
            WHERE
                bin = v_bin
                AND product_id = v_prod_id;
dbms_output.put_line(' v_cust_id '||v_cust_id||' v_cust_ref_no '||v_cust_ref_no||' v_prepaid_acc_no '||v_prepaid_acc_no||v_prefix||v_prefix_len);
  
            v_cust_id := v_prefix
                         || lpad(cast(v_cust_id as integer) + 1,(20 - cast(v_prefix_len as integer)), 0);

            v_cust_ref_no := v_prefix
                             || lpad(cast(v_cust_ref_no as integer) + 1,(20 - cast(v_prefix_len as integer)), 0);

            v_prepaid_acc_no := v_prefix
                                || lpad(cast(v_prepaid_acc_no as integer) + 1,(20 - cast(v_prefix_len as integer)), 0);

            INSERT INTO cms_cust_details (
                employee_id,
                employer_id,
				first_name,
				last_name,
                date_of_birth,
                mobile_number,
                current_address_line1,
                employee_account_number,
                kyc_flag,
                batch_no,
                cust_ref_number,
                prepaid_account_number,
                uploaded_by,
                uploaded_on,
                cust_seq_id,
                card_gen_date,
                card_gen_by,
                pin_gen_date,
                pin_gen_by,
                cvv_gen_date,
                cvv_gen_by,
                embossing_file_gen_date,
                embossing_file_gen_by,
                embossing_file_name,
                checker_verified_on,
                checker_verified_by,
                tag_generated_by,
                tag_generated_date,
				age,
				bin,
				current_pin_code,
				permanent_pin_code,
				branch_id,
				issuer_id,
				product_id,
				card_type,
                employee_active_status,
                employee_active_status_date,
				employee_mol_id,
				Emirates_Id,
				Emirates_name,
				Nationality,
				product_code,
				embossa_name1,
				embossa_name2,
				embossa_name3,
				embossname,
				current_city ,
				current_state ,
				current_country ,
				gender,
				mothers_name,
				card_holder_code
            )
                SELECT
                    employee_id,
                    employer_id,
					employee_first_name,
					employee_last_name,
                    employee_dob,
                    nvl (employee_mobile_number,'0'),
                    employee_address,
                    employee_account_number,
                    kyc_flag,
                    p_batch_no,
                    v_cust_ref_no,
                    v_prepaid_acc_no,
                    p_user_id,
                    sysdate,
                    v_cust_id,
                    NULL,
                    0,
                    NULL,
                    0,
                    NULL,
                    0,
                    NULL,
                    0,
                    NULL,
                    sysdate,
                    p_user_id,
                    0,
                    NULL,   
					0,
					bin,
					0,
					0,
					0,
					(select distinct issuer_id from cms_product where id =v_prod_id),
					product_id,
					'N',
                    'A',
                    sysdate,
					employee_mol_id,
					Emirates_Id,
					Emirates_name,
					Nationality,
					product_code,
					embossa_name1,
					embossa_name2,
					embossa_name3,
					employee_first_name||' '||employee_last_name,
					null,
					null,
					null,
					gender,
					mother_name,
					card_holder_code
                FROM
                    cms_employee_onboard_temp
                WHERE
                    employee_id = cur_rec.employee_id
					AND employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                    AND batch_no = p_batch_no
                    AND action_flag = 'A'
                    AND status IS NULL;

            v_add_count := v_add_count + SQL%rowcount;
dbms_output.put_line(' v_add_count '||v_add_count);

			INSERT INTO account_details (
                        account_id,
                        account_number,
                        host_balance,
                        card_offline_balance,
                        product_id,
                        issuer_id,
                        branch_id,
                        balance_sharing,
                        created_date,
                        created_by,
                        updated_date,
                        updated_by,
                        soft_delete,
                        batch_no,
                        cust_seq_id
                    ) VALUES (
                        accountid_seq.NEXTVAL,
                        v_prepaid_acc_no,
                        0,
                        0,
                        v_prod_id,
                        (select distinct issuer_id from cms_product where id =v_prod_id),
                        null,
                        'N',
                        sysdate,
                        p_user_id,
                        NULL,
                        p_user_id,
                        0,
                        p_batch_no,
                        v_cust_id
                    );		

			    UPDATE  cms_employee_onboard_temp
                
				SET status = 'S',
                    remarks = 'Y',
                    remarks_description = 'SUCCESS'
				WHERE
                    employee_id = cur_rec.employee_id
                    AND batch_no = p_batch_no
                    AND action_flag = 'A'
                    AND status IS NULL;
					
		

            UPDATE sequence_master
            SET
                cust_ref_number = cust_ref_number + 1,
                cust_seq_id = cust_seq_id + 1,
                prepaid_account_number = prepaid_account_number + 1
            WHERE
                bin = v_bin
                AND product_id = v_prod_id;
dbms_output.put_line(' sequence_master UPDATE '||SQL%ROWCOUNT);

        END LOOP;
    
		
	dbms_output.put_line(' sequence_master N flag '||SQL%ROWCOUNT);
				
			if v_add_count > 0 then
			
			p_card_gen_flag:='Y';
			
			p_card_gen_cnt :=v_add_count;
		dbms_output.put_line(' p_card_gen_flag  '||p_card_gen_flag||' p_card_gen_cnt '||p_card_gen_cnt);
		
			else
			
			p_card_gen_flag:='N';
			p_card_gen_cnt:=v_add_count;
			
				dbms_output.put_line(' p_card_gen_flag  '||p_card_gen_flag||' p_card_gen_cnt '||p_card_gen_cnt);
		
			end if;
				
		  
              INSERT INTO cms_batch_summary_details (
                batch_no,
                created_on,
                created_by,
                entry_mode,
                upload_file_name,
                total_records,
                rejected_records,
                successful_records,
                checker_verified_on,
                checker_verified_by,
                status,
                process_status,
                issuer_id,
                card_dispatch_flag,
                pin_dispatch_falg,
                card_dispatch_updated_by,
                pin_dispatch_updated_by,
                card_dispatch_date,
                pin_dispatch_date,
                pin_awb_no,
                dispatch_status,
                card_awb_no,
                agency_name,
                card_dispatch_to,
                pin_dispatch_to,
                updated_by,
                branch_id,
                instance_issuance_flag,
                outlet_id,
                card_ack_date
            ) VALUES (
                p_batch_no,
                sysdate,
                p_user_id,
                'BU',
                p_file_name,
                (v_total_count + nvl(p_app_rejected_cnt,0)),
                (nvl(p_app_rejected_cnt,0) + NVL(v_excep_cnt,0)),
                (v_add_count+v_update_cnt+v_disable_cnt),
                sysdate,
                p_user_id,
                'CPE',
                NULL,
                (select distinct issuer_id from cms_product where id =v_prod_id),
                NULL,
                NULL,
                0,
                0,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                p_user_id,
                0,
                NULL,
                0,
                NULL
            );
        
		dbms_output.put_line(' v_total_count '||v_total_count||' p_app_rejected_cnt '||p_app_rejected_cnt||' v_total_count '||v_total_count||' v_add_count '||v_add_count||' v_update_cnt '||v_update_cnt ||' v_disable_cnt '||v_disable_cnt||' v_excep_cnt'||v_excep_cnt);
            insert into cms_employee_onboard_summary
                (
                id,
                file_name,
                total_count,
                add_count,
                update_count,
                disable_count,
                success_count,
                reject_count,
                exception_count,
                batch_no,
                file_uploaded_by,
                file_uploaded_date
                )
                values
                (
                seq_emp_onboard_summary.nextval,
                p_file_name,
                (v_total_count + nvl(p_app_rejected_cnt,0)),
                v_add_count,
                v_update_cnt,
                v_disable_cnt,
                (v_add_count+v_update_cnt+v_disable_cnt),
                (nvl(p_app_rejected_cnt,0) + NVL(v_excep_cnt,0)),
                v_excep_cnt,
                p_batch_no,
                p_user_id,
                sysdate
                );
                        
		 UPDATE sequence_master
        SET
            locked = 'N'
        WHERE
            bin = v_bin
            AND product_id = v_prod_id;
   
   
   Insert into cms_employee_onboard_history
(
	id ,
    employee_id ,
    employer_id ,
	employee_first_name,
	employee_last_name,
    employee_dob ,
    employee_mobile_number ,
    employee_address ,
    employee_account_number ,
    kyc_flag  ,
    cust_seq_id ,
    action_flag ,
    status ,
    remarks ,
    remarks_description ,
    batch_no ,
    file_name ,
    file_uploaded_by ,
    file_uploaded_date ,
    product_id ,
    bin,
	employee_mol_id,
	Emirates_Id,
	Emirates_name,
	Nationality,
	product_code,
	embossa_name1,
	embossa_name2,
	embossa_name3
	)
	select 
	id ,
    employee_id ,
    employer_id ,
	employee_first_name,
	employee_last_name,
    employee_dob ,
    employee_mobile_number ,
    employee_address ,
    employee_account_number ,
    kyc_flag  ,
    cust_seq_id ,
    action_flag ,
    status ,
    remarks ,
    remarks_description ,
    batch_no ,
    file_name ,
    file_uploaded_by ,
    file_uploaded_date ,
    product_id ,
    bin, 
	employee_mol_id,
	Emirates_Id,
	Emirates_name,
	Nationality,
	product_code,
	embossa_name1,
	embossa_name2,
	embossa_name3	
	from cms_employee_onboard_temp where file_name=p_file_name and batch_no=p_batch_no and product_id=v_prod_id;  
	p_out:='00';
	p_msg:='Success';
	
   dbms_output.put_line('p_out '||p_out||' p_msg '||p_msg);
		
   end if;
   
    ELSE
        RAISE excep_file_upload;
    END IF;    --file_upload count check end;

exception
    WHEN excep_file_upload THEN
	    p_out:='01';
        p_msg := 'File is not uploaded into temp table';
    WHEN OTHERS THEN
    
    get STACKED diagnostics l_context = PG_EXCEPTION_CONTEXT;
    
    p_out:='01';
    --p_msg := 'Error in file upload'||l_context; 
       p_msg := 'Error in file upload'||sqlcode ||sqlerrm;
	  
	   insert into process_log  values('onboard_employee','prc_onboard_employee','proc',p_msg,sysdate);
   																								  
       
       	
		
		   dbms_output.put_line('p_out '||p_out||' p_msg '||p_msg);
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_onboard_employee_prdcode(p_file_name character varying, p_user_id character varying, p_batch_no character varying, p_product_id character varying, p_app_rejected_cnt character varying, OUT p_card_gen_flag character varying, OUT p_card_gen_cnt character varying, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_count            NUMBER := 0;
    v_total_count      NUMBER :=0;
    v_bin              NUMBER;
    v_flag             VARCHAR2(1);
    v_prod_id          varchar2(10);
    v_prd_cnt          NUMBER :=0;
    v_employee_cnt     NUMBER;
    v_cust_id          VARCHAR2(50);
    v_cust_ref_no      VARCHAR2(50);
    v_prepaid_acc_no   VARCHAR2(50);
    v_prefix           VARCHAR2(20);
    v_prefix_len       NUMBER;
    v_add_count        NUMBER := 0;
	v_update_cnt       NUMBER := 0;
	v_disable_cnt      NUMBER := 0;
	v_excep_cnt      NUMBER := 0;
	v_employer_id      NUMBER := 0;
    v_bin_cnt 		   NUMBER :=0;
	v_issuer_id        number :=0;
     excep_file_upload exception ;
    
    l_context text;

begin
--	insert into process_log  values('onboard_employee','prc_onboard_employee','prc_onboard_employee-'||p_file_name,p_msg,sysdate);

dbms_output.put_line('Started'||p_file_name||p_user_id||p_batch_no||p_product_id);
    SELECT
        COUNT(1)
    INTO v_total_count
    FROM
        cms_employee_onboard_temp
    WHERE
        file_name = p_file_name
        AND batch_no = p_batch_no;

dbms_output.put_line('v_total_count'||v_total_count);

update cms_employee_onboard_temp  set product_id =product_code where file_name=p_file_name and batch_no=p_batch_no;

--update cms_employee_onboard_temp set product_id =v_prod_id where file_name=p_file_name and batch_no=p_batch_no;

  IF v_total_count > 0 THEN   --file upload count check
dbms_output.put_line('Inside file upload check');
for i in(select distinct product_id from cms_employee_onboard_temp where file_name=p_file_name and batch_no=p_batch_no and status is null)
loop  --product loop


	select COUNT(1) into v_prd_cnt from cms_product where id = i.product_id;

    if v_prd_cnt = 0 then
    
    UPDATE cms_employee_onboard_temp
                SET
                     status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'Invalid product code.'
                WHERE
					product_id = i.product_id;
				
				v_excep_cnt :=v_excep_cnt + sql%rowcount;
    
    end if;

select issuer_id into v_issuer_id from cms_product where id=i.product_id;


    SELECT
        COUNT(1)
    INTO v_count
    FROM
        cms_employee_onboard_temp
    WHERE
        batch_no = p_batch_no
        AND action_flag = 'A'
		and product_id=i.product_id;

    SELECT
        COUNT(1)
    INTO v_count
    FROM
        cms_employee_onboard_temp
    WHERE
        batch_no = p_batch_no
        AND action_flag = 'A'
		and product_id=i.product_id;

    IF v_count > 0 THEN
	dbms_output.put_line(' v_count A '||v_count);
 
select count(1) into v_bin_cnt from sequence_master sm  where product_id =i.product_id;

if v_bin_cnt > 0 then


	select bin into v_bin from sequence_master where product_id =i.product_id;

update cms_employee_onboard_temp set bin=v_bin where file_name=p_file_name and batch_no=p_batch_no;
	dbms_output.put_line(' BIN UPDATE'||SQL%ROWCOUNT);
 
-- SELECT DISTINCT
           
--             nvl(product_id, '0')
--         INTO
--             v_prod_id
--         FROM
--             cms_employee_onboard_temp
--         WHERE
--             batch_no = p_batch_no
--             AND action_flag IN (
--                 'A',
--                 'U',
--                 'D'
--             )
-- 			and product_id=v_prod_id;

        SELECT
            locked
        INTO v_flag
        FROM
            sequence_master
        WHERE
            bin = v_bin
            AND product_id = i.product_id;
dbms_output.put_line(' v_flag'||v_flag);
 
 
IF v_flag = 'N' THEN
    UPDATE sequence_master
    SET
        locked = 'Y'
    WHERE
        bin = v_bin
        AND product_id = i.product_id;
    END IF;
      
dbms_output.put_line(' sequence_master '||SQL%ROWCOUNT);

  else 

    UPDATE cms_employee_onboard_temp
                SET
                     status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'Product bin is not configured.'
                WHERE
					product_id = i.product_id;
				
				v_excep_cnt :=v_excep_cnt + sql%rowcount;


end if;

        FOR cur_rec IN (
            SELECT
                *
            FROM
                cms_employee_onboard_temp
            WHERE
                file_name = p_file_name
                AND batch_no = p_batch_no
                AND action_flag = 'A'
                AND product_id = i.product_id
                and status is null
                order by record_no asc
        ) LOOP 
           v_prod_id :=cur_rec.product_id;
            IF cur_rec.kyc_flag IS NULL OR cur_rec.kyc_flag = 'N' THEN
			
			dbms_output.put_line(' KYC FLAG NULL ');

                UPDATE cms_employee_onboard_temp
                SET
                     status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'KYC flag is N'
                WHERE
                    employee_id = cur_rec.employee_id
                AND batch_no = p_batch_no
				AND product_id = v_prod_id
				AND action_flag='A'
                AND status is null;
				
				v_excep_cnt :=v_excep_cnt + sql%rowcount;
dbms_output.put_line(' KYC FLAG NULL '||SQL%ROWCOUNT);
            END IF;

            SELECT
                COUNT(1)
            INTO v_employee_cnt
            FROM
                cms_employee_onboard_temp
            WHERE
                employee_mol_id=cur_rec.employee_mol_id
				AND Emirates_Id = cur_rec.Emirates_Id
                AND batch_no = p_batch_no
				AND product_id = v_prod_id
                AND action_flag = 'A'
                AND status is null;
dbms_output.put_line('v_employee_cnt 1 '||v_employee_cnt);
  
            IF v_employee_cnt > 1 THEN
                UPDATE cms_employee_onboard_temp
                SET
                    status = 'N',--status = 'R',
                    remarks = 'N',
                    remarks_description = 'duplicate records in the file'
                WHERE
                    employee_id = cur_rec.employee_id
                    AND batch_no = p_batch_no
					AND product_id = v_prod_id
                    AND action_flag = 'A'
                    AND status is null;
 					v_excep_cnt :=v_excep_cnt + sql%rowcount;

dbms_output.put_line(' v_employee_cnt '||SQL%ROWCOUNT);
            END IF;

			SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_cust_details cust 
             WHERE
 			     employee_mol_id=cur_rec.employee_mol_id
				AND Emirates_Id = cur_rec.Emirates_Id;
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee with same employee mol id and emirates id exists'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;
           
			
			SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_cust_details cust 
             WHERE
 			     employee_mol_id=cur_rec.employee_mol_id;
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee with same employee mol id exists'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;

            
            
			SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_cust_details cust 
             WHERE
 			      Emirates_Id = cur_rec.Emirates_Id;
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee with same emirates id exists'
                 WHERE
                     Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;
            
            
	SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_employee_onboard_temp  
             WHERE
 			     employee_id=cur_rec.employee_id;
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 1 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Duplicate employee id in the file.'
                 WHERE
                     employee_id=cur_rec.employee_id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;
			 
             SELECT
                 COUNT(1)
             INTO v_employee_cnt
             FROM
                  cms_cust_details cust 
             WHERE
 			     employee_id=cur_rec.employee_id;
                 
				
-- dbms_output.put_line('v_employee_cnt 2 '||v_employee_cnt);
  
             IF v_employee_cnt > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employee id already exists'
                 WHERE
                     employee_id=cur_rec.employee_id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;
                    
 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;
			 
			 
			 SELECT COUNT(1) INTO v_employer_id FROM corporate 
					 WHERE 
			        employer_id = cur_rec.employer_id;
					
			       IF v_employer_id = 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Invalid employer Id'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;

 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;		
					
				
 SELECT COUNT(1) INTO v_employer_id FROM corporate 
					 WHERE 
			        employer_id = cur_rec.employer_id
			       and status='D';
					
			       IF v_employer_id > 0 THEN
                 UPDATE cms_employee_onboard_temp
                 SET
                     status = 'N',--status = 'R',
                     remarks = 'N',
                     remarks_description = 'Employer is disabled.'
                 WHERE
                     employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                     AND batch_no = p_batch_no
                     AND action_flag = 'A'
 					AND product_id = v_prod_id
                     and status is null;
  					v_excep_cnt :=v_excep_cnt + sql%rowcount;

 dbms_output.put_line(' DUPLICATE '||SQL%ROWCOUNT);
             END IF;		
					

            SELECT
                cust_seq_id,
                cust_ref_number,
                prepaid_account_number,
                prefix,
                length(prefix)
            INTO
                v_cust_id,
                v_cust_ref_no,
                v_prepaid_acc_no,
                v_prefix,
                v_prefix_len
            FROM
                sequence_master
            WHERE
                bin = v_bin
                AND product_id = v_prod_id;
dbms_output.put_line(' v_cust_id '||v_cust_id||' v_cust_ref_no '||v_cust_ref_no||' v_prepaid_acc_no '||v_prepaid_acc_no||v_prefix||v_prefix_len);
  
            v_cust_id := v_prefix
                         || lpad(cast(v_cust_id as integer) + 1,(20 - cast(v_prefix_len as integer)), 0);

            v_cust_ref_no := v_prefix
                             || lpad(cast(v_cust_ref_no as integer) + 1,(20 - cast(v_prefix_len as integer)), 0);

            v_prepaid_acc_no := v_prefix
                                || lpad(cast(v_prepaid_acc_no as integer) + 1,(20 - cast(v_prefix_len as integer)), 0);

            INSERT INTO cms_cust_details (
                employee_id,
                employer_id,
				first_name,
				last_name,
                date_of_birth,
                mobile_number,
                current_address_line1,
                employee_account_number,
                kyc_flag,
                batch_no,
                cust_ref_number,
                prepaid_account_number,
                uploaded_by,
                uploaded_on,
                cust_seq_id,
                card_gen_date,
                card_gen_by,
                pin_gen_date,
                pin_gen_by,
                cvv_gen_date,
                cvv_gen_by,
                embossing_file_gen_date,
                embossing_file_gen_by,
                embossing_file_name,
                checker_verified_on,
                checker_verified_by,
                tag_generated_by,
                tag_generated_date,
				age,
				bin,
				current_pin_code,
				permanent_pin_code,
				branch_id,
				issuer_id,
				product_id,
				card_type,
                employee_active_status,
                employee_active_status_date,
				employee_mol_id,
				Emirates_Id,
				Emirates_name,
				Nationality,
				product_code,
				embossa_name1,
				embossa_name2,
				embossa_name3,
				embossname,
				current_city ,
				current_state ,
				current_country ,
				gender,
				mothers_name,
				card_holder_code
            )
                SELECT
                    employee_id,
                    employer_id,
					employee_first_name,
					employee_last_name,
                    employee_dob,
                    nvl (employee_mobile_number,'0'),
                    employee_address,
                    employee_account_number,
                    kyc_flag,
                    p_batch_no,
                    v_cust_ref_no,
                    v_prepaid_acc_no,
                    p_user_id,
                    sysdate,
                    v_cust_id,
                    NULL,
                    0,
                    NULL,
                    0,
                    NULL,
                    0,
                    NULL,
                    0,
                    NULL,
                    sysdate,
                    p_user_id,
                    0,
                    NULL,   
					0,
					bin,
					0,
					0,
					0,
					(select distinct issuer_id from cms_product where id =v_prod_id),
					product_id,
					'N',
                    'A',
                    sysdate,
					employee_mol_id,
					Emirates_Id,
					Emirates_name,
					Nationality,
					product_code,
					embossa_name1,
					embossa_name2,
					embossa_name3,
					employee_first_name||' '||employee_last_name,
					null,
					null,
					null,
					gender,
					mother_name,
					card_holder_code
                FROM
                    cms_employee_onboard_temp
                WHERE
                    employee_id = cur_rec.employee_id
					AND employee_mol_id=cur_rec.employee_mol_id
					AND Emirates_Id = cur_rec.Emirates_Id
                    AND batch_no = p_batch_no
                    AND action_flag = 'A'
                    AND status IS NULL;

            v_add_count := v_add_count + SQL%rowcount;
dbms_output.put_line(' v_add_count '||v_add_count);
if v_add_count >  0 then
			INSERT INTO account_details (
                        account_id,
                        account_number,
                        host_balance,
                        card_offline_balance,
                        product_id,
                        issuer_id,
                        branch_id,
                        balance_sharing,
                        created_date,
                        created_by,
                        updated_date,
                        updated_by,
                        soft_delete,
                        batch_no,
                        cust_seq_id
                    ) VALUES (
                        accountid_seq.NEXTVAL,
                        v_prepaid_acc_no,
                        0,
                        0,
                        v_prod_id,
                        (select distinct issuer_id from cms_product where id =v_prod_id),
                        null,
                        'N',
                        sysdate,
                        p_user_id,
                        NULL,
                        p_user_id,
                        0,
                        p_batch_no,
                        v_cust_id
                    );		

			    UPDATE  cms_employee_onboard_temp
                
				SET status = 'S',
                    remarks = 'Y',
                    remarks_description = 'SUCCESS'
				WHERE
                    employee_id = cur_rec.employee_id
                    AND batch_no = p_batch_no
                    AND action_flag = 'A'
                    AND status IS NULL;
					
		

            UPDATE sequence_master
            SET
                cust_ref_number = cust_ref_number + 1,
                cust_seq_id = cust_seq_id + 1,
                prepaid_account_number = prepaid_account_number + 1
            WHERE
                bin = v_bin
                AND product_id = v_prod_id;
dbms_output.put_line(' sequence_master UPDATE '||SQL%ROWCOUNT);
end if;
        END LOOP;
    
		
	dbms_output.put_line(' sequence_master N flag '||SQL%ROWCOUNT);
				
			if v_add_count > 0 then
			
			p_card_gen_flag:='Y';
			
			p_card_gen_cnt :=v_add_count;
		dbms_output.put_line(' p_card_gen_flag  '||p_card_gen_flag||' p_card_gen_cnt '||p_card_gen_cnt);
		
			else
			
			p_card_gen_flag:='N';
			p_card_gen_cnt:=v_add_count;
			
				dbms_output.put_line(' p_card_gen_flag  '||p_card_gen_flag||' p_card_gen_cnt '||p_card_gen_cnt);
		
			end if;
				
                        
		 UPDATE sequence_master
        SET
            locked = 'N'
        WHERE
            bin = v_bin
            AND product_id = i.product_id;
   
   
   Insert into cms_employee_onboard_history
(
	id ,
    employee_id ,
    employer_id ,
	employee_first_name,
	employee_last_name,
    employee_dob ,
    employee_mobile_number ,
    employee_address ,
    employee_account_number ,
    kyc_flag  ,
    cust_seq_id ,
    action_flag ,
    status ,
    remarks ,
    remarks_description ,
    batch_no ,
    file_name ,
    file_uploaded_by ,
    file_uploaded_date ,
    product_id ,
    bin,
	employee_mol_id,
	Emirates_Id,
	Emirates_name,
	Nationality,
	product_code,
	embossa_name1,
	embossa_name2,
	embossa_name3,
	gender,
    mother_name,
    card_holder_code,
	record_no
	)
	select 
	id ,
    employee_id ,
    employer_id ,
	employee_first_name,
	employee_last_name,
    employee_dob ,
    employee_mobile_number ,
    employee_address ,
    employee_account_number ,
    kyc_flag  ,
    cust_seq_id ,
    action_flag ,
    status ,
    remarks ,
    remarks_description ,
    batch_no ,
    file_name ,
    file_uploaded_by ,
    file_uploaded_date ,
    product_id ,
    bin, 
	employee_mol_id,
	Emirates_Id,
	Emirates_name,
	Nationality,
	product_code,
	embossa_name1,
	embossa_name2,
	embossa_name3,	
	gender,
    mother_name,
    card_holder_code,
	record_no 
	from cms_employee_onboard_temp where file_name=p_file_name and batch_no=p_batch_no and product_id=i.product_id;  
	p_out:='00';
	p_msg:='Success';
	
   dbms_output.put_line('p_out '||p_out||' p_msg '||p_msg);
		
   end if;
   
   end loop; --product loop
             
			 		  
              INSERT INTO cms_batch_summary_details (
                batch_no,
                created_on,
                created_by,
                entry_mode,
                upload_file_name,
                total_records,
                rejected_records,
                successful_records,
                checker_verified_on,
                checker_verified_by,
                status,
                process_status,
                issuer_id,
                card_dispatch_flag,
                pin_dispatch_falg,
                card_dispatch_updated_by,
                pin_dispatch_updated_by,
                card_dispatch_date,
                pin_dispatch_date,
                pin_awb_no,
                dispatch_status,
                card_awb_no,
                agency_name,
                card_dispatch_to,
                pin_dispatch_to,
                updated_by,
                branch_id,
                instance_issuance_flag,
                outlet_id,
                card_ack_date
            ) VALUES (
                p_batch_no,
                sysdate,
                p_user_id,
                'BU',
                p_file_name,
                (v_total_count + nvl(p_app_rejected_cnt,0)),
                (nvl(p_app_rejected_cnt,0) + NVL(v_excep_cnt,0)),
                (v_add_count+v_update_cnt+v_disable_cnt),
                sysdate,
                p_user_id,
                'CPE',
                NULL,
                v_issuer_id,
                NULL,
                NULL,
                0,
                0,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                NULL,
                p_user_id,
                0,
                NULL,
                0,
                NULL
            );
        
		dbms_output.put_line(' v_total_count '||v_total_count||' p_app_rejected_cnt '||p_app_rejected_cnt||' v_total_count '||v_total_count||' v_add_count '||v_add_count||' v_update_cnt '||v_update_cnt ||' v_disable_cnt '||v_disable_cnt||' v_excep_cnt'||v_excep_cnt);

    
            insert into cms_employee_onboard_summary
                (
                id,
                file_name,
                total_count,
                add_count,
                update_count,
                disable_count,
                success_count,
                reject_count,
                exception_count,
                batch_no,
                file_uploaded_by,
                file_uploaded_date
                )
                values
                (
                seq_emp_onboard_summary.nextval,
                p_file_name,
                (v_total_count + nvl(p_app_rejected_cnt,0)),
                v_add_count,
                v_update_cnt,
                v_disable_cnt,
                (v_add_count+v_update_cnt+v_disable_cnt),
                (nvl(p_app_rejected_cnt,0) + NVL(v_excep_cnt,0)),
                v_excep_cnt,
                p_batch_no,
                p_user_id,
                sysdate
                );
    
    
    
    ELSE
        RAISE excep_file_upload;
    END IF;    --file_upload count check end;

exception
    WHEN excep_file_upload THEN
	    p_out:='01';
        p_msg := 'File is not uploaded into temp table';
    WHEN OTHERS THEN
dbms_output.put_line('ROLLBACK'||sqlcode||SQLERRM);
    rollback;

    get STACKED diagnostics l_context = PG_EXCEPTION_CONTEXT;
    
    p_out:='01';
    --p_msg := 'Error in file upload'||l_context; 
       p_msg := 'Error in file upload'||sqlcode ||sqlerrm;
      
      insert into processlog   values('onboard_employee','prc_onboard_employee','proc',p_msg,sysdate);
       
       	
		
		   dbms_output.put_line('p_out '||p_out||' p_msg '||p_msg);
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_product_setup_view(p_bin character varying, p_product_id character varying, INOUT p_instrument_profile refcursor, INOUT p_bin_profile refcursor, INOUT p_balance_profile refcursor, INOUT p_fee_profile refcursor, INOUT p_txn_profile refcursor, INOUT p_fee_waiver refcursor, INOUT p_product_configuration refcursor, INOUT p_country_blacklist refcursor, INOUT p_mcc refcursor)
 SECURITY DEFINER
AS $procedure$ 

begin 
	
open p_instrument_profile for select pip.*,cp.product_code from prd_instrument_profile pip join prd_bin_profile pid on(pip.id=pid.instrument_profile_id )
join cms_product cp  on(cp.id=pip.product_id)
where pid.bin=p_bin  and cp.product_code =p_product_id;


open p_bin_profile for select pid.*,cp.product_code from prd_instrument_profile pip join prd_bin_profile pid on(pip.id=pid.instrument_profile_id )
join cms_product cp  on(cp.id=pip.product_id)
where pid.bin=p_bin  and cp.product_code =p_product_id;

open p_balance_profile for select pbpn.*,cp.product_code from prd_instrument_profile pip join prd_bin_profile pid on(pip.id=pid.instrument_profile_id )
join prd_balance_profile_new pbpn on(pbpn.instrument_profile_id=pip.id) 
join cms_product cp  on(cp.id=pip.product_id)
where pid.bin=p_bin  and cp.product_code =p_product_id;


open p_fee_profile for select pbpn.*,cp.product_code from prd_instrument_profile pip join prd_bin_profile pid on(pip.id=pid.instrument_profile_id )
join prd_fee_profile pbpn on(pbpn.instrument_profile_id=pip.id) 
join cms_product cp  on(cp.id=pip.product_id)
where pid.bin=p_bin  and cp.product_code =p_product_id;


open p_txn_profile for select pbpn.*,cp.product_code from prd_instrument_profile pip join prd_bin_profile pid on(pip.id=pid.instrument_profile_id )
join prd_txn_profile pbpn on(pbpn.instrument_profile_id=pip.id) 
join cms_product cp  on(cp.id=pip.product_id)
where pid.bin=p_bin  and cp.product_code =p_product_id;

open p_fee_waiver for select pcs.*,pfwgc.group_name from pcs_fee_waiver pcs join pcs_fee_waiver_group_config pfwgc on(pcs.group_id=pfwgc.group_id);


open p_product_configuration for select cp.* from prd_instrument_profile pip join prd_bin_profile pid on(pip.id=pid.instrument_profile_id )
join cms_product cp  on(cp.id=pip.product_id)
where pid.bin=p_bin  and cp.product_code =p_product_id;

open p_country_blacklist for select ccb.* from cms_country_blacklist ccb join prd_instrument_profile pip on(ccb.instrument_id=pip.id)
join cms_product cp  on(cp.id=pip.product_id)
where ccb.bin=p_bin and cp.product_code =p_product_id;


open p_mcc for select * from aswt_mcc_check;

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_queue_release(p_hash_card_number character varying, p_wallet_id numeric, OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

    v_host_and_shadow_bal     VARCHAR2(30);
    v_total_bal               NUMBER := 0;
    v_host_bal                NUMBER := 0;
    v_shadow_bal              NUMBER := 0;
    v_queue_cnt               NUMBER := 0;
    v_issuer_id               card_detail.issuer_id%TYPE;
    v_instrument_profile_id   NUMBER;
    v_product_id              NUMBER;
    v_instant                 card_detail.is_instant%TYPE;
    v_fee_annual_fee_amt      NUMBER := 0;
    v_annual_fee_cnt          NUMBER := 0;
    v_man_adj_cnt             NUMBER := 0;
    v_man_adj_amt             NUMBER := 0;
    v_queue_flag          varchar2(10);
    v_prep_account_no  varchar2(50);
  --  PRAGMA autonomous_transaction;
BEGIN
------------------------------------------
-- Block 1 : Annual Fee Queue Mecahnism
------------------------------------------

	insert into processlog (process_id,object_name,object_type,comments,entry_date)
	values('prc_queue_release','prc_queue_release',null,'card number before loop p_wallet_id'||p_wallet_id||'--'||p_hash_card_number,sysdate);

dbms_output.put_line(' Before loop');

   for x in (select * from cs_fee_queue where card_number = p_hash_card_number
        AND queue_released_flag = 'N'  and drcr in ('Dr','D') order by entry_date_time) loop
   dbms_output.put_line(' inside loop');

        SELECT
            cd.product_id,
            cd.issuer_id,
            cd.is_instant,
            cp.queue_flag,
            cd.prep_account_number
        INTO
            v_product_id,
            v_issuer_id,
            v_instant,
            v_queue_flag,
            v_prep_account_no
        FROM
            card_detail cd
        join prd_fee_profile cp on (cp.product_id = cd.product_id)    
        WHERE
            hash_card_number = x.card_number
           and cp.txn_type  = x.fee_ind;



        SELECT
            balance_check_wallet(x.card_number,p_wallet_id)
        INTO v_host_bal
        FROM
            dual;

        dbms_output.put_line('v_host_bal' || v_host_bal);
       
       insert into processlog (process_id,object_name,object_type,comments,entry_date)
	values('prc_queue_release','prc_queue_release',null,'v_host_bal and total and txn type'||v_host_bal||'--'||x.fee_ind,sysdate);

        
        IF x.queue_type = 'F' then 
        
        IF nvl(v_queue_flag,'N') = 'N' then 
        
        dbms_output.put_line(' inside fee');
        
        INSERT INTO cs_fee_temp (
                date_time,
                fee_description,
                card_number,
                fee_amt,
                rrn,
                reversal_flag,
                settle_date,
                acc_flag,
                fee_ind,
                acc_date,
                seq_id,
                balance_update_flag,
                balance_update_date,
                bal_update_flag_ruk,
                bal_update_date_ruk,
                rev_org_seq_id,
                tid,
                stan,
                batch_number,
                ticket_id,
                entry_date_time,
                drcr,
                bal_update_settl_flag,
                bal_update_settl_date,               
                wallet_id,
                prepaid_account_number
            )values(                
                    sysdate,--x.date_time,
                    x.fee_description,
                    x.card_number,
                    x.fee_amt,
                    x.rrn,
                    NULL,
                    NULL,
                    NULL,
                    x.fee_ind,
                    NULL,
                    x.seq_id,
                    'N',
                    NULL,
                    'N',
                    NULL,
                    NULL,
                    x.tid,
                    NULL,
                    NULL,
                    NULL,
                    sysdate,
                    x.drcr,
                    NULL,
                    NULL,
                    p_wallet_id,
                    v_prep_account_no
                );

            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = x.card_number
                and rrn = x.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id=x.id;
          
        update account_details a     
         set available_balance  = available_balance - x.fee_amt,
            current_balance = current_balance - x.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =p_wallet_id;
        
        
        else
        
        IF v_host_bal >= x.fee_amt THEN
            dbms_output.put_line('feee insert 2');             
                
        INSERT INTO cs_fee_temp (
                date_time,
                fee_description,
                card_number,
                fee_amt,
                rrn,
                reversal_flag,
                settle_date,
                acc_flag,
                fee_ind,
                acc_date,
                seq_id,
                balance_update_flag,
                balance_update_date,
                bal_update_flag_ruk,
                bal_update_date_ruk,
                rev_org_seq_id,
                tid,
                stan,
                batch_number,
                ticket_id,
                entry_date_time,
                drcr,
                bal_update_settl_flag,
                bal_update_settl_date,
                wallet_id,
                prepaid_account_number
            )values(                
                    sysdate,--x.date_time,
                    x.fee_description,
                    x.card_number,
                    x.fee_amt,
                    x.rrn,
                    NULL,
                    NULL,
                    NULL,
                    x.fee_ind,
                    NULL,
                    x.seq_id,
                    'N',
                    NULL,
                    'N',
                    NULL,
                    NULL,
                    x.tid,
                    NULL,
                    NULL,
                    NULL,
                    sysdate,
                    x.drcr,
                    NULL,
                    NULL,
                    p_wallet_id,
                    v_prep_account_no
                );
                
            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = x.card_number
                and rrn = x.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id = x.id;
            
           update account_details a     
         set available_balance  = available_balance - x.fee_amt,
            current_balance = current_balance - x.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =p_wallet_id; 

        END IF;

    END IF;

   
   else
   
     IF nvl(v_queue_flag,'N') = 'N' then 
        
        INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            seq_id,
            adjustment_related_to,
            approval_code,
            remarks,
            wallet_id,
            maker_id,
            checker_id,
            prepaid_account_number 
        ) VALUES (
            sysdate,--x.date_time,
            to_char(sysdate, 'hh24mmss'),
            x.card_number,
            x.reference_number,
            case when x.remarks = 'Proactive Late Settlement Debit' then 'Proactive Late Settlement Debit' else x.mcc end,
            x.fee_amt,
            'D',
            x.source,
            SYSDATE,
            'A',
            case when x.remarks = 'Proactive Late Settlement Debit' then 'Debit Recovery' else null end,
            SYSDATE,
            x.rrn,
            x.tid,
            x.cs_process_id,
            x.fee_ind,
            x.settlement_date,
            x.seq_id,
            x.adjustment_related_to,
            x.f038,
            x.remarks,
            p_wallet_id,
            x.maker_id,
            x.checker_id,
            v_prep_account_no
        )  
       ;              
            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = x.card_number
                and rrn = x.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id = x.id;
              
       update account_details a     
         set available_balance  = available_balance - x.fee_amt,
            current_balance = current_balance - x.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =p_wallet_id;        
          
        
        else
        
        IF v_host_bal >= x.fee_amt THEN
            dbms_output.put_line('feee insert ');
             
                
       INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            seq_id,
            adjustment_related_to,
            approval_code,
            remarks,
            wallet_id,
            maker_id,
            checker_id,
            prepaid_account_number
        ) VALUES (
            sysdate,--x.date_time,
            to_char(sysdate, 'hh24mmss'),
            x.card_number,
            x.reference_number,
            case when x.remarks = 'Proactive Late Settlement Debit' then 'Proactive Late Settlement Debit' else x.mcc end,
            x.fee_amt,
            'D',
            x.source,
            SYSDATE,
            'A',
            case when x.remarks = 'Proactive Late Settlement Debit' then 'Debit Recovery' else null end,
            SYSDATE,
            x.rrn,
            x.tid,
            x.cs_process_id,
            x.fee_ind,
            x.settlement_date,
            x.seq_id,
            x.adjustment_related_to,
            x.f038,
            x.remarks,
            p_wallet_id,
            x.maker_id,
            x.checker_id,
            v_prep_account_no
        )  
        ;
            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = x.card_number
                and rrn = x.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id = x.id;
            
        update account_details a     
         set available_balance  = available_balance - x.fee_amt,
            current_balance = current_balance - x.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =p_wallet_id;      
              

        END IF;

    END IF;
   
   end if;
 end loop;

p_msg := 'Success';

 open p_out for 
  select  'INR' Currency,
           f.fee_amt Amount,
           cp.display_name  Product_name,
           substr(ce.mask_card_number,-4) last_4,
           11111111  contact_centre,
           nvl(cd.communication_number,cd.mobile_no) mobile_no,
           decode(f.fee_ind,'10110','Dormant Card Fee','93133','Annual Fee','10122','Inactive Card Fee') alert_type
  from cs_fee_temp f 
  join card_detail cd on cd.hash_card_number = f.card_number
  join cms_card_detail_extention ce on ce.card_ref_no = cd.card_ref_number
  join cms_product cp on cp.id = cd.product_id
  where f.card_number = p_hash_card_number
  and f.date_time >= sysdate - 5/24/60
  and f.fee_ind in ('10110','93133','10122');

--    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('error'
                             || sqlcode
                             || sqlerrm);
   p_msg := 'error'||sqlerrm;                         
        raise;                    
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_remittances_utility(p_card_ref_no character varying, p_request_txnid character varying, p_txn_flag character varying, p_reversal_flag character varying, p_txn_amount character varying, p_fee_amount character varying, p_rrn_number character varying, OUT p_arn_ref character varying, OUT p_out_msg character varying)
 SECURITY DEFINER
AS $procedure$
    v_hash_card_number   VARCHAR2(100);
    v_avilable_amt       VARCHAR2(20);
    V_AMT                NUMBER;
    v_code               varchar2(10);
    v_msg                varchar2(20);
	v_cnt                number;
	v_arn_ref            varchar2(100);
	v_cnt1               number;
	v_cnt2               number;
    v_avl_bal numeric:=0;
	v_hold_bal numeric:=0;
	v_curr_bal numeric:=0;
    v_prev_bal numeric:=0;
	v_resp_code character varying(5);
	v_resp_msg character varying(50);
	v_settle_flag character varying(1);
    v_prepaid_account_number card_detail.prep_account_number%type;

	pragma autonomous_transaction;
	
BEGIN 
-- RETREVING HASH_CARD_NUMBER FROM CARD_REF_NUMBER
----------------------------------------------------
SELECT
      hash_card_number,prep_account_number
INTO v_hash_card_number,v_prepaid_account_number
FROM
     card_detail
WHERE
     card_ref_number = p_card_ref_no;
     
-- CHECKING REVERSAL FLAG
----------------------------
if(p_reversal_flag != 'Y') then
       -- CHECKING CURRENT HOST BALANCE
       ----------------------------------
        SELECT balance_check(v_hash_card_number) 
        into v_avilable_amt 
        from dual;
       -- CHECKING AVAILABLE BALANCE > THE AMOUNT COMMING
       ----------------------------------------------------
        if(v_avilable_amt>(p_txn_amount+p_fee_amount)) then 
--              V_AMT:=p_txn_amount+p_fee_amount;
--              balance_update(V_hash_card_number,V_AMT::text,'D',v_code,v_msg);
    dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_txn_amount,0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
                  p_out_msg:=fail;
                  return;
       else

--             
--               if(v_code='01' and v_msg='Failure') then
--                  p_out_msg:=fail;
--                  return;
--               end if;
        
--            update account_details ad 
--            set host_balance-(p_txn_amount+p_fee_amount)
--            from (select cust.* from card_detail cd join cms_cust_details cust on
--                 (cd.cust_seq_id=cust.cust_seq_id) where cd.hash_card_number=V_hash_card_number) a
--            where ad.account_number =a.prepaid_account_number;   
        -- CREATING ARN_REF_NO
        ------------------------
           SELECT
           lpad(load_seq.NEXTVAL,16,0)
           INTO v_arn_ref
           FROM dual;
    -- INSERTION FOR P_TXN_AMOUNT
    -------------------------------
    INSERT INTO digital_txn_authorization (
        id,
        arn,
        branch_id,
        card_enc,
        card_token,
        channel_id,
        channel_type,
        date_time,
        dr_cr_flag,
        msg_type,
        response_code,
        txn_amount,
        last_settle_date,
        mid,
        topup_pay_mode,
        topup_txn_refno,
        source_req_id,
        arn_reference,
        pg_mid,
        txn_id,
        ref_tid,
        txn_type,
        settle_flag,
        settle_date,
        available_balance,
        hold_balance,
        current_balance,
        prepaid_account_number,
        previous_balance 
    ) VALUES (
        digital_txn_seq.NEXTVAL,
        'SUCCESS',
        null,
        v_hash_card_number,
        v_hash_card_number,
        null,--channel id
        null, --p_channel_type
        SYSDATE,
        'Dr',
        (select typ.txn_name from transaction_type typ where typ.txn_type =p_txn_flag),
        '00',
        p_txn_amount,
        SYSDATE,
        null, --mid
        null, --p_pay_mode
        null, -- p_pay_txn_ref_no
        null, --p_src_req_id
        v_arn_ref,
        null, --p_pg_mid
        p_request_txnid, --p_txn_id
        null,  --p_ref_tid
		p_txn_flag, -- Txn_type for remitance   
        v_settle_flag,
        systimestamp,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_prepaid_account_number,
        v_prev_bal
		);

	end if;



  dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_fee_amount,0,'D','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
                  p_out_msg:=fail;
                  return;
       else

    -- INSERTION FOR P_FEE_AMOUNT
    -------------------------------
        INSERT INTO digital_txn_authorization (
        id,
        arn,
        branch_id,
        card_enc,
        card_token,
        channel_id,
        channel_type,
        date_time,
        dr_cr_flag,
        msg_type,
        response_code,
        txn_amount,
        last_settle_date,
        mid,
        topup_pay_mode,
        topup_txn_refno,
        source_req_id,
        arn_reference,
        pg_mid,
        txn_id,
        ref_tid,
        txn_type,
        settle_flag,
        settle_date,
        available_balance,
        hold_balance,
        current_balance ,
        prepaid_account_number ,
        previous_balance 
    ) VALUES (
        digital_txn_seq.NEXTVAL,
        'SUCCESS',
        null,
        v_hash_card_number,
        v_hash_card_number,
        null,--channel id
        null, --p_channel_type
        SYSDATE,
        'Dr',
        (select typ.txn_name from transaction_type typ where typ.txn_type =p_txn_flag),
        '00',
        p_fee_amount,
        SYSDATE,
        null, --mid
        null, --p_pay_mode
        null, -- p_pay_txn_ref_no
        null, --p_src_req_id
        v_arn_ref,
        null, --p_pg_mid
        p_request_txnid, --p_txn_id
        null,  --p_ref_tid
		p_txn_flag, -- Txn_type for remitance   
        v_settle_flag,
        systimestamp,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_prepaid_account_number,
        v_prev_bal
      );
        
     end if;
		  p_arn_ref:=v_arn_ref;
          p_out_msg:='success';
        else -- AMOUNT LESS THAN AVAILABLE AMOUNT (DEBIT)
		  p_arn_ref:='0';
          p_out_msg:='AMOUNT LESS THAN AVAILABLE AMOUNT';
        end if;
else   --REVERSAL FLAG=Y

      -- FINDING SUM ON THE BASIS OF ARN REF NO
      ------------------------------------------
	    -- a. If reversal already done
		SELECT
              count(1) INTO v_cnt
          FROM digital_txn_authorization dta
          WHERE arn_reference = p_rrn_number
		  and utility_reversal_flag='Y'
		  and dr_cr_flag='Dr';
		  
		  if(v_cnt>0 and v_cnt=2)then
		     p_arn_ref:='0';
		     p_out_msg:='already reversal performed';
		     return;
		  end if;	  
	  
         SELECT
              SUM(txn_amount) INTO V_AMT
          FROM digital_txn_authorization dta
          WHERE arn_reference = p_rrn_number
		  and dr_cr_flag='Dr';
		  
		 -- b. Checking if debited transaction are present
		  if(V_AMT is null) then	
             p_arn_ref:='0';		  
		     p_out_msg:='The debited Transaction are not present';
			 return;
		  end if; 

        -- c. Checking amount for same transaction 
		  SELECT
              count(1) INTO V_cnt1
          FROM digital_txn_authorization dta
          WHERE arn_reference = p_rrn_number
		  and dr_cr_flag='Dr'
		  and txn_amount=p_txn_amount;
		  
		  SELECT
              count(1) INTO V_cnt2
          FROM digital_txn_authorization dta
          WHERE arn_reference = p_rrn_number
		  and dr_cr_flag='Dr'
		  and txn_amount=p_fee_amount;
		  
		  if(V_cnt1=0 or V_cnt2=0) then
		    p_arn_ref:='0';
		    p_out_msg:='The amt is not proper';
			 return;		  
		  end if;		  
		  

		 
		    -- CREATING ARN_REF_NO
        ------------------------
           SELECT
           lpad(load_seq.NEXTVAL,16,0)
           INTO v_arn_ref
           FROM dual;
		 
		 
dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_txn_amount,0,'C','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
                  p_out_msg:=fail;
                  return;
       else
		 
		 
		 
     
	 -- INSERTION FOR P_TXN_AMOUNT
     -------------------------------
    INSERT INTO digital_txn_authorization (
        id,
        arn,
        branch_id,
        card_enc,
        card_token,
        channel_id,
        channel_type,
        date_time,
        dr_cr_flag,
        msg_type,
        response_code,
        txn_amount,
        last_settle_date,
        mid,
        topup_pay_mode,
        topup_txn_refno,
        source_req_id,
        arn_reference,
        pg_mid,
        txn_id,
        ref_tid,
        txn_type,
        utility_reversal_flag,
        settle_flag,
        settle_date,
        available_balance,
        hold_balance,
        current_balance,
        prepaid_account_number,
        previous_balance 
    ) VALUES (
        digital_txn_seq.NEXTVAL,
        'SUCCESS',
        null,
        v_hash_card_number,
        v_hash_card_number,
        null,--channel id
        null, --p_channel_type
        SYSDATE,
        'Cr',
        (select typ.txn_name from transaction_type typ where typ.txn_type =p_txn_flag),
        '00',
        p_txn_amount,
        SYSDATE,
        null, --mid
        null, --p_pay_mode
        null, -- p_pay_txn_ref_no
        null, --p_src_req_id
        v_arn_ref,
        null, --p_pg_mid
        p_request_txnid, --p_txn_id
        null,  --p_ref_tid
		p_txn_flag, -- Txn_type for remitance  
		'Y', 
        v_settle_flag,
        sysdate,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_prepaid_account_number,
        v_prev_bal
		);

	end if;

dbms_output.put_line('before account update proc call '||v_hash_Card_number);

      account_balance_update(v_hash_Card_number,p_fee_amount,0,'C','N',v_resp_code,v_resp_msg,v_settle_flag,v_avl_bal,v_hold_bal,v_curr_bal,v_prev_bal);
    
        dbms_output.put_line('after account update proc call '||v_hash_Card_number||v_resp_code||v_resp_msg||v_settle_flag||v_avl_bal||v_hold_bal||v_curr_bal||v_prev_bal);

         if v_resp_code !='00' then
         
                  p_out_msg:=fail;
                  return;
       else
		 
		 

    -- INSERTION FOR P_FEE_AMOUNT
    -------------------------------
        INSERT INTO digital_txn_authorization (
        id,
        arn,
        branch_id,
        card_enc,
        card_token,
        channel_id,
        channel_type,
        date_time,
        dr_cr_flag,
        msg_type,
        response_code,
        txn_amount,
        last_settle_date,
        mid,
        topup_pay_mode,
        topup_txn_refno,
        source_req_id,
        arn_reference,
        pg_mid,
        txn_id,
        ref_tid,
        txn_type,
        utility_reversal_flag,
        settle_flag,
        settle_date,
        available_balance,
        hold_balance,
        current_balance,
        prepaid_account_number,
        previous_balance 
    ) VALUES (
        digital_txn_seq.NEXTVAL,
        'SUCCESS',
        null,
        v_hash_card_number,
        v_hash_card_number,
        null,--channel id
        null, --p_channel_type
        SYSDATE,
        'Cr',
        (select typ.txn_name from transaction_type typ where typ.txn_type =p_txn_flag),
        '00',
        p_fee_amount,
        SYSDATE,
        null, --mid
        null, --p_pay_mode
        null, -- p_pay_txn_ref_no
        null, --p_src_req_id
        v_arn_ref,
        null, --p_pg_mid
        p_request_txnid, --p_txn_id
        null,  --p_ref_tid
		p_txn_flag, -- Txn_type for remitance   
        'Y', 
        v_settle_flag,
        systimestamp,
        v_avl_bal,
        v_hold_bal,
        v_curr_bal,
        v_prepaid_account_number,
        v_prev_bal
		);    
	
	end if;

        update digital_txn_authorization
		set utility_reversal_flag='Y'
		WHERE arn_reference = p_rrn_number
		and utility_reversal_flag is null
		and dr_cr_flag='Dr';
		

-- CREDIT THE AMOUNT IN ACCOUNT DETAILS
-----------------------------------------          
--               balance_update(V_hash_card_number,V_AMT::text,'C',v_code,v_msg);
--               if(v_code='01' and v_msg='Failure') then
--                  p_out_msg:=fail;
--                  return;
--               end if;
--              
       
            p_arn_ref:=v_arn_ref;  
            p_out_msg:='success';
END IF;
commit;
exception
      when others then
	       p_arn_ref:='0';
           p_out_msg:='fail'||sqlerrm;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_schedule_fee(p_frequency character varying)
 SECURITY DEFINER
AS $procedure$ 
v_fee_deduct_cnt number :=0;
v_hash_card_number card_detail.hash_card_number%type;
v_status card_detail.status%type;
v_card_ref_number card_detail.card_ref_number%type;
v_out character varying (10);
v_msg character varying (500);
begin 

--loop for sms card fee
for cur_rec in(
select distinct prepaid_account_number from card_detail cd join cms_cust_details cust on(cd.prep_account_number=cust.prepaid_account_number) 
join account_details ad on(ad.account_number=cd.prep_account_number)
where cust.employee_active_status ='A'
and not exists (select 1 from cs_fee_temp cft where cft.prepaid_account_number=cd.prep_account_number and cft.fee_ind ='10121'
and  trunc(cft.date_time) >=decode (p_frequency,'1',trunc(sysdate),'2',date_trunc('week', sysdate),'3',date_trunc('month', sysdate),'4',date_trunc('year', sysdate))
)
)

loop

	dbms_output.put_line('sms card fee '||cur_rec.prepaid_account_number);	
select hash_Card_number,status,card_ref_number into v_hash_card_number,v_status,v_card_ref_number from (
select row_number() over (order by created_date desc) rn, cd.hash_card_number,cd.status,cd.card_ref_number  from card_detail cd where prep_account_number  = cur_rec.prepaid_account_number
) where rn=1;


prc_deduct_issuance_fee(v_card_ref_number,'10121',null,v_out,v_msg);

dbms_output.put_line('v_out '||v_out||' v_msg '||v_msg||' card ref number '||v_card_ref_number);

end loop;	
	
--loop for card statement fee
for cur_rec in(
select distinct prepaid_account_number from card_detail cd join cms_cust_details cust on(cd.prep_account_number=cust.prepaid_account_number) 
join account_details ad on(ad.account_number=cd.prep_account_number)
where cust.employee_active_status ='A'
and not exists (select 1 from cs_fee_temp cft where cft.prepaid_account_number=cd.prep_account_number and cft.fee_ind ='10113'
and  trunc(cft.date_time) >=decode (p_frequency,'1',trunc(sysdate),'2',date_trunc('week', sysdate),'3',date_trunc('month', sysdate),'4',date_trunc('year', sysdate))
)
)

loop
	dbms_output.put_line('card statement fee ');
select hash_Card_number,status,card_ref_number into v_hash_card_number,v_status,v_card_ref_number from (
select row_number() over (order by created_date desc) rn, cd.hash_card_number,cd.status,cd.card_ref_number  from card_detail cd where prep_account_number  = cur_rec.prepaid_account_number
) where rn=1;

dbms_output.put_line('v_hash_card_number '||v_hash_card_number||' v_status '||v_status||' v_card_ref_number '||v_card_ref_number);
prc_deduct_issuance_fee(v_card_ref_number,'10113',null,v_out,v_msg);

dbms_output.put_line('v_out '||v_out||' v_msg '||v_msg||' card ref number '||v_card_ref_number);

end loop;	


end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_settlement_process(p_file_name character varying, p_user_id character varying, OUT p_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$
v_start_date           VARCHAR2(50) := NULL;
v_end_date             VARCHAR2(50) := NULL;
v_temp_rowid           VARCHAR2(100) := NULL;
v_process_reverse      VARCHAR2(100) := NULL;
v_rollback_complete    VARCHAR2(100) := NULL;
v_txn_cnt              NUMBER := 0;
v_txn_amt              NUMBER := 0;

v_file_type character varying(25);
v_file_code character varying(4);
v_file_description character varying(100);
v_network character varying(20);
v_file_cnt numeric DEFAULT 0;
v_process_id character varying(200);
v_process_complete character varying(50) DEFAULT NULL;
v_err_msg character varying(1000);
Invalid_input_parameter EXCEPTION;

BEGIN 
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'started parameter..'||p_file_name||' p_user_id '||p_user_id, systimestamp);

IF p_file_name is null and p_user_id is null then

RAISE Invalid_input_parameter;

END IF;

SELECT
    file_type,
    file_code,
    file_name_description,
    network
INTO
    v_file_type,
    v_file_code,
    v_file_description,
    v_network
FROM
    cs_config_filenamemaster
WHERE
    file_code = 'MR';
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'v_file_type '||v_file_type||' v_file_code '||v_file_code||' v_file_description '||v_file_description||'v_network '||v_network, systimestamp);

dbms_output.put_line('v_file_type '||v_file_type||' v_file_code '||v_file_code||' v_file_description '||v_file_description||'v_network '||v_network);
	
--file type start    
IF v_file_type='INC' THEN
        SELECT
            COUNT(file_name)
        INTO v_file_cnt
        FROM
            cs_filemaster
        WHERE
            file_name = p_file_name;
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'v_file_cnt '||v_file_cnt, systimestamp);
			
dbms_output.put_line('v_file_cnt '||v_file_cnt);
  IF v_file_cnt = 0 THEN 

          SELECT
            'RIM.'
            || to_char(sysdate, 'DDMMYY')
            || '.'
            || lpad(incoming_file_seq.NEXTVAL, 5, '0')
            INTO v_process_id
            FROM
                dual;
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'v_process_id '||v_process_id, systimestamp);
				
dbms_output.put_line('v_process_id '||v_process_id);

            UPDATE cs_mercury_intemp
            SET
                process_id = v_process_id
            WHERE
                ide003 = p_file_name;    
                
              
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'v_process_id cnt '||sql%rowcount, systimestamp);				
dbms_output.put_line('v_process_id cnt '||sql%rowcount);

            INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    process_complete,
                    process_reverse,
                    rollback_complete,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id,
                    entry_date
                ) VALUES
                 (
                    v_process_id,
                    p_file_name,
                    v_process_complete,
                    v_process_reverse,
                    v_rollback_complete,
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    p_user_id,
                    '7',
                    sysdate
                );
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'insert file rollback cnt '||sql%rowcount, systimestamp);				

dbms_output.put_line('insert file rollback cnt '||sql%rowcount);

              /*Header Trailer txn updation Start*/  
                
                --RECAP HEADER TRAILER INSERT 
                
                INSERT INTO CS_MERCURY_RECAP_HDRTRL (
                            process_id,
                            file_name,
                            id,
                            ide012,
                            ide013,
                            de093,
                            ide005,
                            de094,
                            pds0306_cr,
                            pds0301_cr,
                            pds0306_dr,
                            pds0301_dr,
                            pds0146_fee_type_1,
                            pds0301,
                            ide027,
                            ide028,
                            ide029,
                            ide030,
                            pds0159_sett_date,
                            ide031
                        )
                            SELECT
                                process_id,
                                ide003,
                                id,
                                ide012,
                                ide013,
                                de093,
                                ide005,
                                de094,
                                pds0306_cr,
                                pds0301_cr,
                                pds0306_dr,
                                pds0301_dr,
                                pds0146_fee_type_1,
                                pds0301,
                                ide027,
                                ide028,
                                ide029,
                                ide030,
                                pds0159_sett_date,
                                ide031
                            FROM
                                cs_mercury_intemp
                            WHERE
                                process_id = v_process_id
                               and ide003 = p_file_name
                                AND ide013 IN( 'UX','UY');
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'insert recap hdrtrl  cnt '||sql%rowcount, systimestamp);				
								
 dbms_output.put_line('insert recap hdrtrl  cnt '||sql%rowcount);
                   
                    
                 ---BATCH HEADER TRAILER INSERT
                 
                   
                   INSERT INTO cs_mercury_batch_hdrtrl (
                                process_id,
                                file_name,
                                id,
                                ide012,
                                ide013,
                                de093,
                                ide005,
                                de094,
                                ide014,
                                ide001,
                                pds0306_cr,
                                pds0301_cr,
                                pds0306_dr,
                                pds0301_dr
                            )
                                SELECT
                                    process_id,
                                    ide003,
                                    id,
                                    ide012,
                                    ide013,
                                    de093,
                                    ide005,
                                    de094,
                                    ide014,
                                    ide001,
                                    pds0306_cr,
                                    pds0301_cr,
                                    pds0306_dr,
                                    pds0301_dr
                                FROM
                                    cs_mercury_intemp
                                WHERE
                                    process_id = v_process_id
                                   and ide003 = p_file_name
                                    AND ide013 IN (
                                        'UH',
                                        'UT'
                                    );
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'insert batch hdrtrl  cnt '||sql%rowcount, systimestamp);				
									
 dbms_output.put_line('insert batch hdrtrl  cnt '||sql%rowcount);
									
									
                --Need to update txn level header trailer

              /*Header Trailer txn updation end*/  

              /*Reconcilation merge started*/
--              MERGE INTO aswt_switch_txn_authrization auth 
--              USING (SELECT
--                            int.id,
--                            int.process_id,
--                            swt.rowid rw
--                    FROM
--                        cs_mercury_intemp int JOIN aswt_switch_txn_authrization   swt 
--                        ON (  int.de002 = swt.f002
--                             AND int.de037 = swt.f037     
--                             AND int.de041 = swt.f041
--                             AND int.de012 = swt.f012
--                             AND int.de004 = swt.f004
--                             AND swt.f039 = '00'
--                             AND swt.settle_flag IS NULL
--                             AND int.process_id=v_process_id
--                            )
--                        )inc
--                  ON(auth.rowid=inc.rw)      
--                WHEN MATCHED THEN UPDATE
--                SET auth.settle_flag = 'Y',
--                    auth.settle_date = sysdate,
--                    auth.cs_id = inc.id,
--                    auth.cs_process_id = inc.process_id;
 dbms_output.put_line('before for loop recon');
proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'before for loop recon', systimestamp);				
	
   for cur_rec in(SELECT
                            int.id,
                            int.process_id,
                            swt.f002,
                             swt.f037,     
                             swt.f041,
                             swt.f012,
                             swt.f004,
                             swt.f039,
                             swt.f038
                             
                    FROM
                        cs_mercury_intemp int , card_encryption_detail ced, aswt_switch_txn_authrization swt ,card_detail cd
                        where int.de002 = ced.enrypted_card_no
							and  ced.card_ref_number=cd.card_ref_number
							and  cd.hash_card_number=swt.f002
                        --     AND int.de037 = swt.f037     
                         --    AND int.de041 = swt.f041
							 AND int.de038=swt.f038
                             AND int.de012 = substr(swt.txn_date,7,2)|| swt.f013
                             AND int.de004 = to_number(swt.f004)
                             AND swt.f039 = '00'
                             AND (swt.settle_flag is null or swt.settle_flag='N')
                             AND int.process_id=v_process_id
                            ) loop
                            
                            update aswt_switch_txn_authrization auth set 
                            auth.settle_flag = 'Y',
                            auth.settle_date = sysdate,
                            auth.cs_id = cur_rec.id,
                            auth.cs_process_id = cur_rec.process_id
                            where auth.f002= cur_rec.f002
                            -- AND auth.f037=cur_rec.f037      
                           --  AND auth.f041=cur_rec.f041
						      AND auth.f038=cur_rec.f038
                             AND auth.f012=cur_rec.f012
                             AND auth.f004=cur_rec.f004
                             ANd auth.f039 = '00';
                           end loop; 
                            
  proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'after for loop recon', systimestamp);				
                          
     dbms_output.put_line('after for loop recon');
                        
                            
     dbms_output.put_line('before intemp for loop recon');                       
                            
--              MERGE INTO cs_mercury_intemp inc 
--              USING (SELECT
--                            swt.unique_txn_id,
--                            swt.settle_date,
--                            int.rowid rw
--                    FROM
--                        aswt_switch_txn_authrization   swt  join cs_mercury_intemp int  
--                        ON ( swt.f002 = int.de002 
--                             AND swt.f037 = int.de037    
--                             AND swt.f041 = int.de041
--                             AND swt.f012 = int.de012
--                             AND swt.f004 = int.de004 
--                             AND swt.f039 = '00'
--                             AND int.recon_flag IS NULL
--                            )
--                        )auth
--
--                 ON(inc.rowid=auth.rowid)       
--                WHEN MATCHED THEN UPDATE
--                SET inc.recon_flag = 'Y',
--                inc.recon_date = SYSDATE,
--                inc.settlement_date=auth.settle_date,
--                inc.Txn_Unique_Id = auth.unique_txn_id;  

        FOR INC_REC IN(SELECT
                            swt.unique_txn_id,
                            swt.settle_date,
                            int.de002, 
                            int.de037,   
                            int.de041,
                            int.de012,
                            int.de004,
                            int.de038
                    FROM
                        cs_mercury_intemp int  , card_encryption_detail ced, aswt_switch_txn_authrization swt ,card_detail cd
                        where int.de002 = ced.enrypted_card_no
							and  ced.card_ref_number=cd.card_ref_number
							and  cd.hash_card_number=swt.f002
                          --   AND swt.f037 = int.de037    
                         --    AND swt.f041 = int.de041
							 AND swt.f038 = int.de038
                             AND substr(swt.txn_date,7,2)|| swt.f013 = int.de012
                             AND to_number(swt.f004) = int.de004 
                             AND swt.f039 = '00'
                             AND int.recon_flag IS NULL
                             AND int.process_id=v_process_id
                            ) loop
                            
                            update cs_mercury_intemp inc
                            SET inc.recon_flag = 'Y',
                            inc.recon_date = SYSDATE,
                            inc.settlement_date=INC_REC.settle_date,
                            inc.Txn_Unique_Id = INC_REC.unique_txn_id
							where 
							inc.de002=INC_REC.de002 
                       --      AND inc.de037 = int.de037    
                       --      AND inc.de041 = int.de041
					         AND inc.de038 = INC_REC.de038   
                             AND inc.de012 = INC_REC.de012
                             AND inc.de004 = INC_REC.de004 ;
                            
                            end loop;
  proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'after intemp for loop recon', systimestamp);				
   
     dbms_output.put_line('after intemp for loop recon');   

              /*Reconcilation merge ended*/

            /* Insert into master table cs_mercury in   */

            Insert into cs_mercury_in select * from cs_mercury_intemp
            where 
            --process_id=v_process_id
            ide003 = p_file_name
            and  ide013 not in('UX','UY','UH','UT');
   proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'insert intemp  to in '||sql%rowcount, systimestamp);				
    
   dbms_output.put_line('insert intemp  to in '||sql%rowcount);   

              /* Insert into master table cs_mercury in   */
              
              

              /*Insert into cs_filemaster */
                      SELECT
                    COUNT(*),  -- ap 11aug18
                    SUM(de004)
                INTO
                    v_txn_cnt,
                    v_txn_amt
                FROM
                    cs_mercury_intemp
                WHERE
                    process_id = v_process_id
                    AND ide013 NOT IN( 'UX','UY','UH','UT');

                INSERT INTO cs_filemaster (
                    process_id,
                    file_name,
                    file_description,
                    process_date,
                    process_time,
                    transaction_count,
                    transaction_amount,
                    user_id,
                    network
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_file_description,
                    SYSDATE,
                    TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    v_txn_cnt,
                    v_txn_amt,
                    p_user_id,
                    v_network
                );
 proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', 'insert filemaster'||sql%rowcount, systimestamp);				
  				
   dbms_output.put_line('insert filemaster'||sql%rowcount); 
              /*Insert into cs_filemaster */
 
                UPDATE cs_filerollback
                SET
                    process_complete = 'YES'
                WHERE
                    process_id = v_process_id; 
                    
              p_code:='00';
			  p_msg :=p_file_name|| ' ' || v_file_description|| ' is processed successfully';
 dbms_output.put_line(p_code||p_msg);
  proc_processlog(p_file_name, 'procedure', 'prc_settlement_process', p_code||p_msg, systimestamp);			
  
  delete from cs_mercury_intemp where process_id=v_process_id and file_name=p_file_name;
  
  ELSE 
              p_code:='01';
			  p_msg :=p_file_name|| ' '|| v_file_description|| ' File is already process in system';
       dbms_output.put_line(p_code||p_msg);

  END IF;

END IF; 
--file type end

EXCEPTION 

WHEN Invalid_input_parameter THEN
              p_code:='01';
			  p_msg :='File Not Uploaded Successfully!';
       dbms_output.put_line(p_code||p_msg);
WHEN OTHERS THEN

 dbms_output.put_line(' sqlcode '||sqlcode||' sql errm '||sqlerrm ); 
			  p_code:='01';
			  p_msg :='File Not Uploaded Successfully!';
       dbms_output.put_line(p_code||p_msg);

END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_validate_get_resend_otp(p_otp character varying, p_ref_txn_id character varying, p_txn_id character varying, p_service_name character varying, p_action_name character varying, p_mobile character varying, p_otp_flag character varying, p_cust_seq_id character varying, p_issuer_id numeric, OUT p_out character varying, OUT p_error_code character varying)
 SECURITY DEFINER
AS $procedure$

    v_cnt   NUMBER;
    invalid_otp EXCEPTION;
    invalid_resend_otp EXCEPTION;
    invalid_reference_txn_id EXCEPTION;
    invalid_service_name EXCEPTION;
    invalid_all_input EXCEPTION;
    otp_expired EXCEPTION;
    invalid_otp_service_name EXCEPTION;
    invalid_txn_id_service_name EXCEPTION;
    invalid_otp_txn_id EXCEPTION;

    v_otp                NUMBER;
    v_otp_invalid_time   NUMBER;
    invalid_mobile_no EXCEPTION;
    v_otp_exp_time       number;
     l_coutn   number;
    pragma autonomous_transaction;

BEGIN

 insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_GET_RESEND_OTP','PRC_VALIDATE_GET_RESEND_OTP start','PROCEDURE','p_mobile_no for: '||p_mobile ||'-- '||' p_otp_flag '||p_otp_flag||' p_service_name '||p_service_name||' p_otp '||p_otp||' p_issuer_id'||p_issuer_id,sysdate);

select OTP_CARD_EXP 
    into v_otp_exp_time
    from cms_issuer_config 
    where issuer_id = p_issuer_id;
    
    

 IF p_otp_flag in ('GET') then 

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            service_name = p_service_name;
--        AND
--            SYSDATE BETWEEN otp_generated_time AND otp_expiry_time;

    IF
        v_cnt = 0
    THEN
        RAISE invalid_service_name;
        END IF;

---------------------------------------------------------------------------------------------------------

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            service_name = p_service_name
        AND
            ref_txn_id = p_ref_txn_id;
--        AND
--            SYSDATE BETWEEN otp_generated_time AND otp_expiry_time;

    IF
        v_cnt = 0
    THEN
        RAISE invalid_reference_txn_id;
    END IF;

---------------------------------------------------------------------------------------------------------

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            service_name = p_service_name
        AND
            ref_txn_id = p_ref_txn_id
        AND
            otp = p_otp;
--        AND
--            SYSDATE BETWEEN otp_generated_time AND otp_expiry_time;

    IF
        v_cnt = 0
    THEN
        RAISE invalid_otp;
    END IF;

---------------------------------------------------------------------------------------------------------

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            service_name = p_service_name
        AND
            ref_txn_id = p_ref_txn_id
        AND
            otp = p_otp
        AND
            otp_expiry_time >= SYSDATE;

    IF
        v_cnt = 0
    THEN
        RAISE otp_expired;
    ELSE
        p_out := 'SUCCESS';
        p_error_code := '00';
        dbms_output.put_line(p_out);

    UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate,
            NUM_OTP_ATTEMPT  =0
        WHERE 
        --cust_seq_id    =p_cust_seq_id
       -- AND 
        mobile_no        =p_mobile
        AND forget_flag       IS NULL
        and wrong_num_flag    IS NULL
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;
        
        
          insert into cms_otp_details( ID ,
            MOBILE_NUMBER ,
            OTP ,
            STATUS ,
            OTP_GENERATED_TIME ,
            OTP_EXPIRY_TIME ,
            HASH_CARD_NUMBER ,
            ACTION_NAME ,
            VALIDATE_DATE ,
            REF_TXN_ID ,
            SERVICE_NAME)
        values
        (OTP_ID_SEQ.nextval,
           p_mobile ,
            p_otp ,
            'A' ,
            sysdate,
            sysdate + 30/24/60,
            null ,
            p_action_name ,
            null ,
            p_TXN_ID ,
            'VALIDATEOTP'); 

    END IF;
    
 --  elsif p_otp_flag = 'GET' then 
   
 --  null;

   elsif p_otp_flag = 'RESEND' then

   SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
        upper(service_name) = upper(p_service_name);
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('Service COUNT: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE invalid_service_name;
    END IF;
    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        );
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('Mobile No: ' || p_mobile);
    dbms_output.put_line('Mobile COUNT: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE invalid_mobile_no;
    END IF;

--    SELECT
--        otp_invalid_time
--    INTO
--        v_otp_invalid_time
--    FROM
--        cms_web_service_master
--    WHERE
--        upper(services_name) = upper(p_service_name);

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_invalid_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        ) AND
            sys_txn_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;

    IF
        v_cnt >= 3
    THEN
        p_out := 'OTP attempt exceeded.Please try again after 5 minutes';
         p_error_code := '12';
        return;
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        ) AND
            otp = p_otp;
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('OTP: ' || p_otp);
    dbms_output.put_line('OTP COUNT: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE invalid_resend_otp;
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        ) AND
            otp = p_otp
        AND
            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('OTP Expired cnt: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE otp_expired;
    END IF;

    SELECT
        otp
    INTO
        v_otp
    FROM
        (
            SELECT
                otp
            FROM
                cms_otp_details
            WHERE
                    upper(service_name) = upper(p_service_name)
                AND (
                        mobile_number = p_mobile
                    OR
                        mobile_number = '91' || p_mobile
                ) AND
                    otp_expiry_time >= SYSDATE
            ORDER BY otp_generated_time DESC
        )
    WHERE
        ROWNUM = 1;

    IF
        v_otp = p_otp
    THEN
        p_out := 'SUCCESS';
        p_error_code := '00';
        dbms_output.put_line(p_out);

    UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate,
            NUM_OTP_ATTEMPT  =0
        WHERE 
        --cust_seq_id    =p_cust_seq_id
        --AND 
        mobile_no        =p_mobile
        AND forget_flag       IS NULL
        and wrong_num_flag    IS NULL
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;
        
        
        
          insert into cms_otp_details( ID ,
            MOBILE_NUMBER ,
            OTP ,
            STATUS ,
            OTP_GENERATED_TIME ,
            OTP_EXPIRY_TIME ,
            HASH_CARD_NUMBER ,
            ACTION_NAME ,
            VALIDATE_DATE ,
            REF_TXN_ID ,
            SERVICE_NAME)
        values
        (OTP_ID_SEQ.nextval,
           p_mobile ,
            p_otp ,
            'A' ,
            sysdate,
            sysdate + 30/24/60,
            null ,
            p_action_name ,
            null ,
            p_TXN_ID ,
            'VALIDATEOTP'); 
        
    ELSE
        RAISE invalid_resend_otp;
    END IF;

  elsif p_otp_flag = 'RP' then

   SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
        upper(service_name) = upper(p_service_name);
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('Service COUNT: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE invalid_service_name;
    END IF;
    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        );
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('Mobile No: ' || p_mobile);
    dbms_output.put_line('Mobile COUNT: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE invalid_mobile_no;
    END IF;

--    SELECT
--        otp_invalid_time
--    INTO
--        v_otp_invalid_time
--    FROM
--        cms_web_service_master
--    WHERE
--        upper(services_name) = upper(p_service_name);

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_invalid_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        ) AND
            sys_txn_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;

    IF
        v_cnt >= 3
    THEN
        p_out := 'OTP attempt exceeded.Please try again after 5 minutes';
         p_error_code := '12';
        return;
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        ) AND
            otp = p_otp;
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('OTP: ' || p_otp);
    dbms_output.put_line('OTP COUNT: ' || v_cnt);
    
    insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_GET_RESEND_OTP','PRC_VALIDATE_GET_RESEND_OTP 0','PROCEDURE','p_mobile_no for: '||p_mobile ||'-- '||' OTP COUNT '||v_cnt,sysdate);

    IF
        v_cnt = 0
    THEN
              
        UPDATE cms_cust_attempt_details
        SET  NUM_WRONG_NUM_ATTEMPT = nvl(NUM_WRONG_NUM_ATTEMPT,0)+1
        WHERE  
        mobile_no        =p_mobile
        AND forget_flag       IS NULL
        and wrong_num_flag    IS NULL
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;
        
        l_coutn := sql%rowcount;
        
    insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_GET_RESEND_OTP','PRC_VALIDATE_GET_RESEND_OTP 0','PROCEDURE','p_mobile_no for: '||p_mobile ||'-- '||' updated COUNT '||l_coutn,sysdate);
    
        RAISE invalid_resend_otp;
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile
            OR
                mobile_number = '91' || p_mobile
        ) AND
            otp = p_otp
        AND
            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('OTP Expired cnt: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE otp_expired;
    END IF;

    SELECT
        otp
    INTO
        v_otp
    FROM
        (
            SELECT
                otp
            FROM
                cms_otp_details
            WHERE
                    upper(service_name) = upper(p_service_name)
                AND (
                        mobile_number = p_mobile
                    OR
                        mobile_number = '91' || p_mobile
                ) AND
                    otp_expiry_time >= SYSDATE
            ORDER BY otp_generated_time DESC
        )
    WHERE
        ROWNUM = 1;

    IF
        v_otp = p_otp
    THEN
        p_out := 'SUCCESS';
        p_error_code := '00';
        dbms_output.put_line(p_out);

    UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate
        WHERE 
        --cust_seq_id    =p_cust_seq_id
        --AND 
        mobile_no        =p_mobile
        AND forget_flag       IS NULL
        and wrong_num_flag    IS NULL
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;

          insert into cms_otp_details( ID ,
            MOBILE_NUMBER ,
            OTP ,
            STATUS ,
            OTP_GENERATED_TIME ,
            OTP_EXPIRY_TIME ,
            HASH_CARD_NUMBER ,
            ACTION_NAME ,
            VALIDATE_DATE ,
            REF_TXN_ID ,
            SERVICE_NAME)
        values
        (OTP_ID_SEQ.nextval,
           p_mobile ,
            p_otp ,
            'A' ,
            sysdate,
            sysdate + 30/24/60,
            null ,
            p_action_name ,
            null ,
            p_TXN_ID ,
            'VALIDATEOTP'); 

    ELSE
        RAISE invalid_resend_otp;
    END IF; 

   end if;

EXCEPTION
   WHEN invalid_otp THEN
        p_out := 'Invalid OTP';
        p_error_code := '01';
        dbms_output.put_line(p_out);
    WHEN invalid_reference_txn_id THEN
        p_out := 'Invalid Ref Txn Id';
        p_error_code := '02';
        dbms_output.put_line(p_out);
    WHEN invalid_service_name THEN
        p_out := 'Invalid Ref Service Name';
        p_error_code := '03';
        dbms_output.put_line(p_out);
    WHEN invalid_otp_service_name THEN
        p_out := 'Invalid Otp and Ref Service Name';
        p_error_code := '04';
        dbms_output.put_line(p_out);
    WHEN invalid_txn_id_service_name THEN
        p_out := 'Invalid Txn ID and Ref Service Name';
        p_error_code := '05';
        dbms_output.put_line(p_out);
    WHEN invalid_otp_txn_id THEN
        p_out := 'Invalid OTP and Ref Txn ID';
        p_error_code := '06';
        dbms_output.put_line(p_out);
    WHEN invalid_all_input THEN
        p_out := 'Invalid Ref Service Name,Ref Txn ID and OTP';
        p_error_code := '07';
        dbms_output.put_line(p_out);
     WHEN invalid_mobile_no THEN
        p_out := 'Invalid Mobile Number';
        p_error_code := '08';
        dbms_output.put_line(p_out);
    WHEN invalid_resend_otp THEN
        INSERT INTO cms_invalid_otp_details (
            id,
            mobile_number,
            service_name,
            invalid_otp,
            sys_txn_date
        ) VALUES (
            invalid_otp_seq.NEXTVAL,
            p_mobile,
            p_service_name,
            p_otp,
            SYSDATE
        );

     --  COMMIT;
        p_out := 'Invalid OTP .please try again with correct otp';
        p_error_code := '09';
        dbms_output.put_line(p_out);     
    WHEN otp_expired THEN
        UPDATE cms_otp_details
            SET
                status = 'D'
        WHERE
                otp = p_otp
            AND
                ref_txn_id = p_ref_txn_id
            AND
                service_name = p_service_name
            AND
                status = 'A'
            AND
                SYSDATE >= otp_expiry_time;

        p_out := 'OTP Expired';
        p_error_code := '10';
        dbms_output.put_line(p_out);
    WHEN OTHERS THEN
        p_out := 'Error Occured..'
         || sqlcode
         || sqlerrm
         --|| dbms_utility.format_error_backtrace
        ;
         p_error_code := '11';
        dbms_output.put_line(p_out);
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_validate_reset_attempts(p_cust_seq_id character varying, p_mobile_no numeric, p_link_flg character varying, p_issuer_id numeric, OUT p_status numeric, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

  v_cust_cnt           NUMBER;
  v_row_cnt            NUMBER;
  v_Num_Forget_Attempt NUMBER:=0;
  v_num_reset_attempt  NUMBER:=0;
  v_wrong_num_attempt  Number:=0;
  v_num_otp_attempt    NUMBER:=0;  
  v_forget_date        DATE;
  v_reset_date         DATE;
  v_wrong_num_date     DATE;
  v_otp_date           DATE;
  v_issuer_id          number;
  v_otp_exp_time       number;
  v_otp_attempts   NUMBER;
pragma autonomous_transaction;
BEGIN

 insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_RESET_ATTEMPTS','PRC_VALIDATE_RESET_ATTEMPTS start','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'--flag  '||p_link_flg,sysdate);

--    select issuer_id 
--    into v_issuer_id
--    from card_detail cd 
--    where cust_seq_id = p_cust_seq_id;

    select OTP_CARD_EXP ,otp_attempts
    into v_otp_exp_time,v_otp_attempts
    from cms_issuer_config 
    where issuer_id = p_issuer_id;

 --IF p_link_flg ='RO' THEN  --O For OTP

    SELECT COUNT(1)
    INTO v_cust_cnt
    FROM cms_cust_attempt_details
    WHERE 
--    cust_seq_id    =p_cust_seq_id
--    AND 
    mobile_no = p_mobile_no
    AND forget_flag     IS NULL
    and wrong_num_flag is null
    AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
   -- and OTP_LINK_FLAG=p_link_flg
   ;

    dbms_output.put_line(v_cust_cnt);

    IF v_cust_cnt =0 THEN

      INSERT
      INTO cms_cust_attempt_details
        (
          CUST_SEQ_ID,
          mobile_no,
          RESET_FLAG,
          RESET_DATE,
          NUM_RESET_ATTEMPT,
          FORGET_FLAG,
          FORGET_DATE,
          NUM_FORGET_ATTEMPT,
          ENTRY_DATE,
          NUM_WRONG_NUM_ATTEMPT,
          WRONG_NUM_FLAG,
          WRONG_NUM_DATE,
          NUM_OTP_ATTEMPT,
          OTP_FLAG,
          OTP_DATE,
          OTP_LINK_FLAG
        )
        VALUES
        (
          p_cust_seq_id,
          p_mobile_no,
          null,
          null,
          null,
          NULL,
          NULL,
          NULL,
          SYSDATE,
          null,
          null,
          null,
          1,
          'Y',
          sysdate,
          p_link_flg
        );
      v_row_cnt:=sql%rowcount;

      COMMIT;

      dbms_output.put_line('v_row_cnt '||sql%rowcount);

      p_status:=0;
      p_msg   :='SUCCESS';

insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_RESET_ATTEMPTS','PRC_VALIDATE_RESET_ATTEMPTS 0','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'-- '||'v_num_otp_attempt 1',sysdate);
      dbms_output.put_line('p_out '||p_status);
      return;

    END IF;

    IF v_cust_cnt =1 THEN

     SELECT NUM_RESET_ATTEMPT,
        reset_date,NUM_OTP_ATTEMPT,otp_date,NUM_WRONG_NUM_ATTEMPT
      INTO v_num_reset_attempt,
        v_reset_date,v_num_otp_attempt,v_otp_date,v_WRONG_NUM_ATTEMPT
      FROM cms_cust_attempt_details
      WHERE 
--      cust_seq_id      =p_cust_seq_id
--      AND 
      mobile_no = p_mobile_no
      AND forget_flag       IS NULL
      AND wrong_num_flag    IS NULL
      AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
    --  and OTP_LINK_FLAG=p_link_flg
    ;

    insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_RESET_ATTEMPTS','PRC_VALIDATE_RESET_ATTEMPTS 1','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'-- '||'v_num_otp_attempt '||v_num_otp_attempt,sysdate);
-- OP
IF p_link_flg = 'O' then 

    if v_num_otp_attempt > 0 then
 --if (v_num_otp_attempt >= v_otp_attempts OR v_num_reset_attempt >= v_otp_attempts OR v_WRONG_NUM_ATTEMPT >=3) THEN

        p_status:=1;
        p_msg   :='You have exceeded maximum number of attempts of OTP attempts. Please try after 5 minutes';

    else 

        UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate,
            NUM_OTP_ATTEMPT  =nvl(NUM_OTP_ATTEMPT,0)+1
        WHERE 
--        cust_seq_id    =p_cust_seq_id
--        AND
        mobile_no = p_mobile_no
        AND forget_flag       IS NULL
        and wrong_num_flag is null
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
        --and OTP_LINK_FLAG=p_link_flg
        ;

        v_row_cnt           :=sql%rowcount;

        insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_RESET_ATTEMPTS','PRC_VALIDATE_RESET_ATTEMPTS 2','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'--update count '||v_row_cnt,sysdate);

        COMMIT;
        dbms_output.put_line('attempt 2 '||sql%rowcount);

        p_status:=0;
        p_msg   :='SUCCESS';
        end if;

-- elsif p_link_flg = 'O' then

--      p_status:=1;
--         p_msg   :='You have exceeded maximum number of OTP attempts. Please try after 5 minutes';

   else
    if (v_num_otp_attempt >= v_otp_attempts OR v_num_reset_attempt >= v_otp_attempts OR v_WRONG_NUM_ATTEMPT >=3) --AND (24* (sysdate - case when v_otp_date is null then v_reset_date else v_otp_date end)) <= 24
    THEN

        dbms_output.put_line('attempt 4 '||sql%rowcount);

        p_status:=1;
        p_msg   :='You have exceeded maximum number of attempts of OTP attempts. Please try after 5 minutes';

    else 

        UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate,
            NUM_OTP_ATTEMPT  =nvl(NUM_OTP_ATTEMPT,0)+1
        WHERE
--        cust_seq_id    =p_cust_seq_id
--        AND
        mobile_no = p_mobile_no
        AND forget_flag       IS NULL
        and wrong_num_flag is null
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
        --and OTP_LINK_FLAG=p_link_flg
        ;

        v_row_cnt           :=sql%rowcount;

        insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_RESET_ATTEMPTS','PRC_VALIDATE_RESET_ATTEMPTS end','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'--update count '||v_row_cnt||' p_link_flg '||p_link_flg,sysdate);

        COMMIT;
        dbms_output.put_line('attempt 2 '||sql%rowcount);

        p_status:=0;
        p_msg   :='SUCCESS';
        dbms_output.put_line('p_out '||p_status);

      END IF;

END IF;

  END IF;

EXCEPTION

WHEN OTHERS THEN

  p_status:=1;
  p_msg   :='Exception';
  insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('PRC_VALIDATE_RESET_ATTEMPTS','PRC_VALIDATE_RESET_ATTEMPTS start','PROCEDURE','p_mobile_no for: err '||SQLCODE||sqlerrm,sysdate);
  DBMS_OUTPUT.PUT_LINE('Error Occurred '||SQLCODE||sqlerrm);
					   --||dbms_utility.format_error_backtrace);

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE prc_wallet_statement(p_card_ref_number character varying, p_txn_count character varying, p_from_date character varying, p_to_date character varying, p_txn_type character varying, p_wallet_key_identifier character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

   v_first              NUMBER := 1;
    v_last               NUMBER := p_txn_count;
    v_hash_no   card_detail.hash_card_number%TYPE;
    v_count              NUMBER;
    p_wallet_id         NUMBER;
    p_wallet_cnt         number;
   
BEGIN
  SELECT
        hash_card_number
    INTO v_hash_no
    FROM
        card_detail
    WHERE
        card_ref_number = p_card_ref_number;

    IF ( p_txn_count IS NOT NULL OR p_txn_count <> 0 ) AND p_from_date IS NULL AND p_to_date IS NULL AND p_txn_type IS NULL THEN
        dbms_output.put_line('if part');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,                               
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,        
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                    sys_txn_date ,
                                    t.txn_type
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                   date_time,
                                   t.txn_type
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_enc=v_hash_no
                                     and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))  
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                     and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))  
                                   UNION ALL
                                    select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                   t.txn_type 
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE 
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND rownum1 >= v_first
                           AND rownum1 <= v_last
                          order by Transaction_Date||Transaction_Time desc;

    ELSIF p_from_date IS NOT NULL AND p_to_date IS NOT NULL AND ( p_txn_count = 0 OR p_txn_count IS NULL ) AND p_txn_type IS NULL
    THEN
        dbms_output.put_line('if part 2');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time, 
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                          sys_txn_date,
                                   t.txn_type       
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                     and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))  
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type     t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_enc=v_hash_no
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                     select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                  and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))     
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE 
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND trunc(req.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
                          order by Transaction_Date||Transaction_Time desc
                           ;

    ELSIF p_from_date IS NULL AND p_to_date IS NULL AND ( p_txn_count = 0 OR p_txn_count IS NULL ) AND p_txn_type IS NOT NULL THEN
        dbms_output.put_line('if part 3');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,                            
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                     sys_txn_date,
                                     t.txn_type
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( t.txn_type = t.txn_type )                                   
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                                   UNION ALL
                                  select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_enc=v_hash_no
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                                   UNION ALL
                                     select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE 
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND typ_name.txn_type = p_txn_type
                          order by Transaction_Date||Transaction_Time desc;

    ELSE
        
		if(p_txn_count is not null) then
		dbms_output.put_line('else part');
        OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,        
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                     sys_txn_date,
                                     t.txn_type
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                    sys_txn_date,
                                    t.txn_type
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( t.txn_type = t.txn_type )                                 
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_enc=v_hash_no
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name  Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                     select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE 
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND rownum1 >= v_first
                           AND rownum1 <= v_last
                           AND trunc(req.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy'
                           )
                           AND typ_name.txn_type = p_txn_type
                          order by Transaction_Date||Transaction_Time desc;
			else
			         OPEN p_out FOR WITH all_requests AS (
                           SELECT
                               ROW_NUMBER() OVER(
                                   ORDER BY
                                       sys_txn_date DESC
                               ) rownum1,
                               sys_txn_date,
                               Transaction_Date,
                               Transaction_Time,         
                               Transaction_Type,
                               transaction_amount,
                               transaction_currency,
                               DRCR,
                               Transaction_ID,
                               Transaction_Description,
                               TID, 
                               Channel_type,
                               txn_type
                           FROM
                               (
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    case when d.txn_type = '21001' then 'ATM' 
                                        when d.f022 like '%81%' then 'ECOMM'
                                         when d.f022 not like '%81%' then 'POS'
                                          end  Channel_type,
                                     sys_txn_date,
                                     t.txn_type
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                     and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))  
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') Transaction_Date,
                                    to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f037  Transaction_ID,
                                    d.f043  Transaction_Description,
                                    d.f041 TID,
                                    'NA' Channel_type,
                                   sys_txn_date,
                                   t.txn_type
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( t.txn_type = t.txn_type )
                                   WHERE
                                       d.f002=v_hash_no
                                       AND f039 = '00'
                                       and f004/100 > 0
                                     and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))  
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    d.dr_cr_flag  DRCR,
                                    d.arn_reference  Transaction_ID,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                                                       FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_enc=v_hash_no
                                    and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))   
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.date_time,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.fee_amt  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    date_time,
                                    t.txn_type
                                   FROM
                                       cs_fee_temp        d
                                       JOIN transaction_type   t ON ( decode(d.fee_ind,'P','93029','R','30003',d.fee_ind) = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                   and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))    
                                   UNION ALL
                                   select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    to_char(d.TRANSACTION_DATE,'hh24:mi:ss') Transaction_Time,
                                    t.txn_name Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    'INR' Transaction_Currency,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    d.rrn  Transaction_ID,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = p_card_ref_number))  Transaction_Description,
                                    null TID,
                                    'NA' Channel_type,
                                    action_date,
                                    t.txn_type
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                   WHERE
                                       d.card_number=v_hash_no
                                  and wallet_id IN ( SELECT wallet_id FROM wallet_master wm where UPPER(key_identifier) = UPPER(p_wallet_key_identifier))     
                               )
                       )
                       SELECT
                               Transaction_ID TXNID,
                               Transaction_Date SYS_TXN_DATE,
                               Transaction_Time TXN_TIME, 
                               Transaction_Description TRANSACTION_DESCRIPTION,
                               transaction_amount TRANSACTION_AMOUNT,
                               transaction_currency TRANSACTION_CURRENCY,
                               Transaction_Type TXN_NAME,                               
                               req.DRCR, 
                               TID TERMINAL_ID, 
                               Channel_type CHANNEL_TYPE 
                       FROM
                           all_requests       req,
                           transaction_type   typ_name
                       WHERE
                           req.txn_type = typ_name.txn_type
						   and req.txn_type not in ('20090','20018','20031')
                           AND trunc(req.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
                           AND typ_name.txn_type = p_txn_type
                          order by Transaction_Date||Transaction_Time desc;
		         END if;


    END IF;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('In Exception '
                             || sqlcode
                             || ' Error Message: '
                             || sqlerrm);
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_card_temp_thl(p_hash_card_number character varying, p_status character varying, OUT p_out character varying, OUT p_out2 character varying)
 SECURITY DEFINER
AS $procedure$

    v_status            card_detail.status%TYPE;
    v_out               VARCHAR2(1000);
    same_status_found EXCEPTION;

BEGIN

    SELECT
        status
    INTO
        v_status
    FROM
        card_detail
    WHERE
        hash_card_number = p_hash_card_number;

    dbms_output.put_line( 'Old status: '
                           || v_status
                           ||' , New status:'
                           || p_status);

    IF
        v_status = p_status
    THEN
        RAISE same_status_found;
    ELSE
        INSERT INTO cms_card_detail_history (
            old_pan,
            new_pan,
            cust_name,
            status_flag,
            serial_no,
            insert_time,
            email_time,
            remark,
            channel_id,
            pin_offset,
            reason_code,
            caf_flag,
            caf_generated_by,
            caf_generation_date,
            caf_eligibility,
            cust_seq,
            old_mask_card_no,
            new_mask_card_no,
            new_card_ref_number,
            old_card_ref_number,
            card_ref_number
        )
            SELECT
                a.hash_card_number,
                a.hash_card_number,
                b.first_name
                || ' '
                || b.last_name,
                p_status,
                serial_no_seq.NEXTVAL,
                SYSDATE,
                SYSDATE,
                NULL,
                0,
                NULL,
                'TEMP BLOCK' reason_code,
                NULL,
                NULL,
                NULL,
                NULL,
                a.cust_seq_id,
                c.mask_card_number,
                c.mask_card_number,
                a.card_ref_number,
                a.card_ref_number,
                a.card_ref_number
            FROM
                card_detail a,
                cms_cust_details b,
                cms_card_detail_extention c
            WHERE
                a.card_ref_number = c.card_ref_no
                AND a.cust_seq_id = b.cust_seq_id
                AND a.hash_card_number = p_hash_card_number;

        UPDATE card_detail
        SET
            status = p_status
        WHERE
            hash_card_number = p_hash_card_number;

        v_out :=
            CASE
                WHEN p_status = 'A' THEN 'ACTIVATED'
                WHEN p_status = 'THL' THEN 'BLOCKED'
            END;

        p_out := '01';

        p_out2 := 'CARD SUCCESSFULLY ' || v_out;

    END IF;

EXCEPTION

    WHEN same_status_found THEN
        v_out :=
            CASE
                WHEN p_status = 'A' THEN 'ACTIVE'
                WHEN p_status = 'THL' THEN 'TEMPORARY BLOCKED'
            END;
        p_out := '00';
        p_out2 := 'CARD ALREADY IN '
                  || v_out
                  || ' STATUS';

        dbms_output.put_line(p_out);

    WHEN no_data_found THEN
        p_out := '02';
        p_out2 := 'INVALID CARD NUMBER';

    WHEN OTHERS THEN
        p_out := '03';
        p_out2 := 'ERROR OCCURRED....SQL CODE'
                  || sqlcode
                  || ' ERRMSG '
                  || sqlerrm;

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_check_card_status(p_card character varying, OUT p_out character varying, OUT p_out2 character varying)
 SECURITY DEFINER
AS $procedure$
    v_num      NUMBER := 1;
    v_count    NUMBER;
    v_count2   NUMBER;
    invalid_card EXCEPTION;
BEGIN
    SELECT
        COUNT(*)
    INTO
        v_count
    FROM
        card_detail
    WHERE
        hash_card_number = p_card;

    IF
        v_count = 0
    THEN
        RAISE invalid_card;
    END IF;
    SELECT
        COUNT(*)
    INTO
        v_count2
    FROM
        cms_card_detail_history
    WHERE
            new_pan = p_card
        AND
            status_flag = 'THL';

    IF
        v_count2 > 0
    THEN
        SELECT
            floor(date_part('day',trunc(SYSDATE) - trunc(insert_time))) number_of_days
        INTO
            v_num
        FROM
            cms_card_detail_history
        WHERE
                new_pan = p_card
            AND
                status_flag = 'THL'
            AND
                insert_time = (
                    SELECT
                        MAX(insert_time)
                    FROM
                        cms_card_detail_history
                    WHERE
                            new_pan = p_card
                        AND
                            status_flag = 'THL'
                );

    END IF;

    IF
        v_num = 0
    THEN
        p_out := '00';
        p_out2 := 'Card is blocked';
    ELSE
        PROC_CARD_TEMP_THL(p_card,'A',p_out, p_out2);
        p_out := '01';
        p_out2 := 'Card is active';
    END IF;

EXCEPTION
    WHEN invalid_card THEN
        p_out := '02';
        p_out2 := 'Invalid Card Number';
    WHEN OTHERS THEN
        p_out := '03';
        p_out2 := 'Error: ' || sqlerrm;
        dbms_output.put_line('In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm);

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_generalized_check(p_role_id character varying, p_report_id character varying, p_institution_id character varying, p_partner_id character varying, p_issuer_type character varying, p_issuer_id character varying, p_zone_id character varying, p_branch_id character varying, p_product_id character varying, p_status character varying, INOUT p_out refcursor, INOUT p_out1 refcursor, OUT p_out_status character varying, OUT p_out2 character varying, OUT p_out_status1 character varying, OUT p_delimiter character varying, OUT p_header_flag character varying, OUT p_txn_header_flag character varying)
 SECURITY DEFINER
AS $procedure$
v_institution_flag VARCHAR2(1);
v_issuer_flag VARCHAR2(1);
v_zone_flag VARCHAR2(1);
v_product_flag VARCHAR2(1);
v_branch_flag VARCHAR2(1);
v_is_issuer_flag varchar2(1);
v_mid_flag varchar2(1);
v_pid_flag varchar2(1);
v_Csv_Download_Flag VARCHAR(2);
v_download VARCHAR2(1);
v_count NUMBER;
v_out_status VARCHAR2(10);
v_out_status1 VARCHAR2(20);
v_out2 VARCHAR2(4);
v_query VARCHAR2(2000);
v_channel_flag varchar2(1);
v_delimiter varchar2(1);
v_header_flag varchar2(1);
v_txn_header_flag varchar2(1);
v_partner_flag varchar2(1);
v_issuer_type_flag varchar2(1);

BEGIN
PROC_PROCESSLOG('REPORT','proc_Generalized_check','PROCEDURE','proc_Generalized_report STARTTED...!!',SYSDATE);

  PROC_PROCESSLOG('REPORT','proc_Generalized_check','PROCEDURE','proc_Generalized_report ...!!'||p_role_id||p_report_id|| p_institution_id 
          ||' PARTNER ID '||p_partner_id
          ||' P_ISSUER_TYPE'||p_issuer_type
          ||' ISSUER ID '||p_issuer_id 
          ||' ZONE ID '||p_zone_id     
          ||' BRANC ID '||p_branch_id    
          ||' PRODUCT ID '||p_product_id  
          ,SYSDATE); 
         
         dbms_output.put_line('ddd');
         
           v_query:='select b.institution_flag,b.issuer_flag,b.zone_flag,b.branch_flag,b.Csv_Download_Flag,b.Product_Flag,b.download,b.is_issuer,
           b.MID_FLAG,b.PID_FLAG,b.channel_flag,b.delimiter,b.header_flag,b.txn_header_flag,b.partner_flag,b.issuer_type_flag  
               from pcs_report_config a, Role_Report_Link b
                              where a.id=b.report_id
                              and b.role_id=:1
                              and a.id=:2
                              and b.enable=''Y''' ; 
           EXECUTE IMMEDIATE v_query INTO v_institution_flag,v_issuer_flag,v_zone_flag,v_branch_flag,v_Csv_Download_Flag,v_product_flag,v_download,v_is_issuer_flag,
                                         v_mid_flag,v_pid_flag ,v_channel_flag,v_delimiter,v_header_flag,v_txn_header_flag,v_partner_flag,v_issuer_type_flag
                              USING p_role_id,p_report_id;

      dbms_output.put_line('ggggg');                        
                              dbms_output.put_line(v_query); 
        IF v_csv_download_flag = 'Y' THEN
            p_delimiter := NVL(v_delimiter,'0');
            p_header_flag := v_header_flag;
            p_txn_header_flag := v_txn_header_flag;

        END IF;

IF v_is_issuer_flag='Y' then

      IF  v_institution_flag='Y' AND  p_status='false' AND p_report_id IS NOT NULL AND p_institution_id='0' AND p_issuer_id= '0' AND p_issuer_id='0' AND p_zone_id='0' AND p_branch_id='0'  THEN

                v_query:='select id ,institution_name name from institution';
                OPEN p_out FOR v_query;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'Y' ELSE 'Y' END out_status INTO v_out_status1 FROM institution ;

                p_out_status1:=v_out_status1;

      elsif  v_partner_flag='Y' AND p_institution_id <>0 AND p_partner_id = '0' and p_issuer_id='0' AND  p_zone_id='0' AND p_branch_id='0' THEN

                v_query:='select id ,partner_name  from partner where inst_id =:1';
                OPEN p_out FOR v_query USING p_institution_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'Y' ELSE 'Y' END out_status INTO v_out_status1 FROM partner WHERE inst_id =p_institution_id;

                p_out_status1:=v_out_status1;

   ----------- Issuer type ---------------------
     elsif  v_issuer_type_flag='Y' AND p_institution_id <>0 AND p_partner_id  <> '0' and p_issuer_id='0' AND  p_zone_id='0' AND p_branch_id='0' THEN

              v_query:='select distinct issuer_type  from issuer where inst_id =:1 and partner_id in (:2)';
                OPEN p_out FOR v_query USING p_institution_id,p_partner_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

              SELECT CASE WHEN count(1)>0  THEN 'Y' ELSE 'Y' END out_status INTO v_out_status1 
                FROM issuer WHERE inst_id =p_institution_id and partner_id in (p_partner_id);

                p_out_status1:=v_out_status1;
                        
     
      elsif v_issuer_type_flag = 'Y' and v_issuer_flag='Y' AND p_institution_id <>0 AND p_partner_id <> 0 AND p_issuer_id='0' AND  p_zone_id='0' AND p_branch_id='0' THEN

                v_query:='select id ,issuer_name  from issuer where inst_id =:1 and partner_id in (:2) and issuer_type in (:3)';
                OPEN p_out FOR v_query USING p_institution_id,p_partner_id,p_issuer_type;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'Y' ELSE 'Y' END out_status INTO v_out_status1 
                FROM issuer WHERE inst_id =p_institution_id and partner_id in (p_partner_id) and issuer_type in (p_issuer_type);

                p_out_status1:=v_out_status1;

               
               
     
      elsif v_issuer_type_flag = 'N' and v_issuer_flag='Y' AND p_institution_id <>0 AND p_partner_id <> 0 AND p_issuer_id='0' AND  p_zone_id='0' AND p_branch_id='0' THEN

                v_query:='select id ,issuer_name  from issuer where inst_id =:1 and partner_id in (:2)';
                OPEN p_out FOR v_query USING p_institution_id,p_partner_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'Y' ELSE 'Y' END out_status INTO v_out_status1 
                FROM issuer WHERE inst_id =p_institution_id and partner_id in (p_partner_id);

                p_out_status1:=v_out_status1;

      elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and */ v_zone_flag='Y' AND  v_product_flag='N' AND p_institution_id ='0' AND p_issuer_id <>0 AND p_zone_id='0' AND p_branch_id='0'  THEN
      dbms_output.put_line('4');

                v_query:='SELECT ID,NAME FROM ZONE WHERE issuer_id=:1';

                OPEN p_out FOR v_query using p_issuer_id; 

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                           WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                           WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                           END INTO v_out2 FROM dual;

                p_out2:=v_out2;
                SELECT CASE WHEN count(1)>0  THEN 'ZY' ELSE 'ZY' END out_status INTO v_out_status1 FROM ZONE WHERE issuer_id=p_issuer_id;

                p_out_status1:=v_out_status1;

      elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and  v_zone_flag='N' AND */ v_product_flag='Y' AND p_institution_id ='0' AND p_issuer_id <>0 AND p_zone_id='0' AND p_branch_id='0' and p_product_id=0 THEN

                v_query :='SELECT ID,NAME FROM cms_product WHERE issuer_id=:1';

                OPEN p_out1 FOR v_query using p_issuer_id; 

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;           

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'PY' else 'PY' END out_status INTO v_out_status1 FROM cms_product WHERE issuer_id=p_issuer_id; 

                p_out_status1:=v_out_status1;

      elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and*/ v_zone_flag='Y' AND  v_product_flag='Y' AND p_institution_id ='0' AND p_issuer_id <>0 AND p_zone_id='0' AND p_branch_id='0' and p_product_id=0 THEN
      dbms_output.put_line('7');

                v_query :='SELECT ID,NAME FROM ZONE WHERE issuer_id=:1';

                OPEN p_out FOR v_query using p_issuer_id;

                v_query :='SELECT ID,NAME FROM cms_product WHERE issuer_id=:1';

                OPEN p_out1 FOR v_query using p_issuer_id; 

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                           WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                           WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                           END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'PZY' ELSE 'PZY' END out_status INTO v_out_status1 FROM ZONE A FULL OUTER JOIN cms_product b  ON( A.issuer_id=b.issuer_id) WHERE  (A.issuer_id = p_issuer_id OR b.issuer_id=p_issuer_id); 

                p_out_status1:=v_out_status1;

      elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and v_zone_flag='Y' AND */v_branch_flag ='Y' AND p_issuer_id='0' AND p_zone_id <>0 AND p_branch_id='0' THEN 

                v_query :='SELECT ID,NAME FROM branch WHERE zone_id=:1';

                OPEN p_out FOR v_query using p_zone_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT CASE WHEN count(1)>0  THEN 'Y' ELSE 'Y' END out_status INTO v_out_status1 FROM branch WHERE  zone_id=p_zone_id;

                p_out_status1:=v_out_status1;

      else 
      
      dbms_output.put_line('77');

               SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                           WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                           WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                           END INTO v_out2 FROM dual;

                p_out2:=v_out2;
                p_out_status1:='N';

      END IF;

ELSE     -- AP
dbms_output.put_line('inside acquirer');
dbms_output.put_line('inside hi');
     IF  v_institution_flag='Y' AND  p_status='false' AND p_report_id IS NOT NULL AND p_institution_id='0' AND p_issuer_id='0'
     AND p_zone_id='0' AND p_branch_id='0'  THEN

      dbms_output.put_line('institution');

                v_query:='select distinct id,institution_name  from institution';
                OPEN p_out FOR v_query;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Institution' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;

   -- commented by AP  -- elsif v_institution_flag='Y' and v_issuer_flag='Y' AND p_institution_id <>0 AND p_issuer_id='0'
   --AND  p_zone_id='0' AND p_branch_id='0'  THEN
     
     elsif   v_partner_flag='Y' AND p_institution_id <>0 AND p_partner_id='0' THEN

      dbms_output.put_line('partner');
                v_query:='Select distinct  id ID,partner_name as name From partner Where inst_id=:1';
                OPEN p_out FOR v_query USING p_institution_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Partner' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;

                dbms_output.put_line ('Partner'||p_out_status1);
               
    -----------Issuer type ----------------------------
    elsif   v_Issuer_type_flag='Y' AND p_institution_id <>0 AND p_partner_id <> '0' and p_issuer_type ='0' THEN

      dbms_output.put_line('Issuer Type');
           v_query:='Select distinct issuer_type as id, issuer_type as name From issuer Where inst_id in ('||p_institution_id||') and partner_id in ('||p_partner_id||')';

                OPEN p_out FOR v_query USING p_institution_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Issuer Type' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;

                dbms_output.put_line ('Issuer Type'||p_out_status1); 

             
   -------------Issuer type
   
    
     elsif   v_issuer_flag='Y' AND p_institution_id <>0 AND p_partner_id <> 0 AND p_issuer_id='0' and v_Issuer_type_flag = 'Y' and p_issuer_type <> '0' THEN

      dbms_output.put_line('issuer');
      dbms_output.put_line('p_partner_id '||p_partner_id);
                v_query:='Select distinct  id ID,issuer_name as name From Issuer Where inst_id in ('||p_institution_id||') and partner_id in ('||p_partner_id||') 
							and issuer_type in (select regexp_split_to_table('''||p_issuer_type||''',E'',''' ||'))';
               dbms_output.put_line('v_query '||v_query);
               OPEN p_out FOR v_query ;--USING p_institution_id,p_partner_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Program' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;

                dbms_output.put_line ('issuer/program'||p_out_status1);

           
               
     
     elsif   v_issuer_flag='Y' AND p_institution_id <>0 AND p_partner_id <> 0 AND p_issuer_id='0' and v_Issuer_type_flag = 'N'  THEN

      dbms_output.put_line('issuer');
      dbms_output.put_line('p_partner_id v_Issuer_type_flag'||p_partner_id);
                v_query:='Select distinct  id ID,issuer_name as name From Issuer Where inst_id in ('||p_institution_id||') and partner_id in ('||p_partner_id||')';
               dbms_output.put_line('v_query '||v_query);
               OPEN p_out FOR v_query ;--USING p_institution_id,p_partner_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Program' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;

                dbms_output.put_line ('issuer/program'||p_out_status1);

elsif /*v_institution_flag='Y' and v_issuer_flag='N' AND*/v_institution_flag='Y' and p_institution_id <>0 /*AND p_issuer_id='0'  AND  p_zone_id='0' AND p_branch_id='0' */ and v_pid_flag='Y' THEN
      --institution level pid
         dbms_output.put_line('pid');

                v_query:='Select distinct  pid,PID_DESC From cs_config_org_master Where Institution_Id=:1 and PID_DESC is not null';
                OPEN p_out FOR v_query USING p_institution_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Participant Id' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;                

elsif /*v_institution_flag='Y' and v_issuer_flag='N' AND p_institution_id =0 and */ v_issuer_flag='Y' AND p_issuer_id<>'0' /*AND  p_zone_id='0' AND p_branch_id='0' */ and v_pid_flag='Y' THEN
      --issuer_id level pid
         dbms_output.put_line('pid');

                v_query:='Select distinct  pid,PID_DESC From cs_config_org_master Where program_id=:1 AND PID_DESC IS NOT NULL';
                OPEN p_out FOR v_query USING p_issuer_id;

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;

                p_out2:=v_out2;

                SELECT 'Participant Id' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;                

      elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and  v_zone_flag='N' AND  v_product_flag='N' AND p_institution_id ='0' AND*/
      v_issuer_flag='Y' and  p_issuer_id <>0 /*AND p_zone_id='0' AND p_branch_id='0' */and v_mid_flag='Y'  THEN
         dbms_output.put_line('mid');

                v_query:='SELECT distinct MID,MID_NAME FROM cs_config_org_master WHERE PROGRAM_id=:1 AND MID_NAME IS NOT NULL';

                OPEN p_out FOR v_query using p_issuer_id; 

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                           WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                           WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                           END INTO v_out2 FROM dual;

                p_out2:=v_out2;
                SELECT 'Merchant' INTO v_out_status1 FROM dual;

                p_out_status1:=v_out_status1;

   -- commneted by AP  elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and  v_zone_flag='N' AND */
   --v_product_flag='Y' AND p_institution_id ='0' AND v_issuer_Flag='Y' and p_issuer_id <>0 AND p_product_id=0 THEN
      elsif v_issuer_flag='Y' AND p_issuer_id <>0  AND v_product_flag='Y' AND v_mid_flag='N' AND v_pid_flag='N' THEN

             dbms_output.put_line('product');

                v_query :='SELECT distinct product_id,Product_NAME FROM cs_config_org_master WHERE program_id=:1 and Product_NAME is not null';

                OPEN p_out FOR v_query using p_issuer_id; 

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;           

                p_out2:=v_out2;

                SELECT 'Product' INTO v_out_status1 FROM dual; 

                p_out_status1:=v_out_status1;

      elsif v_issuer_flag='Y' AND p_issuer_id <>0  AND v_channel_flag='Y' /*and  v_product_flag='N' AND v_mid_flag='N' AND v_pid_flag='N'*/ THEN

             dbms_output.put_line('channel');

                v_query :='SELECT distinct channel_id,channel_name FROM cs_config_org_master WHERE program_id=:1 and channel_name is not null';

                OPEN p_out FOR v_query using p_issuer_id; 

                SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                            WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                            WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                            END INTO v_out2 FROM dual;           

                p_out2:=v_out2;

                SELECT 'Channel' INTO v_out_status1 FROM dual; 

                p_out_status1:=v_out_status1;    

      else 
      
      dbms_output.put_line('inside else');

               SELECT CASE WHEN from_date='Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:Y:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear='Y' AND is_year <>'Y' THEN 'N:N:Y:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year ='Y' THEN 'N:N:N:Y'
                              WHEN from_date='Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'Y:N:N:N'
                              WHEN from_date<>'Y' AND to_date<>'Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:N:N:N'
                              WHEN from_date<>'Y' AND to_date='Y' AND is_monthyear<>'Y' AND is_year <>'Y' THEN 'N:Y:N:N'
                              END INTO v_out_status
                              FROM role_report_link WHERE report_id=p_report_id
                              AND role_id=p_role_id;

                p_out_status:=v_out_status;

                SELECT CASE WHEN (v_Csv_Download_Flag='Y' AND v_download='Y') THEN 'Y:Y' 
                           WHEN (v_Csv_Download_Flag='N' AND v_download='Y') THEN 'N:Y'
                           WHEN (v_Csv_Download_Flag='Y' AND v_download='N') THEN 'Y:N'
                           END INTO v_out2 FROM dual;

                p_out2:=v_out2;
             --   p_out_status1:='N';

                 SELECT  'Date'  INTO v_out_status1 FROM DUAL; 

                p_out_status1:=v_out_status1;

      END IF;

END IF;

EXCEPTION 

    WHEN no_data_found THEN

    p_out_status:='Configuration Not Found..'||SQLCODE||SQLERRM;

    WHEN others THEN

    p_out_status:='Error Occorred'||sqlcode||sqlerrm;

    dbms_output.put_line ('Error msg '||sqlcode||sqlerrm);

END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_generalized_check_out(p_role_id character varying, p_report_id character varying, p_institution_id character varying, p_issuer_id character varying, p_zone_id character varying, p_branch_id character varying, p_product_id character varying, p_status character varying, p_outlet_id character varying, INOUT p_out refcursor, INOUT p_out1 refcursor, OUT p_out_status character varying, OUT p_out2 character varying, OUT p_out_status1 character varying, OUT p_delimiter character varying, OUT p_header_flag character varying, OUT p_txn_header_flag character varying)
 SECURITY DEFINER
AS $procedure$

        v_is_issuer_flag      VARCHAR2(1);
        v_mid_flag            VARCHAR2(1);
        v_pid_flag            VARCHAR2(1);
        v_csv_download_flag   VARCHAR(2);
        v_download            VARCHAR2(1);
        v_count               NUMBER;
        v_out_status          VARCHAR2(10);
        v_out_status1         VARCHAR2(20);
        v_out2                VARCHAR2(4);
        v_query               VARCHAR2(2000);
        v_channel_flag        VARCHAR2(1);
		 v_institution_flag character varying(1);
    v_issuer_flag character varying(1);
    v_zone_flag character varying(1);
    v_branch_flag character varying(1);
    v_product_flag character varying(1);
   
   v_delimiter varchar2(1);
v_header_flag varchar2(1);
v_txn_header_flag varchar2(1);


    BEGIN
        proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'proc_Generalized_report STARTTED...!!', sysdate);
        proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'proc_Generalized_report ...!!'
                                                                          || p_role_id
                                                                          || p_report_id
                                                                          || p_institution_id
                                                                          || ' ISSUER ID '
                                                                          || p_issuer_id
                                                                          || ' ZONE ID '
                                                                          || p_zone_id
                                                                          || ' BRANC ID '
                                                                          || p_branch_id
                                                                          || ' PRODUCT ID '
                                                                          || p_product_id, sysdate);

        v_query := 'select b.institution_flag,b.issuer_flag,b.zone_flag,b.branch_flag,b.Csv_Download_Flag,b.Product_Flag,b.download,b.is_issuer,
           b.MID_FLAG,b.PID_FLAG,b.channel_flag,b.delimiter,b.header_flag,b.txn_header_flag  from pcs_report_config a, Role_Report_Link b
                              where a.id=b.report_id
                              and b.role_id=:1
                              and a.id=:2
                              and b.enable=''Y'''
        ;
        EXECUTE IMMEDIATE v_query
        INTO
            v_institution_flag,
            v_issuer_flag,
            v_zone_flag,
            v_branch_flag,
            v_csv_download_flag,
            v_product_flag,
            v_download,
            v_is_issuer_flag,
            v_mid_flag,
            v_pid_flag,
            v_channel_flag,
            v_delimiter,v_header_flag,v_txn_header_flag
            USING p_role_id, p_report_id;
           
           
            IF v_csv_download_flag = 'Y' THEN
            p_delimiter := NVL(v_delimiter,'0');
            p_header_flag := v_header_flag;
            p_txn_header_flag := v_txn_header_flag;

        END IF;

        dbms_output.put_line(v_query);
        IF v_institution_flag = 'Y' AND p_status = 'false' AND p_report_id IS NOT NULL AND p_institution_id = '0' AND p_issuer_id
        = '0' AND p_zone_id = '0' AND p_branch_id = '0' THEN
            dbms_output.put_line('institution');
            v_query := 'select id ,name from institution where name is not null';
            OPEN p_out FOR v_query;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Institution'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;


   -- commented by AP  -- elsif v_institution_flag='Y' and v_issuer_flag='Y' AND p_institution_id <>0 AND p_issuer_id='0'
   --AND  p_zone_id='0' AND p_branch_id='0'  THEN
        ELSIF v_issuer_flag = 'Y' AND p_institution_id <> 0 AND p_issuer_id = '0' THEN
            dbms_output.put_line('issuer');
            v_query := 'select id ,name  from issuer where inst_id =:1 and name is not null';
            OPEN p_out FOR v_query
                USING p_institution_id;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Program'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;
            dbms_output.put_line('issuer/program' || p_out_status1);
        ELSIF /*v_institution_flag='Y' and v_issuer_flag='N' AND*/ v_institution_flag = 'Y' AND p_institution_id <> 0 /*AND p_issuer_id='0'  AND  p_zone_id='0' AND p_branch_id='0' */ AND v_pid_flag = 'Y' THEN
      --institution level pid
            dbms_output.put_line('pid');
            v_query := 'Select distinct  pid,PID_DESC From cs_config_org_master Where Institution_Id=:1 and PID_DESC is not null'
            ;
            OPEN p_out FOR v_query
                USING p_institution_id;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Participant Id'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;
        ELSIF /*v_institution_flag='Y' and v_issuer_flag='N' AND p_institution_id =0 and */ v_issuer_flag = 'Y' AND p_issuer_id <> '0' /*AND  p_zone_id='0' AND p_branch_id='0' */ AND v_pid_flag = 'Y' THEN
      --issuer_id level pid
            dbms_output.put_line('pid');
            v_query := 'Select distinct  pid,PID_DESC From cs_config_org_master Where program_id=:1 AND PID_DESC IS NOT NULL';
            OPEN p_out FOR v_query
                USING p_issuer_id;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Participant Id'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;
        ELSIF /*v_institution_flag='Y' and v_issuer_flag='Y' and  v_zone_flag='N' AND  v_product_flag='N' AND p_institution_id ='0' AND*/ v_issuer_flag = 'Y' AND p_issuer_id <> 0 /*AND p_zone_id='0' AND p_branch_id='0' */ AND v_mid_flag = 'Y' THEN
            dbms_output.put_line('mid');
            v_query := 'select  outlet_id, name from cms_outlet where outlet_id=:1 and name is not null';
            OPEN p_out FOR v_query
                USING p_outlet_id;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Merchant'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;

   -- commneted by AP  elsif /*v_institution_flag='Y' and v_issuer_flag='Y' and  v_zone_flag='N' AND */
   --v_product_flag='Y' AND p_institution_id ='0' AND v_issuer_Flag='Y' and p_issuer_id <>0 AND p_product_id=0 THEN
        ELSIF v_issuer_flag = 'Y' AND p_issuer_id <> 0 AND v_product_flag = 'Y' AND v_mid_flag = 'N' AND v_pid_flag = 'N' THEN
            dbms_output.put_line('product');
            v_query := 'SELECT distinct id,name FROM cms_product WHERE issuer_id=:1 and name is not null';
            OPEN p_out FOR v_query
                USING p_issuer_id;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Product'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;
        ELSIF v_issuer_flag = 'Y' AND p_issuer_id <> 0 AND v_channel_flag = 'Y' /*and  v_product_flag='N' AND v_mid_flag='N' AND v_pid_flag='N'*/ THEN
            dbms_output.put_line('channel');
            v_query := 'SELECT distinct channel_id,channel_name FROM cs_config_org_master WHERE program_id=:1 and channel_name is not null'
            ;
            OPEN p_out FOR v_query
                USING p_issuer_id;

            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
            SELECT
                'Channel'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;
        ELSE
            EXECUTE IMMEDIATE 'select get_from_to_date_flag(:1,:2) from dual'
            INTO v_out_status
                USING p_role_id, p_report_id;
            p_out_status := v_out_status;
            SELECT
                CASE
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'Y' ) THEN
                        'Y:Y'
                    WHEN ( v_csv_download_flag = 'N'
                           AND v_download = 'Y' ) THEN
                        'N:Y'
                    WHEN ( v_csv_download_flag = 'Y'
                           AND v_download = 'N' ) THEN
                        'Y:N'
                END
            INTO v_out2
            FROM
                dual;

            p_out2 := v_out2;
             --   p_out_status1:='N';
            SELECT
                'Date'
            INTO v_out_status1
            FROM
                dual;

            p_out_status1 := v_out_status1;
        END IF;

    EXCEPTION
        WHEN no_data_found THEN
            p_out_status := 'Configuration Not Found..'
                            || sqlcode
                            || sqlerrm;
        WHEN OTHERS THEN
            p_out_status := 'Error Occorred'
                            || sqlcode
                            || sqlerrm
                            ;
            dbms_output.put_line('Error msg '
                                 || sqlcode
                                 || sqlerrm
                                 );
    END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_generalized_report(p_role_id character varying, p_report_id character varying, p_institution_id character varying, p_partner_id character varying, p_issuer_type character varying, p_issuer_id character varying, p_zone_id character varying, p_branch_id character varying, p_product_id character varying, p_fromdate character varying, p_todate character varying, p_monthyear character varying, p_year character varying, INOUT p_out refcursor, INOUT p_out1 refcursor, INOUT p_out2 refcursor, OUT p_report_details character varying, OUT p_sheet_name character varying)
 SECURITY DEFINER
AS $procedure$
v_report_name         VARCHAR2(100);
    v_query               CLOB;
    v_query1              CLOB;
    v_query2              CLOB;
    v_institution_flag    VARCHAR2(1);
    v_issuer_flag         VARCHAR2(1);
    v_zone_flag           VARCHAR2(1);
    v_branch_flag         VARCHAR2(1);
    v_product_flag        VARCHAR2(1);
    v_mid_flag            VARCHAR2(1);
    v_pid_flag            VARCHAR2(1);
    v_append_whr          VARCHAR2(4000);
    v_is_issuer           VARCHAR2(1);
    v_channel_flag        VARCHAR2(1);
    v_card_flag           VARCHAR2(1);
    v_institution_query   VARCHAR2(4000);
    v_issuer_query        VARCHAR2(4000);
    v_zone_query          VARCHAR2(4000);
    v_branch_query        VARCHAR2(4000);
    v_product_query       VARCHAR2(4000);
    v_order_by            VARCHAR2(1000);
    v_group_by            VARCHAR2(1000);
    v_mid_query           VARCHAR2(4000);
    v_pid_query           VARCHAR2(4000);
    v_channel_query       VARCHAR2(4000);
    v_sqlcode             VARCHAR2(1000);
    v_errmsg              VARCHAR2(1000);
    v_count               NUMBER;
    v_institution_name    VARCHAR2(100);
    v_program_name        VARCHAR2(100);
    v_product_name        VARCHAR2(100);
    v_pid_name            VARCHAR2(100);
    v_mid_name            VARCHAR2(100);
    v_channel_name        VARCHAR2(100);
    v_sheet_name1         VARCHAR2(50);
    v_sheet_name2         VARCHAR2(50);
    v_partner_flag        varchar2(1);
    v_partner_query       varchar2(500);
    v_partner_name        VARCHAR2(100);
    v_issuer_type_flag	  varchar2(2);	
	V_issuer_type_query   varchar2(500);

    v_object_type varchar2(1);
    v_object_call varchar2(200);
   
BEGIN
DBMS_OUTPUT.ENABLE(100000);
    proc_processlog(
        'REPORT',
        'proc_Generalized_report',
        'PROCEDURE',
        'proc_Generalized_report main STARTTED...!!',
        SYSDATE
    );
   
    proc_processlog(
        'REPORT',
        'proc_Generalized_report',
        'PROCEDURE',
        'proc_Generalized_report ...!!'
         || p_role_id
         || p_report_id
         || p_institution_id
         || 'PARTNER ID '||p_partner_id
		 ||'p_issuer_type '||p_issuer_type
         || ' ISSUER ID '
         || p_issuer_id
         || ' ZONE ID '
         || p_zone_id
         || ' BRANC ID '
         || p_branch_id
         || ' PRODUCT ID '
         || p_product_id
         || ' P_FROM DATE '
         || p_fromdate
         || ' P_TO DATE '
         || p_todate
         || ' p_monthyear '
         || p_monthyear
         || ' p_year '
         || p_year,
        SYSDATE
    );

    v_query := 'select a.report_name,b.query,b.query1,b.query2,b.institution_flag,b.issuer_flag,b.zone_flag,b.branch_flag,b.Product_Flag,b.institution_query,b.issuer_query,b.zone_query,b.branch_query,b.Product_query,b.order_by,b.is_issuer,b.mid_flag,b.mid_query,b.pid_flag,b.pid_query,b.group_by,b.channel_query,b.channel_flag,
    b.card_flag,b.sheet1_name,b.sheet2_name,b.partner_flag,b.partner_query,b.issuer_type_query,b.issuer_type_flag,
 b.object_type,b.object_call from pcs_report_config a,Role_Report_Link b
                  where a.id=b.report_id
                  and b.role_id=:1
                  and a.id=:2
                  and b.enable=''Y'''
;

  --  dbms_output.put_line(v_query);
    EXECUTE IMMEDIATE v_query INTO
        v_report_name,v_query,v_query1,v_query2,v_institution_flag,v_issuer_flag,v_zone_flag,v_branch_flag,v_product_flag,v_institution_query
,v_issuer_query,v_zone_query,v_branch_query,v_product_query,v_order_by,v_is_issuer,v_mid_flag,v_mid_query,v_pid_flag,v_pid_query,
v_group_by,v_channel_query,v_channel_flag,v_card_flag,v_sheet_name1,v_sheet_name2,v_partner_flag,v_partner_query,V_issuer_type_query,v_issuer_type_flag,
v_object_type,v_object_call
        USING p_role_id,p_report_id;
       
   
       
      if v_object_type ='Y' then  
--     
   --   dbms_output.put_line('v_object_call : '||v_object_call);
     
    v_object_call := replace(replace(replace(replace(replace(v_object_call,'#p_fromdate#',p_fromdate),'#p_todate#',p_todate),'#p_outlet_id#',null),'#p_issuer_id#',p_issuer_id),'#p_product_id#',p_product_id);
--        dbms_output.put_line('v_object_call : '||v_object_call);
 --       dbms_output.put_line('select '||v_object_call);
     proc_processlog(
        'REPORT',
        'proc_Generalized_report',
        'PROCEDURE',
        'proc_Generalized_report main proc after call...!! '||v_object_call,
        SYSDATE
    ); 
   
   EXECUTE IMMEDIATE 'select '||v_object_call;
   end if;   
       
  
  
    dbms_output.put_line(v_sheet_name1);
    IF
        v_is_issuer = 'Y'
    THEN
        SELECT
            CASE
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_zone_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_branch_flag = 'N'
                THEN v_institution_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_zone_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_branch_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_issuer_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_branch_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_zone_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    v_branch_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_product_id = 0
                AND
                    v_product_flag = 'N'
                AND
                    p_branch_id <> 0
                AND
                    v_branch_flag = 'Y'
                THEN v_institution_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_zone_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_branch_flag = 'N'
                THEN v_issuer_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_product_flag = 'N'
                AND
                    v_branch_flag = 'N'
                THEN v_issuer_query
                 || CHR(10)
                 || v_zone_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_branch_flag = 'N'
                THEN v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_branch_flag = 'Y'
                AND
                    p_branch_id <> 0
                THEN v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_product_query
                 || CHR(10)
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_product_flag = 'N'
                AND
                    v_branch_flag = 'N'
                THEN v_zone_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    v_branch_flag = 'N'
                THEN v_zone_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_branch_flag = 'Y'
                THEN v_zone_query
                 || CHR(10)
                 || v_product_query
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_zone_id = 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_branch_flag = 'N'
                THEN v_product_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_zone_id = 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_branch_flag = 'Y'
                THEN v_product_query
                 || CHR(10)
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_zone_id = 0
                AND
                    v_product_flag = 'N'
                AND
                    p_product_id = 0
                AND
                    v_branch_flag = 'Y'
                AND
                    p_branch_id <> 0
                THEN v_branch_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_branch_id = 0
                AND
                    v_branch_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_branch_id <> 0
                AND
                    v_branch_flag = 'Y'
                THEN v_institution_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_product_query
                 || CHR(10)
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_branch_id = 0
                AND
                    v_branch_flag = 'N'
                THEN v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_product_id = 0
                AND
                    v_product_flag = 'N'
                AND
                    p_branch_id <> 0
                AND
                    v_branch_flag = 'Y'
                THEN v_issuer_query
                 || CHR(10)
                 || v_zone_query
                 || CHR(10)
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    p_issuer_id = 0
                AND
                    v_issuer_flag = 'N'
                AND
                    p_zone_id <> 0
                AND
                    v_zone_flag = 'Y'
                AND
                    p_product_id = 0
                AND
                    v_product_flag = 'N'
                AND
                    p_branch_id <> 0
                AND
                    v_branch_flag = 'Y'
                THEN v_zone_query
                 || CHR(10)
                 || v_branch_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'N'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_branch_id = 0
                AND
                    v_branch_flag = 'N'
                THEN v_issuer_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id <> 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id = 0
                AND
                    v_issuer_flag = 'N'
                AND
                    p_zone_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_branch_id = 0
                AND
                    v_branch_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    p_institution_id = 0
                AND
                    v_institution_flag = 'Y'
                AND
                    p_issuer_id <> 0
                AND
                    v_issuer_flag = 'Y'
                AND
                    p_zone_id = 0
                AND
                    v_zone_flag = 'N'
                AND
                    p_product_id <> 0
                AND
                    v_product_flag = 'Y'
                AND
                    p_branch_id = 0
                AND
                    v_branch_flag = 'N'
                THEN v_issuer_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10)
                 || v_issuer_query  
            END
        INTO
            v_append_whr
        FROM
            dual;

    ELSE
        SELECT
            CASE
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_partner_flag = 'Y'    
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_mid_query
                 || CHR(10)
                 || v_pid_query
                WHEN
                    v_institution_flag = 'Y'
                 AND
                    v_partner_flag = 'Y'   
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                || CHR(10)
                 || v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_mid_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_partner_flag = 'Y'    
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_pid_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_partner_query
                 || CHR(10)
                 || v_issuer_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_partner_query 
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'Y'    
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_mid_query
                 || CHR(10)
                 || v_pid_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'N'     
                AND
                    v_issuer_flag = 'N'
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_mid_query
                 || CHR(10)
                 || v_pid_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'N'     
                AND
                    v_issuer_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_pid_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10)
                 ||v_issuer_query
                 || CHR(10)
                 || v_mid_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_pid_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'Y'    
                AND
                    v_issuer_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_partner_query 
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'N'    
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_issuer_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'N'    
                AND
                    v_issuer_flag = 'N'
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_mid_query
                WHEN
                    v_institution_flag = 'N'
                 AND
                    v_partner_flag = 'Y'   
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'Y'
                AND
                    v_channel_flag = 'N'
                THEN v_partner_query
                 ||CHR(10)
                 ||v_issuer_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_product_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 ||v_partner_query                  
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_product_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'Y'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_mid_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'Y'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 || v_pid_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_product_query
                WHEN
                    v_institution_flag = 'Y'
                 AND
                    v_partner_flag = 'Y'   
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'N'
                THEN v_institution_query
                 || CHR(10)
                 ||v_partner_query
                 || CHR(10)
                 || v_product_query  -- line added by AP ,sanjeev to confirm
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'Y'
                THEN v_institution_query
                 || CHR(10)
                 ||v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_channel_query
                WHEN
                    v_institution_flag = 'Y'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'Y'
                THEN v_institution_query
                 || CHR(10)
                 || v_channel_query  -- line added by AP ,sanjeev to confirm
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_partner_flag = 'Y'     
                AND
                    v_issuer_flag = 'Y'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_channel_flag = 'Y'
                THEN v_partner_query
                 || CHR(10)
                 || v_issuer_query
                 || CHR(10)
                 || v_channel_query
                WHEN
                    v_institution_flag = 'N'
                AND
                    v_issuer_flag = 'N'
                AND
                    v_product_flag = 'N'
                AND
                    v_mid_flag = 'N'
                AND
                    v_pid_flag = 'N'
                AND
                    v_channel_flag = 'Y'
                THEN v_channel_query
                WHEN
                    v_institution_flag = 'N'
                AND v_partner_flag = 'Y'   
                AND v_issuer_type_flag = 'N'    
                AND v_issuer_flag = 'Y'
                AND v_mid_flag = 'N'
                AND v_pid_flag = 'N'
                AND v_product_flag = 'N'
                AND v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10)
                 || v_issuer_query 
             WHEN 
                  v_institution_flag = 'Y'
                AND v_partner_flag = 'Y'  
                AND v_issuer_type_flag = 'Y'      
                AND v_issuer_flag = 'Y'
                AND v_mid_flag = 'N'
                AND v_pid_flag = 'N'
                AND v_product_flag = 'N'
                AND v_channel_flag = 'N'
                THEN v_institution_query
                 ||CHR(10)
                 ||v_partner_query
                 || CHR(10)
                 || V_issuer_type_query
                 ||CHR(10)
                 ||v_issuer_query
               WHEN 
                  v_institution_flag = 'N'
                AND v_partner_flag = 'Y'  
                AND v_issuer_type_flag = 'Y'      
                AND v_issuer_flag = 'Y'
                AND v_mid_flag = 'N'
                AND v_pid_flag = 'N'
                AND v_product_flag = 'N'
                AND v_channel_flag = 'N'
                THEN v_partner_query
                -- || CHR(10)
                 || V_issuer_type_query
                -- ||CHR(10)
                 ||v_issuer_query  
              WHEN 
                  v_institution_flag = 'N'
                AND v_partner_flag = 'Y'  
                AND v_issuer_type_flag = 'Y'      
                AND v_issuer_flag = 'N'
                AND v_mid_flag = 'N'
                AND v_pid_flag = 'N'
                AND v_product_flag = 'N'
                AND v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10)
                 || V_issuer_type_query 
               WHEN 
                  v_institution_flag = 'N'
                AND v_partner_flag = 'Y'  
                AND v_issuer_type_flag = 'N'      
                AND v_issuer_flag = 'Y'
                AND v_mid_flag = 'N'
                AND v_pid_flag = 'N'
                AND v_product_flag = 'N'
                AND v_channel_flag = 'N'
                THEN v_partner_query
                 || CHR(10) 
                 ||v_issuer_query  
            END
        INTO
            v_append_whr
        FROM
            dual;

    END IF;

    proc_processlog(
        'REPORT',
        'proc_Generalized_report',
        'PROCEDURE',
        'proc_Generalized_report STARTTED...!!' || v_append_whr,
        SYSDATE
    );
    dbms_output.put_line('where condition :::' || v_append_whr);
    IF
        v_query IS NOT NULL 
    THEN
        v_query := v_query
         || chr(10)
         || v_append_whr
         || chr(10)
         || v_group_by
         || chr(10)
         || v_order_by;

       -- dbms_output.put_line(v_query);
        v_query := replace(replace(replace(
            replace(
                replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    replace(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(v_query,'#p_institution_id#',p_institution_id),
                                                        '#p_issuer_id#',
                                                        p_issuer_id
                                                    ),
                                                    '#p_zone_id#',
                                                    p_zone_id
                                                ),
                                                '#p_branch_id#',
                                                p_branch_id
                                            ),
                                            '#p_product_id#',
                                            p_product_id
                                        ),
                                        '#p_fromdate#',
                                        p_fromdate
                                    ),
                                    '#p_todate#',
                                    p_todate
                                ),
                                '#p_monthyear#',
                                p_monthyear
                            ),
                            '#p_year#',
                            p_year
                        ),
                        '#p_mid#',
                        p_zone_id
                    ),
                    '#p_pid#',
                    p_zone_id
                ),
                '#p_program_id#',
                p_zone_id
            ),
            '#v_card_flag#',
            v_card_flag
        ),
        '#p_partner_id#',
          p_partner_id
        ),
          '#Issuer_type#',
         p_issuer_type
        );

        dbms_output.put_line(v_query);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'proc_Generalized_report v_query...!!' || v_query,
            SYSDATE
        );
        OPEN p_out FOR v_query;

        p_sheet_name := v_report_name || '-';
    END IF;

    IF
        v_query1 IS NOT NULL and length(v_query1)>0
    THEN
        v_query1 := v_query1;
      --  dbms_output.put_line(v_query1);
        v_query1 := replace(replace(replace(
            replace(
                replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    replace(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(v_query1,'#p_institution_id#',p_institution_id),
                                                        '#p_issuer_id#',
                                                        p_issuer_id
                                                    ),
                                                    '#p_zone_id#',
                                                    p_zone_id
                                                ),
                                                '#p_branch_id#',
                                                p_branch_id
                                            ),
                                            '#p_product_id#',
                                            p_product_id
                                        ),
                                        '#p_fromdate#',
                                        p_fromdate
                                    ),
                                    '#p_todate#',
                                    p_todate
                                ),
                                '#p_monthyear#',
                                p_monthyear
                            ),
                            '#p_year#',
                            p_year
                        ),
                        '#p_mid#',
                        p_zone_id
                    ),
                    '#p_pid#',
                    p_zone_id
                ),
                '#p_program_id#',
                p_zone_id
            ),
            '#v_card_flag#',
            v_card_flag
        ),'#p_partner_id#',
        p_partner_id
        ),
         '#Issuer_type#',
         p_issuer_type
        );

       -- dbms_output.put_line(v_query1);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'proc_Generalized_report v_query1...!!' || v_query1,
            SYSDATE
        );
        OPEN p_out1 FOR v_query1;

        p_sheet_name := p_sheet_name || v_sheet_name1 || '-';
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'p_sheet_name QUERY...!!' || p_sheet_name,
            SYSDATE
        );
    END IF;

    IF
        v_query2 IS NOT NULL and length(v_query2)>0
    THEN
        v_query2 := v_query2;
        dbms_output.put_line(v_query2);
        v_query2 := replace(replace(replace(
            replace(
                replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    replace(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(v_query2,'#p_institution_id#',p_institution_id),
                                                        '#p_issuer_id#',
                                                        p_issuer_id
                                                    ),
                                                    '#p_zone_id#',
                                                    p_zone_id
                                                ),
                                                '#p_branch_id#',
                                                p_branch_id
                                            ),
                                            '#p_product_id#',
                                            p_product_id
                                        ),
                                        '#p_fromdate#',
                                        p_fromdate
                                    ),
                                    '#p_todate#',
                                    p_todate
                                ),
                                '#p_monthyear#',
                                p_monthyear
                            ),
                            '#p_year#',
                            p_year
                        ),
                        '#p_mid#',
                        p_zone_id
                    ),
                    '#p_pid#',
                    p_zone_id
                ),
                '#p_program_id#',
                p_zone_id
            ),
            '#v_card_flag#',
            v_card_flag
        ),'#p_partner_id#'
       ,p_partner_id
      ), 
      '#Issuer_type#',
      p_issuer_type
      );

      --  dbms_output.put_line(v_query2);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'proc_Generalized_report v_query2...!!' || v_query2,
            SYSDATE
        );
        OPEN p_out2 FOR v_query2;

        p_sheet_name := p_sheet_name || v_sheet_name2 || '-';
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'p_sheet_name QUERY1...!!' || p_sheet_name,
            SYSDATE
        );
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        institution_id = p_institution_id;

    IF
        v_count != 0
    THEN
        SELECT DISTINCT
            institution_name
        INTO
            v_institution_name
        FROM
            cs_config_org_master
        WHERE
            institution_id = p_institution_id;

        v_institution_name := v_institution_name || '-';
        dbms_output.put_line(v_institution_name);
    END IF;
    
    
    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        partner_id in (p_partner_id);

    IF
        v_count != 0
    THEN
        SELECT DISTINCT
            partner_name
        INTO
            v_partner_name
        FROM
            cs_config_org_master
        WHERE
            partner_id in (p_partner_id);

        v_partner_name := v_partner_name || '-';
        dbms_output.put_line(v_partner_name);
    END IF;
    

    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        program_id in (p_issuer_id);

    IF
        v_count != 0
    THEN
        SELECT DISTINCT
            program_name
        INTO
            v_program_name
        FROM
            cs_config_org_master
        WHERE
            program_id in (p_issuer_id);

        v_program_name := v_program_name || '-';
        dbms_output.put_line(v_program_name);
    END IF;

--select count(1) into v_count from cs_config_org_master where product_id=p_product_id;

    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        product_id = p_zone_id;

    IF
        v_count != 0
    THEN 

       -- select distinct product_name into v_product_name from cs_config_org_master where product_id=p_product_id;
        SELECT DISTINCT
            product_name
        INTO
            v_product_name
        FROM
            cs_config_org_master
        WHERE
            product_id = p_zone_id;

        dbms_output.put_line(v_product_name);
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        pid = p_zone_id;

    IF
        v_count != 0
    THEN
        SELECT DISTINCT
            pid_desc
        INTO
            v_pid_name
        FROM
            cs_config_org_master
        WHERE
            pid = p_zone_id;

        dbms_output.put_line(v_pid_name);
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        mid = p_zone_id;

    IF
        v_count != 0
    THEN
        SELECT DISTINCT
            mid_name
        INTO
            v_mid_name
        FROM
            cs_config_org_master
        WHERE
            mid = p_zone_id;

        dbms_output.put_line(v_mid_name);
    END IF;

    SELECT
        COUNT(1)
    INTO
        v_count
    FROM
        cs_config_org_master
    WHERE
        channel_id = p_zone_id;

    IF
        v_count != 0
    THEN
        SELECT DISTINCT
            channel_name
        INTO
            v_channel_name
        FROM
            cs_config_org_master
        WHERE
            channel_id = p_zone_id;

        dbms_output.put_line(v_channel_name);
    END IF;

    SELECT
        v_institution_name
         || v_partner_name
         || v_program_name
         || v_product_name
         || v_pid_name
         || v_mid_name
         || v_channel_name
    INTO
        p_report_details
    FROM
        dual;

--    p_report_details := regexp_replace(
--        upper(p_report_details),
--        '-$',
--        ''
--    )
--     || '-'
--     || upper(v_report_name);

    p_report_details :=upper(v_report_name);   

    dbms_output.put_line(p_report_details);
    p_sheet_name := regexp_replace(
        upper(p_sheet_name),
        '-$',
        ''
    );
    proc_processlog(
        'REPORT',
        'proc_Generalized_report',
        'PROCEDURE',
        'p_sheet_name...!!' || p_sheet_name,
        SYSDATE
    );
    dbms_output.put_line(p_sheet_name);
EXCEPTION
    WHEN OTHERS THEN
        v_sqlcode := sqlcode;
        v_errmsg := sqlerrm;
        dbms_output.put_line('sheetname '||v_errmsg);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'error occured...!!' || v_errmsg,
            SYSDATE
        );
        OPEN p_out FOR
            SELECT
                '' err
            FROM
                dual;
--open p_out for select  'Invalid Report Configuration...!!!' err from dual;

END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_generalized_report_out(p_role_id character varying, p_report_id character varying, p_institution_id character varying, p_issuer_id character varying, p_zone_id character varying, p_branch_id character varying, p_product_id character varying, p_fromdate character varying, p_todate character varying, p_monthyear character varying, p_year character varying, p_outlet_id character varying, INOUT p_out refcursor, INOUT p_out1 refcursor, INOUT p_out2 refcursor, OUT p_report_details character varying, OUT p_sheet_name character varying)
 SECURITY DEFINER
AS $procedure$

        v_report_name         VARCHAR2(100);
        v_query               CLOB;
        v_query1              CLOB;
        v_query2              CLOB;
        v_mid_flag            VARCHAR2(1);
        v_pid_flag            VARCHAR2(1);
        v_append_whr          VARCHAR2(4000);
        v_is_issuer           VARCHAR2(1);
        v_channel_flag        VARCHAR2(1);
        v_card_flag           VARCHAR2(1);
        v_institution_query   VARCHAR2(4000);
        v_issuer_query        VARCHAR2(4000);
        v_zone_query          VARCHAR2(4000);
        v_branch_query        VARCHAR2(4000);
        v_product_query       VARCHAR2(4000);
        v_order_by            VARCHAR2(1000);
        v_group_by            VARCHAR2(1000);
        v_mid_query           VARCHAR2(4000);
        v_pid_query           VARCHAR2(4000);
        v_channel_query       VARCHAR2(4000);
        v_sqlcode             VARCHAR2(1000);
        v_errmsg              VARCHAR2(1000);
        v_count               NUMBER;
        v_institution_name    VARCHAR2(100);
        v_program_name        VARCHAR2(100);
        v_product_name        VARCHAR2(100);
        v_pid_name            VARCHAR2(100);
        v_mid_name            VARCHAR2(100);
        v_channel_name        VARCHAR2(100);
        v_sheet_name1         VARCHAR2(50);
        v_sheet_name2         VARCHAR2(50);
        v_object_type         VARCHAR2(1);
        v_object_call         VARCHAR2(100);
		 v_institution_flag character varying(1);
    v_issuer_flag character varying(1);
    v_zone_flag character varying(1);
    v_branch_flag character varying(1);
    v_product_flag character varying(1);
    BEGIN
        proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'proc_Generalized_report STARTED...!!', sysdate);
        proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'proc_Generalized_report ...!!'
                                                                          || p_role_id
                                                                          || p_report_id
                                                                          || p_institution_id
                                                                          || ' ISSUER ID '
                                                                          || p_issuer_id
                                                                          || ' ZONE ID '
                                                                          || p_zone_id
                                                                          || ' BRANCH ID '
                                                                          || p_branch_id
                                                                          || ' PRODUCT ID '
                                                                          || p_product_id
                                                                          || ' P_FROM DATE '
                                                                          || p_fromdate
                                                                          || ' P_TO DATE '
                                                                          || p_todate
                                                                          || ' p_monthyear '
                                                                          || p_monthyear
                                                                          || ' p_year '
                                                                          || p_year
                                                                          || ' p_outlet_id'
                                                                          || p_outlet_id, sysdate);

        v_query := 'select a.report_name,b.query,b.query1,b.query2,b.institution_flag,b.issuer_flag,b.zone_flag,b.branch_flag,b.Product_Flag,b.institution_query,b.issuer_query,b.zone_query,b.branch_query,b.Product_query,b.order_by,b.is_issuer,b.mid_flag,b.mid_query,b.pid_flag,b.pid_query,b.group_by,b.channel_query,b.channel_flag,b.card_flag,b.sheet1_name,b.sheet2_name,b.object_type,b.object_call from pcs_report_config a, Role_Report_Link b
                  where a.id=b.report_id
                  and b.role_id=:1
                  and a.id=:2
                  and b.enable=''Y'''
        ;
        dbms_output.put_line(v_query);
        EXECUTE IMMEDIATE v_query
        INTO
            v_report_name,
            v_query,
            v_query1,
            v_query2,
            v_institution_flag,
            v_issuer_flag,
            v_zone_flag,
            v_branch_flag,
            v_product_flag,
            v_institution_query,
            v_issuer_query,
            v_zone_query,
            v_branch_query,
            v_product_query,
            v_order_by,
            v_is_issuer,
            v_mid_flag,
            v_mid_query,
            v_pid_flag,
            v_pid_query,
            v_group_by,
            v_channel_query,
            v_channel_flag,
            v_card_flag,
            v_sheet_name1,
            v_sheet_name2,
            v_object_type,
            v_object_call
            USING p_role_id, p_report_id;

        dbms_output.put_line(v_sheet_name1);
        IF v_object_type = 'Y' THEN
            dbms_output.put_line(v_object_call);
            v_object_call := replace(replace(replace(replace(replace(replace(v_object_call, '#p_fromdate#', p_fromdate), '#p_todate#'
            , p_todate), '3p_zone_id#', p_zone_id), '#p_outlet_id#', p_outlet_id), '#p_issuer_id#', p_issuer_id), '#p_product_id#'
            , p_product_id);

            dbms_output.put_line(v_object_call);
            EXECUTE IMMEDIATE 'BEGIN '
                              || v_object_call
                              || ' END;';
        END IF;

        SELECT
            CASE
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_issuer_query
                    || CHR(10)
                    || v_mid_query
                    || CHR(10)
                    || v_pid_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_issuer_query
                    || CHR(10)
                    || v_mid_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'Y'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_issuer_query
                    || CHR(10)
                    || v_pid_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_issuer_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_issuer_query
                    || CHR(10)
                    || v_mid_query
                    || CHR(10)
                    || v_pid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'N'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_mid_query
                    || CHR(10)
                    || v_pid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_pid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_issuer_query
                    || CHR(10)
                    || v_mid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_issuer_query
                    || CHR(10)
                    || v_pid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_issuer_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'N'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_mid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_product_flag = 'Y'
                     AND v_channel_flag = 'N' THEN
                    v_issuer_query
                    || CHR(10)
                    || v_product_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'Y'
                     AND v_product_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_issuer_query
                    || CHR(10)
                    || v_product_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'Y'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_mid_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'Y'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_pid_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'N'
                     AND v_product_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_product_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'N'
                     AND v_product_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'N' THEN
                    v_institution_query
                    || CHR(10)
                    || v_product_query  -- line added by AP , sanjeev to confirm
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'Y'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'Y' THEN
                    v_institution_query
                    || CHR(10)
                    || v_issuer_query
                    || CHR(10)
                    || v_channel_query
                WHEN v_institution_flag = 'Y'
                     AND v_issuer_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'Y' THEN
                    v_institution_query
                    || CHR(10)
                    || v_channel_query  -- line added by AP , sanjeev to confirm
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'Y'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_channel_flag = 'Y' THEN
                    v_issuer_query
                    || CHR(10)
                    || v_channel_query
                WHEN v_institution_flag = 'N'
                     AND v_issuer_flag = 'N'
                     AND v_product_flag = 'N'
                     AND v_mid_flag = 'N'
                     AND v_pid_flag = 'N'
                     AND v_channel_flag = 'Y' THEN
                    v_channel_query
            END
        INTO v_append_whr
        FROM
            dual;

        proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'proc_Generalized_report STARTTED...!!' || v_append_whr
        , sysdate);
        dbms_output.put_line('where condition :::' || v_append_whr);
        IF v_query IS NOT NULL THEN
            v_query := v_query
         || chr(10)
         || v_append_whr
         || chr(10)
         || v_group_by
         || chr(10)
         || v_order_by;

        dbms_output.put_line(v_query);
        v_query := replace(replace(
            replace(
                replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    replace(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(v_query,'#p_institution_id#',p_institution_id),
                                                        '#p_issuer_id#',
                                                        p_issuer_id
                                                    ),
                                                    '#p_zone_id#',
                                                    p_zone_id
                                                ),
                                                '#p_branch_id#',
                                                p_branch_id
                                            ),
                                            '#p_product_id#',
                                            p_product_id
                                        ),
                                        '#p_fromdate#',
                                        p_fromdate
                                    ),
                                    '#p_todate#',
                                    p_todate
                                ),
                                '#p_monthyear#',
                                p_monthyear
                            ),
                            '#p_year#',
                            p_year
                        ),
                        '#p_mid#',
                        p_zone_id
                    ),
                    '#p_pid#',
                    p_zone_id
                ),
                '#p_program_id#',
                p_zone_id
            ),
            '#v_card_flag#',
            v_card_flag
        ), '#p_outlet_id#', p_outlet_id);

        dbms_output.put_line(v_query);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'proc_Generalized_report v_query...!!' || v_query,
            SYSDATE
        );
        OPEN p_out FOR v_query;

        p_sheet_name := v_report_name || '-';
        END IF;

       IF v_query1 IS NOT NULL and length(v_query1)>0
    THEN
        v_query1 := v_query1;
        dbms_output.put_line(v_query1);
        v_query1 := replace(
            replace(
                replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    replace(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(v_query1,'#p_institution_id#',p_institution_id),
                                                        '#p_issuer_id#',
                                                        p_issuer_id
                                                    ),
                                                    '#p_zone_id#',
                                                    p_zone_id
                                                ),
                                                '#p_branch_id#',
                                                p_branch_id
                                            ),
                                            '#p_product_id#',
                                            p_product_id
                                        ),
                                        '#p_fromdate#',
                                        p_fromdate
                                    ),
                                    '#p_todate#',
                                    p_todate
                                ),
                                '#p_monthyear#',
                                p_monthyear
                            ),
                            '#p_year#',
                            p_year
                        ),
                        '#p_mid#',
                        p_zone_id
                    ),
                    '#p_pid#',
                    p_zone_id
                ),
                '#p_program_id#',
                p_zone_id
            ),
            '#v_card_flag#',
            v_card_flag
        );

        dbms_output.put_line(v_query1);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'proc_Generalized_report v_query1...!!' || v_query1,
            SYSDATE
        );
        OPEN p_out1 FOR v_query1;

        p_sheet_name := p_sheet_name || v_sheet_name1 || '-';
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'p_sheet_name QUERY...!!' || p_sheet_name,
            SYSDATE
        );

        END IF;

        IF
        v_query2 IS NOT NULL and length(v_query2)>0
    THEN
        v_query2 := v_query2;
        dbms_output.put_line(v_query2);
        v_query2 := replace(
            replace(
                replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    replace(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(v_query2,'#p_institution_id#',p_institution_id),
                                                        '#p_issuer_id#',
                                                        p_issuer_id
                                                    ),
                                                    '#p_zone_id#',
                                                    p_zone_id
                                                ),
                                                '#p_branch_id#',
                                                p_branch_id
                                            ),
                                            '#p_product_id#',
                                            p_product_id
                                        ),
                                        '#p_fromdate#',
                                        p_fromdate
                                    ),
                                    '#p_todate#',
                                    p_todate
                                ),
                                '#p_monthyear#',
                                p_monthyear
                            ),
                            '#p_year#',
                            p_year
                        ),
                        '#p_mid#',
                        p_zone_id
                    ),
                    '#p_pid#',
                    p_zone_id
                ),
                '#p_program_id#',
                p_zone_id
            ),
            '#v_card_flag#',
            v_card_flag
        );

        dbms_output.put_line(v_query2);
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'proc_Generalized_report v_query2...!!' || v_query2,
            SYSDATE
        );
        OPEN p_out2 FOR v_query2;

        p_sheet_name := p_sheet_name || v_sheet_name2 || '-';
        proc_processlog(
            'REPORT',
            'proc_Generalized_report',
            'PROCEDURE',
            'p_sheet_name QUERY1...!!' || p_sheet_name,
            SYSDATE
        );
    END IF;

        SELECT
            COUNT(1)
        INTO v_count
        FROM
            cs_config_org_master
        WHERE
            institution_id = p_institution_id;

        IF v_count != 0 THEN
            SELECT DISTINCT
                institution_name
            INTO v_institution_name
            FROM
                cs_config_org_master
            WHERE
                institution_id = p_institution_id;

            v_institution_name := v_institution_name || '-';
            dbms_output.put_line(v_institution_name);
        END IF;

        SELECT
            COUNT(1)
        INTO v_count
        FROM
            cs_config_org_master
        WHERE
            program_id = p_issuer_id;

        IF v_count != 0 THEN
            SELECT DISTINCT
                program_name
            INTO v_program_name
            FROM
                cs_config_org_master
            WHERE
                program_id = p_issuer_id;

            v_program_name := v_program_name || '-';
            dbms_output.put_line(v_program_name);
        END IF;

--select count(1) into v_count from cs_config_org_master where product_id=p_product_id;

        SELECT
            COUNT(1)
        INTO v_count
        FROM
            cs_config_org_master
        WHERE
            product_id = p_zone_id;

        IF v_count != 0 THEN 

       -- select distinct product_name into v_product_name from cs_config_org_master where product_id=p_product_id;
            SELECT DISTINCT
                product_name
            INTO v_product_name
            FROM
                cs_config_org_master
            WHERE
                product_id = p_zone_id;

            dbms_output.put_line(v_product_name);
        END IF;

        SELECT
            COUNT(1)
        INTO v_count
        FROM
            cs_config_org_master
        WHERE
            pid = p_zone_id;

        IF v_count != 0 THEN
            SELECT DISTINCT
                pid_desc
            INTO v_pid_name
            FROM
                cs_config_org_master
            WHERE
                pid = p_zone_id;

            dbms_output.put_line(v_pid_name);
        END IF;

        SELECT
            COUNT(1)
        INTO v_count
        FROM
            cs_config_org_master
        WHERE
            mid = p_zone_id;

        IF v_count != 0 THEN
            SELECT DISTINCT
                name
            INTO v_mid_name
            FROM
                cms_outlet
            WHERE
                outlet_id = p_outlet_id;

            dbms_output.put_line(v_mid_name);
        END IF;

        SELECT
            COUNT(1)
        INTO v_count
        FROM
            cs_config_org_master
        WHERE
            channel_id = p_zone_id;

        IF v_count != 0 THEN
            SELECT DISTINCT
                channel_name
            INTO v_channel_name
            FROM
                cs_config_org_master
            WHERE
                channel_id = p_zone_id;

            dbms_output.put_line(v_channel_name);
        END IF;

        SELECT
            v_institution_name
            || v_program_name
            || v_product_name
            || v_pid_name
            || v_mid_name
            || v_channel_name
        INTO p_report_details
        FROM
            dual;

        p_report_details := regexp_replace(upper(p_report_details), '-$', '')
                            || '-'
                            || upper(v_report_name);

        dbms_output.put_line(p_report_details);
        p_sheet_name := regexp_replace(upper(p_sheet_name), '-$', '');
        proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'p_sheet_name...!!' || p_sheet_name, sysdate);
        dbms_output.put_line(p_sheet_name);
    EXCEPTION
        WHEN OTHERS THEN
            v_sqlcode := sqlcode;
            v_errmsg := sqlerrm
                        || ' '
                        ;
            dbms_output.put_line(v_errmsg);
			dbms_output.put_line('Errroorrr'||v_sqlcode);
            proc_processlog('REPORT', 'proc_Generalized_report', 'PROCEDURE', 'error occured...!!' || v_errmsg, sysdate);
            OPEN p_out FOR SELECT
                               '' err
                           FROM
                               dual;
--open p_out for select  'Invalid Report Configuration...!!!' err from dual;

    END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_processlog(p_process_id character varying DEFAULT NULL::character varying, p_object_name character varying DEFAULT NULL::character varying, p_object_type character varying DEFAULT NULL::character varying, p_comments character varying, p_entry_date timestamp without time zone)
 SECURITY DEFINER
AS $procedure$
pragma autonomous_transaction;
BEGIN
    INSERT INTO processlog (
        process_id,
        object_name,
        object_type,
        comments,
        entry_date
    ) VALUES (
        p_process_id,
        p_object_name,
        p_object_type,
        p_comments,
        p_entry_date
    );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('SQL CODE :'
                             || sqlcode
                             || ' ERROR MSG :'
                             || sqlerrm);
                            -- || dbms_utility.format_error_backtrace);
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_top_ten_txn_detail(p_account_no character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$
BEGIN
    OPEN p_out FOR
        SELECT
            NVL(f004,'0') f004,
--            f004,
            drcr,
            f043,
            f037,
            sys_txn_date,
            f039,
            response_reason,
            f042,
            f038,
            display_date,
            drcr_flag,
            narration
        FROM
            (
                SELECT
                    f004,
                    nvl(drcr,'-') AS drcr,
                    nvl(f043,'-') AS f043,
                    nvl(f037,'-') AS f037,
                    sys_txn_date,
                    nvl(f039,'-') AS f039,
                    nvl(response_reason,'-') AS response_reason,
                    nvl(f042,'-') AS f042,
                    nvl(f038,'-') AS f038,
                    display_date,
                    nvl(drcr_flag,'-') AS drcr_flag,
                    nvl(narration,'-') AS narration
                FROM
                    (
                        SELECT
                            ROWNUM AS id,
                            ltrim(TO_CHAR(
                                (f004 / 100),
                                999999999999999990.99
                            ) ) f004,
                            nvl(
                                (
                                    SELECT
                                        txn_name
                                    FROM
                                        transaction_type a
                                    WHERE
                                        a.txn_type = txn.txn_type
                                ),
                                'Service Transactions'
                            ) drcr,
                            nvl(
                                f043,
                                (
                                    SELECT
                                        name
                                    FROM
                                        cms_outlet
                                    WHERE
                                        outlet_id = txn.f042
                                )
                            ) f043,
                            f037,
                            sys_txn_date,
                            TO_CHAR(sys_txn_date,'DD-Mon-YYYY hh:mi:ss AM') AS display_date,
                            DECODE(
                                f039,
                                '00',
                                'Success - '
                                 || f038,
                                'Declined -'
                                 || errc.response_reason
                            ) f039,
                            f038,
                            errc.response_reason,
                            f042,
                            f002,
                            f041,
                            settle_flag,
                            ticket_id,
                            nvl(remarks,
                            (
                                SELECT
                                    txn_name
                                FROM
                                    transaction_type a
                                WHERE
                                    a.txn_type = txn.txn_type
                            )) narration,
                            DECODE(
                                drcr,
                                'D',
                                'Debit',
                                'C',
                                'Credit',
                                'Dr',
                                'Debit',
                                'Cr',
                                'Credit'
                            ) drcr_flag
                        FROM
                            (
                                SELECT
                                    settle_flag,
                                    txn_issuer,
                                    txn_fwd_inst_1,
                                    txn_fwd_inst_2,
                                    txn_auth_source,
                                    txn_channel,
                                    txn_type,
                                    txn_code,
                                    txn_date,
                                    txn_time,
                                    fp_masked,
                                    fp_type,
                                    int_mti,
                                    int_ref_no,
                                    txn_batch_no,
                                    txn_batch_status,
                                    (SELECT drcr FROM transaction_type tt WHERE tt.txn_type=off.txn_type) drcr,
                                    fp_form_factor,
                                    int_seq_no,
                                    int_rc,
                                    scheme,
                                    int_rrn,
                                    int_proc_code,
                                    int_amt,
                                    int_adj_amt1,
                                    int_adj_amt2,
                                    int_txn_fees1,
                                    int_txn_fees2,
                                    int_pos_entry_mode,
                                    int_void_flag,
                                    mti,
                                    f002,
                                    f003,
                                    f004,
                                    f005,
                                    f006,
                                    f007,
                                    f008,
                                    f009,
                                    f010,
                                    f011,
                                    f012,
                                    f013,
                                    f014,
                                    f015,
                                    f016,
                                    f017,
                                    f018,
                                    f019,
                                    f020,
                                    f021,
                                    f022,
                                    f023,
                                    f024,
                                    f025,
                                    f026,
                                    f027,
                                    f028,
                                    f029,
                                    f030,
                                    f031,
                                    f032,
                                    f033,
                                    f034,
                                    f035,
                                    f036,
                                    f037,
                                    f038,
                                    f039,
                                    f040,
                                    f041,
                                    f042,
                                    f043,
                                    f044,
                                    f045,
                                    f046,
                                    f047,
                                    f048,
                                    f049,
                                    f050,
                                    f051,
                                    f052,
                                    f053,
                                    f054,
                                    f055,
                                    f056,
                                    f057,
                                    f058,
                                    f059,
                                    f060,
                                    f061,
                                    f062,
                                    f063,
                                    f064,
                                    f065,
                                    f066,
                                    f067,
                                    f068,
                                    f069,
                                    f070,
                                    f071,
                                    f072,
                                    f073,
                                    f074,
                                    f075,
                                    f076,
                                    f077,
                                    f078,
                                    f079,
                                    f080,
                                    f081,
                                    f082,
                                    f083,
                                    f084,
                                    f085,
                                    f086,
                                    f087,
                                    f088,
                                    f089,
                                    f090,
                                    f091,
                                    f092,
                                    f093,
                                    f094,
                                    f095,
                                    f096,
                                    f097,
                                    f098,
                                    f099,
                                    f100,
                                    f101,
                                    f102,
                                    f103,
                                    f104,
                                    f105,
                                    f106,
                                    f107,
                                    f108,
                                    f109,
                                    f110,
                                    f111,
                                    f112,
                                    f113,
                                    f114,
                                    f115,
                                    f116,
                                    f117,
                                    f118,
                                    f119,
                                    f120,
                                    f121,
                                    f122,
                                    f123,
                                    f124,
                                    f125,
                                    f126,
                                    f127,
                                    f128,
                                    reversal_flag,
                                    txn_acquirer,
                                    settle_date,
                                    program_id,
                                    bank_id,
--                                    NVL(off.trml_date,off.sys_txn_date) sys_txn_date,
                                    off.sys_txn_date,
                                    balance_update_flag,
                                    balance_update_date,
                                    sub_batch_no,
                                    acc_flag,
                                    ticket_id,
                                    null as file_name,
                                    null as batch_no,
                                    null as remarks
                                FROM
                                    aswt_switch_txn_offline off left join transaction_balance bal on 'OFFL'||off.unique_txn_id = bal.ref_txn_id
                                WHERE
                                    prepaid_account_number = p_account_no
                                UNION ALL
                                SELECT
                                    settle_flag,
                                    txn_issuer,
                                    txn_fwd_inst_1,
                                    txn_fwd_inst_2,
                                    txn_auth_source,
                                    txn_channel,
                                    txn_type,
                                    txn_code,
                                    txn_date,
                                    txn_time,
                                    fp_masked,
                                    fp_type,
                                    int_mti,
                                    int_ref_no,
                                    txn_batch_no,
                                    txn_batch_status,
                                    (SELECT drcr FROM transaction_type tt WHERE tt.txn_type=auth.txn_type) drcr,
                                    fp_form_factor,
                                    int_seq_no,
                                    int_rc,
                                    scheme,
                                    int_rrn,
                                    int_proc_code,
                                    int_amt,
                                    int_adj_amt1,
                                    int_adj_amt2,
                                    int_txn_fees1,
                                    int_txn_fees2,
                                    int_pos_entry_mode,
                                    int_void_flag,
                                    mti,
                                    f002,
                                    f003,
                                    f004,
                                    f005,
                                    f006,
                                    f007,
                                    f008,
                                    f009,
                                    f010,
                                    f011,
                                    f012,
                                    f013,
                                    f014,
                                    f015,
                                    f016,
                                    f017,
                                    f018,
                                    f019,
                                    f020,
                                    f021,
                                    f022,
                                    f023,
                                    f024,
                                    f025,
                                    f026,
                                    f027,
                                    f028,
                                    f029,
                                    f030,
                                    f031,
                                    f032,
                                    f033,
                                    f034,
                                    f035,
                                    f036,
                                    f037,
                                    f038,
                                    f039,
                                    f040,
                                    f041,
                                    f042,
                                    f043,
                                    f044,
                                    f045,
                                    f046,
                                    f047,
                                    f048,
                                    f049,
                                    f050,
                                    f051,
                                    f052,
                                    f053,
                                    f054,
                                    f055,
                                    f056,
                                    f057,
                                    f058,
                                    f059,
                                    f060,
                                    f061,
                                    f062,
                                    f063,
                                    f064,
                                    f065,
                                    f066,
                                    f067,
                                    f068,
                                    f069,
                                    f070,
                                    f071,
                                    f072,
                                    f073,
                                    f074,
                                    f075,
                                    f076,
                                    f077,
                                    f078,
                                    f079,
                                    f080,
                                    f081,
                                    f082,
                                    f083,
                                    f084,
                                    f085,
                                    f086,
                                    f087,
                                    f088,
                                    f089,
                                    f090,
                                    f091,
                                    f092,
                                    f093,
                                    f094,
                                    f095,
                                    f096,
                                    f097,
                                    f098,
                                    f099,
                                    f100,
                                    f101,
                                    f102,
                                    f103,
                                    f104,
                                    f105,
                                    f106,
                                    f107,
                                    f108,
                                    f109,
                                    f110,
                                    f111,
                                    f112,
                                    f113,
                                    f114,
                                    f115,
                                    f116,
                                    f117,
                                    f118,
                                    f119,
                                    f120,
                                    f121,
                                    f122,
                                    f123,
                                    f124,
                                    f125,
                                    f126,
                                    f127,
                                    f128,
                                    reversal_flag,
                                    txn_acquirer,
                                    settle_date,
                                    program_id,
                                    bank_id,
                                    sys_txn_date,
                                    balance_update_flag,
                                    balance_update_date,
                                    sub_batch_no,
                                    acc_flag,
                                    null,
                                    null as file_name,
                                    null as batch_no,
                                    null as remarks
                                FROM
                                    aswt_switch_txn_authrization auth
                                WHERE
                                    prepaid_account_number = p_account_no
                                UNION ALL
                                SELECT
                                    settlement_flag,
                                    '' AS txn_issuer,
                                    '' AS txn_fwd_inst_1,
                                    '' AS txn_fwd_inst_2,
                                    '' AS txn_auth_source,
                                    '' AS txn_channel,
                                    DECODE(
                                        msg_type,
                                        'TOP UP',
                                        '91028',
                                        'CB',
                                        '92028',
                                        'INITIAL TOP UP',
                                        '91029',
                                        'BALANCE TRANSFER',
                                        '95028',
                                        'BALANCE TRANSFER REVERSAL',
                                        '96028',
                                        'Balance Transfer Replacement',
                                        '97028',
                                        'Balance Mismatch_TopUp Reversal',
                                        '98028',
                                        txn_type
                                    ) AS txn_type,
                                    '' AS txn_code,
                                    TO_CHAR(date_time,'DDMMYYYY') AS txn_date,
                                    TO_CHAR(date_time,'hh24miss') AS txn_time,
                                    '' AS fp_masked,
                                    '' AS fp_type,
                                    '' AS int_mti,
                                    substr(arn_reference,4,16) AS int_ref_no,
                                    '' AS txn_batch_no,
                                    '' AS txn_batch_status,
                                    dr_cr_flag AS drcr,
                                    '' AS fp_form_factor,
                                    '' AS int_seq_no,
                                    '' AS int_rc,
                                    '' AS scheme,
                                    substr(arn_reference,4,16) AS int_rrn,
                                    '' AS int_proc_code,
                                    TO_CHAR(lpad(
                                        (txn_amount * 100),
                                        12,
                                        0
                                    ) ) AS int_amt,
                                    '' AS int_adj_amt1,
                                    '' AS int_adj_amt2,
                                    '' AS int_txn_fees1,
                                    '' AS int_txn_fees2,
                                    channel_id AS int_pos_entry_mode,
                                    '' AS int_void_flag,
                                    channel_id AS mti,
                                    card_token AS f002,
                                    '' AS f003,
                                    lpad(
                                        (txn_amount * 100),
                                        12,
                                        0
                                    ) AS f004,
                                    '' AS f005,
                                    '' AS f006,
                                    '' AS f007,
                                    '' AS f008,
                                    '' AS f009,
                                    '' AS f010,
                                    '' AS f011,
                                    '' AS f012,
                                    '' AS f013,
                                    '' AS f014,
                                    '' AS f015,
                                    '' AS f016,
                                    '' AS f017,
                                    '' AS f018,
                                    '' AS f019,
                                    '' AS f020,
                                    '' AS f021,
                                    '' AS f022,
                                    '' AS f023,
                                    '' AS f024,
                                    '' AS f025,
                                    '' AS f026,
                                    '' AS f027,
                                    '' AS f028,
                                    '' AS f029,
                                    '' AS f030,
                                    '' AS f031,
                                    '' AS f032,
                                    '' AS f033,
                                    '' AS f034,
                                    '' AS f035,
                                    '' AS f036,
                                    arn_reference AS f037,
                                    '' AS f038,
                                    response_code AS f039,
                                    '' AS f040,
                                    branch_id AS f041,
                                    mid AS f042,
                                    '' AS f043,
                                    '' AS f044,
                                    '' AS f045,
                                    '' AS f046,
                                    '' AS f047,
                                    '' AS f048,
                                    '' AS f049,
                                    '' AS f050,
                                    '' AS f051,
                                    '' AS f052,
                                    '' AS f053,
                                    '' AS f054,
                                    '' AS f055,
                                    '' AS f056,
                                    '' AS f057,
                                    '' AS f058,
                                    '' AS f059,
                                    '' AS f060,
                                    '' AS f061,
                                    '' AS f062,
                                    '' AS f063,
                                    '' AS f064,
                                    '' AS f065,
                                    '' AS f066,
                                    '' AS f067,
                                    '' AS f068,
                                    '' AS f069,
                                    '' AS f070,
                                    '' AS f071,
                                    '' AS f072,
                                    '' AS f073,
                                    '' AS f074,
                                    '' AS f075,
                                    '' AS f076,
                                    '' AS f077,
                                    '' AS f078,
                                    '' AS f079,
                                    '' AS f080,
                                    '' AS f081,
                                    '' AS f082,
                                    '' AS f083,
                                    '' AS f084,
                                    '' AS f085,
                                    '' AS f086,
                                    '' AS f087,
                                    '' AS f088,
                                    '' AS f089,
                                    '' AS f090,
                                    '' AS f091,
                                    '' AS f092,
                                    '' AS f093,
                                    '' AS f094,
                                    '' AS f095,
                                    '' AS f096,
                                    '' AS f097,
                                    '' AS f098,
                                    '' AS f099,
                                    '' AS f100,
                                    '' AS f101,
                                    '' AS f102,
                                    '' AS f103,
                                    '' AS f104,
                                    '' AS f105,
                                    '' AS f106,
                                    '' AS f107,
                                    '' AS f108,
                                    '' AS f109,
                                    '' AS f110,
                                    '' AS f111,
                                    '' AS f112,
                                    '' AS f113,
                                    '' AS f114,
                                    '' AS f115,
                                    '' AS f116,
                                    '' AS f117,
                                    '' AS f118,
                                    '' AS f119,
                                    '' AS f120,
                                    '' AS f121,
                                    '' AS f122,
                                    '' AS f123,
                                    '' AS f124,
                                    '' AS f125,
                                    '' AS f126,
                                    '' AS f127,
                                    '' AS f128,
                                    '' AS reversal_flag,
                                    '' AS txn_acquirer,
                                    last_settle_date AS settle_date,
                                    '' AS program_id,
                                    '' AS bank_id,
                                    date_time AS sys_txn_date,
                                    '' AS balance_update_flag,
                                    NULL AS balance_update_date,
                                    0 AS sub_batch_no,
                                    NULL AS acc_flag,
                                    NULL,
                                    file_name as file_name,
                                    batch_no as batch_no,
                                    remarks as remarks 
                                FROM
                                    digital_txn_authorization
                                WHERE
                                    prepaid_account_number = p_account_no
                                and txn_type not in('91029')
                                UNION ALL
                                SELECT
                                    '' settle_flag,
                                    '' AS txn_issuer,
                                    '' AS txn_fwd_inst_1,
                                    '' AS txn_fwd_inst_2,
                                    '' AS txn_auth_source,
                                    '' AS txn_channel,
                                        CASE
                                            WHEN fee_ind = 'I' THEN '93028'
                                            WHEN fee_ind = 'P' THEN '93029'
                                            WHEN
                                                fee_ind = 'R'
                                            AND
                                                fee_description = 'REPLOST FOR INSTANT'
                                            THEN '93128'
                                            WHEN
                                                fee_ind = 'R'
                                            AND
                                                fee_description = 'REPLOST FOR PERSO'
                                            THEN '93129'
                                            ELSE fee_ind
                                        END
                                    AS txn_type,
                                    '' AS txn_code,
                                    TO_CHAR(date_time,'DDMMYYYY') AS txn_date,
                                    TO_CHAR(date_time,'hh24miss') AS txn_time,
                                    '' AS fp_masked,
                                    '' AS fp_type,
                                    '' AS int_mti,
                                    rrn AS int_ref_no,
                                    '' AS txn_batch_no,
                                    '' AS txn_batch_status,
                                    drcr AS drcr,
                                    '' AS fp_form_factor,
                                    '' AS int_seq_no,
                                    '' AS int_rc,
                                    '' AS scheme,
                                    rrn AS int_rrn,
                                    '' AS int_proc_code,
                                    TO_CHAR(lpad(
                                        (fee_amt * 100),
                                        12,
                                        0
                                    ) ) AS int_amt,
                                    '' AS int_adj_amt1,
                                    '' AS int_adj_amt2,
                                    '' AS int_txn_fees1,
                                    '' AS int_txn_fees2,
                                    '' AS int_pos_entry_mode,
                                    '' AS int_void_flag,
                                    '' AS mti,
                                    card_number AS f002,
                                    '' AS f003,
                                    lpad(
                                        (fee_amt * 100),
                                        12,
                                        0
                                    ) AS f004,
                                    '' AS f005,
                                    '' AS f006,
                                    '' AS f007,
                                    '' AS f008,
                                    '' AS f009,
                                    '' AS f010,
                                    '' AS f011,
                                    '' AS f012,
                                    '' AS f013,
                                    '' AS f014,
                                    '' AS f015,
                                    '' AS f016,
                                    '' AS f017,
                                    '' AS f018,
                                    '' AS f019,
                                    '' AS f020,
                                    '' AS f021,
                                    '' AS f022,
                                    '' AS f023,
                                    '' AS f024,
                                    '' AS f025,
                                    '' AS f026,
                                    '' AS f027,
                                    '' AS f028,
                                    '' AS f029,
                                    '' AS f030,
                                    '' AS f031,
                                    '' AS f032,
                                    '' AS f033,
                                    '' AS f034,
                                    '' AS f035,
                                    '' AS f036,
                                    rrn AS f037,
                                    rrn AS f038,
                                    '00' AS f039,
                                    '' AS f040,
                                    tid AS f041,
                                    (
                                        SELECT
                                            parent_id
                                        FROM
                                            cms_outlet
                                        WHERE
                                            outlet_id = tid
                                    ) AS f042,
                                    '' AS f043,
                                    '' AS f044,
                                    '' AS f045,
                                    '' AS f046,
                                    '' AS f047,
                                    '' AS f048,
                                    '' AS f049,
                                    '' AS f050,
                                    '' AS f051,
                                    '' AS f052,
                                    '' AS f053,
                                    '' AS f054,
                                    '' AS f055,
                                    '' AS f056,
                                    '' AS f057,
                                    '' AS f058,
                                    '' AS f059,
                                    '' AS f060,
                                    '' AS f061,
                                    '' AS f062,
                                    '' AS f063,
                                    '' AS f064,
                                    '' AS f065,
                                    '' AS f066,
                                    '' AS f067,
                                    '' AS f068,
                                    '' AS f069,
                                    '' AS f070,
                                    '' AS f071,
                                    '' AS f072,
                                    '' AS f073,
                                    '' AS f074,
                                    '' AS f075,
                                    '' AS f076,
                                    '' AS f077,
                                    '' AS f078,
                                    '' AS f079,
                                    '' AS f080,
                                    '' AS f081,
                                    '' AS f082,
                                    '' AS f083,
                                    '' AS f084,
                                    '' AS f085,
                                    '' AS f086,
                                    '' AS f087,
                                    '' AS f088,
                                    '' AS f089,
                                    '' AS f090,
                                    '' AS f091,
                                    '' AS f092,
                                    '' AS f093,
                                    '' AS f094,
                                    '' AS f095,
                                    '' AS f096,
                                    '' AS f097,
                                    '' AS f098,
                                    '' AS f099,
                                    '' AS f100,
                                    '' AS f101,
                                    '' AS f102,
                                    '' AS f103,
                                    '' AS f104,
                                    '' AS f105,
                                    '' AS f106,
                                    '' AS f107,
                                    '' AS f108,
                                    '' AS f109,
                                    '' AS f110,
                                    '' AS f111,
                                    '' AS f112,
                                    '' AS f113,
                                    '' AS f114,
                                    '' AS f115,
                                    '' AS f116,
                                    '' AS f117,
                                    '' AS f118,
                                    '' AS f119,
                                    '' AS f120,
                                    '' AS f121,
                                    '' AS f122,
                                    '' AS f123,
                                    '' AS f124,
                                    '' AS f125,
                                    '' AS f126,
                                    '' AS f127,
                                    '' AS f128,
                                    '' AS reversal_flag,
                                    '' AS txn_acquirer,
                                    date_time AS settle_date,
                                    '' AS program_id,
                                    '' AS bank_id,
                                    date_time AS sys_txn_date,
                                    '' AS balance_update_flag,
                                    NULL AS balance_update_date,
                                    0 AS sub_batch_no,
                                    NULL AS acc_flag,
                                    NULL,
                                    file_name as file_name,
                                    batch_number as batch_no,
                                    remarks as remarks 
                                FROM
                                    cs_fee_temp
                                WHERE
                                    prepaid_account_number = p_account_no
                                UNION ALL
                                SELECT
                                '' settle_flag,
                                '' AS txn_issuer,
                                '' AS txn_fwd_inst_1,
                                '' AS txn_fwd_inst_2,
                                '' AS txn_auth_source,
                                '' AS txn_channel,
                                txn_type AS txn_type,
                                '' AS txn_code,
                                TO_CHAR(transaction_date,'DDMMYYYY') AS txn_date,
                                transaction_time AS txn_time,
                                '' AS fp_masked,
                                '' AS fp_type,
                                '' AS int_mti,
                                rrn AS int_ref_no,
                                '' AS txn_batch_no,
                                '' AS txn_batch_status,
                                dr_cr_ind AS drcr,
                                '' AS fp_form_factor,
                                '' AS int_seq_no,
                                '' AS int_rc,
                                '' AS scheme,
                                rrn AS int_rrn,
                                '' AS int_proc_code,
                                TO_CHAR(lpad(
                                    (amount * 100),
                                    12,
                                    0
                                ) ) AS int_amt,
                                '' AS int_adj_amt1,
                                '' AS int_adj_amt2,
                                '' AS int_txn_fees1,
                                '' AS int_txn_fees2,
                                '' AS int_pos_entry_mode,
                                '' AS int_void_flag,
                                '' AS mti,
                                card_number AS f002,
                                '' AS f003,
                                lpad(
                                    (amount * 100),
                                    12,
                                    0
                                ) AS f004,
                                '' AS f005,
                                '' AS f006,
                                '' AS f007,
                                '' AS f008,
                                '' AS f009,
                                '' AS f010,
                                '' AS f011,
                                '' AS f012,
                                '' AS f013,
                                '' AS f014,
                                '' AS f015,
                                '' AS f016,
                                '' AS f017,
                                '' AS f018,
                                '' AS f019,
                                '' AS f020,
                                '' AS f021,
                                '' AS f022,
                                '' AS f023,
                                '' AS f024,
                                '' AS f025,
                                '' AS f026,
                                '' AS f027,
                                '' AS f028,
                                '' AS f029,
                                '' AS f030,
                                '' AS f031,
                                '' AS f032,
                                '' AS f033,
                                '' AS f034,
                                '' AS f035,
                                '' AS f036,
                                rrn AS f037,
                                approval_code AS f038,
                                '00' AS f039,
                                '' AS f040,
                                tid AS f041,
                                (
                                    SELECT
                                        parent_id
                                    FROM
                                        cms_outlet
                                    WHERE
                                        outlet_id = tid
                                ) AS f042,
                                '' AS f043,
                                '' AS f044,
                                '' AS f045,
                                '' AS f046,
                                '' AS f047,
                                '' AS f048,
                                '' AS f049,
                                '' AS f050,
                                '' AS f051,
                                '' AS f052,
                                '' AS f053,
                                '' AS f054,
                                '' AS f055,
                                '' AS f056,
                                '' AS f057,
                                '' AS f058,
                                '' AS f059,
                                '' AS f060,
                                '' AS f061,
                                '' AS f062,
                                '' AS f063,
                                '' AS f064,
                                '' AS f065,
                                '' AS f066,
                                '' AS f067,
                                '' AS f068,
                                '' AS f069,
                                '' AS f070,
                                '' AS f071,
                                '' AS f072,
                                '' AS f073,
                                '' AS f074,
                                '' AS f075,
                                '' AS f076,
                                '' AS f077,
                                '' AS f078,
                                '' AS f079,
                                '' AS f080,
                                '' AS f081,
                                '' AS f082,
                                '' AS f083,
                                '' AS f084,
                                '' AS f085,
                                '' AS f086,
                                '' AS f087,
                                '' AS f088,
                                '' AS f089,
                                '' AS f090,
                                '' AS f091,
                                '' AS f092,
                                '' AS f093,
                                '' AS f094,
                                '' AS f095,
                                '' AS f096,
                                '' AS f097,
                                '' AS f098,
                                '' AS f099,
                                '' AS f100,
                                '' AS f101,
                                '' AS f102,
                                '' AS f103,
                                '' AS f104,
                                '' AS f105,
                                '' AS f106,
                                '' AS f107,
                                '' AS f108,
                                '' AS f109,
                                '' AS f110,
                                '' AS f111,
                                '' AS f112,
                                '' AS f113,
                                '' AS f114,
                                '' AS f115,
                                '' AS f116,
                                '' AS f117,
                                '' AS f118,
                                '' AS f119,
                                '' AS f120,
                                '' AS f121,
                                '' AS f122,
                                '' AS f123,
                                '' AS f124,
                                '' AS f125,
                                '' AS f126,
                                '' AS f127,
                                '' AS f128,
                                '' AS reversal_flag,
                                '' AS txn_acquirer,
                                Action_Date AS settle_date,
                                '' AS program_id,
                                '' AS bank_id,
                                action_date AS sys_txn_date,
                                '' AS balance_update_flag,
                                NULL AS balance_update_date,
                                0 AS sub_batch_no,
                                NULL AS acc_flag,
                                NULL,
                                file_name as file_name,
                                batch_no as batch_no,
                                remarks as remarks
                            FROM
                                cs_manual_adjustment
                            WHERE
                                prepaid_account_number = p_account_no
                            AND action_date IS NOT NULL
                            ) txn,
                            aswt_error_code errc
                        WHERE
                                txn.f039 = errc.response_code
                            AND
                                txn.sys_txn_date IS NOT NULL
                        ORDER BY txn.sys_txn_date DESC, txn.drcr DESC, f037 DESC
                    ) aswt_switch_txn_view
                WHERE
--                        f002 = p_account_no
--                    AND
--                        UPPER(f039) like '%SUCCESS%'
--                    AND
--                        f004 <> 0
--                    AND
                        sys_txn_date IS NOT NULL
                ORDER BY sys_txn_date DESC, drcr DESC, f037 DESC
            )
        WHERE
            ROWNUM <= 10;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error Occurred..!!'
         || sqlcode
         || ' '
         || sqlerrm);

        RAISE;
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_txn_dump(p_date character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$
v_date date;
begin
v_date :=to_date(p_date,'DD-MM-YYYY');
  open p_out for 
select
	aswt.TXN_TYPE as transaction_code,
	aswt.INT_MTI,
	aswt.INT_REF_NO,
	aswt.DRCR,
	cd.card_ref_number as card_ref_number ,
	aswt.F003,
	round(nvl(aswt.F004 ,0)/ 100,2) as amount,
	round(nvl(decode(aswt.F005,'',0,aswt.F005),0)/100,2) as F005,
	round(nvl(decode(aswt.F006,'',0,aswt.F006),0)/100,2)as F006,
	--aswt.F007 as transmission_date_time,
	aswt.F011,
--    aswt.F012::time,
    to_char(to_date(aswt.F013||to_char(sysdate,'YY')||' '||aswt.F012 ,'MMDDYY HH24:MI:SS'),'dd/mm/yyyy hh24:mi:ss') as f013,
	aswt.F018,
	aswt.F019,
	aswt.F022,
	aswt.F025,
	aswt.F032,
	aswt.F033,
	aswt.F037,
	aswt.F038,
	aswt.F039,
	aswt.F041,
	aswt.F042,
	aswt.F043,
	aswt.F049,
	aswt.F050,
	aswt.F051,
	aswt.F054,
	aswt.F060,
	aswt.F090,
	aswt.F100,
	aswt.F106,
	aswt.F120,
	aswt.F121,
	to_char(aswt.sys_txn_date,'dd/mm/yyyy hh24:mi:ss') as sys_txn_date,
	to_char(aswt.settle_date,'dd/mm/yyyy hh24:mi:ss') as settle_date,
	aswt.ticket_id,
	round(aswt.current_balance,2) as current_balance,
	round(aswt.previous_balance,2) as previous_balance,
	round(aswt.hold_balance,2) as hold_balance,
	aswt.unique_txn_id
	from
	aswt_switch_txn_authrization aswt
join card_detail cd on
	cd.hash_card_number = aswt.f002
WHERE
aswt.sys_txn_date >= (NOW() - INTERVAL '15 minutes')
-- TRUNC(aswt.sys_txn_date) between trunc(v_date) and trunc(sysdate)
union all 
select digi.txn_type,
'' as int_mti,
digi.arn_reference as int_ref_no,
decode(digi.dr_cr_flag,'Dr','D','Cr','C') as drcr,
cd.card_ref_number as f002,
'' as f003,
round(digi.txn_amount,2) as f004,
round(decode(digi.settle_flag,'Y',digi.txn_amount,0),2) as f005,
round(0,2) as f006,
--'' as f007,
'' as f011,
--digi.date_time::time as f012,
to_char(digi.date_time,'dd/mm/yyyy hh24:mi:ss') as f013,
'' as f018,
'' as f019,
'' as f022,
'' as f025,
'' as f032,
'' as f033,
digi.arn_reference as f037,
'' as f038,
digi.response_code as f039,
digi.branch_id as f041,
digi.mid as f042,
'' as f043,
'AED' as f049,
decode(digi.settle_flag ,'Y','AED','') as f050,
'' as f051,
'' as f054,
'' as f060,
'' as f090,
'' as f100,
'' as f106,
'' as f120,
'' as f121,
to_char(digi.date_time, 'dd/mm/yyyy hh24:mi:ss') as sys_txn_date,
to_char(digi.settle_date, 'dd/mm/yyyy hh24:mi:ss') as settle_date,
'' as ticket_id,
round(digi.current_balance,2) as current_balance,
round(digi.previous_balance,2) as previous_balance,
round(digi.hold_balance,2) as hold_balance,
digi.arn_reference as unique_txn_id
from
digital_txn_authorization digi
join card_detail cd on
digi.card_enc = cd.hash_card_number
WHERE
    digi.date_time >= (NOW() - INTERVAL '15 minutes')
--TRUNC(digi.date_time) between trunc(v_date) and trunc(sysdate)
union all 
select
	cs.txn_type,
	'' as int_mti,
	cs.rrn as int_ref_no,
	cs.dr_cr_ind as drcr,
	cd.card_ref_number as f002,
	'' as f003,
	round(cs.amount,2) as f004,
	round(decode(cs.settle_flag,'Y',cs.amount,0),2) as f005,
	round(0,2) as f006,
	--'' as f007,
	'' as f011,
--   cs.action_date::time as f012,
   to_char(cs.action_date,'dd/mm/yyyy hh24:mi:ss') as f013,
	'' as f018,
	'' as f019,
	'' as f022,
	'' as f025,
	'' as f032,
	'' as f033,
	cs.rrn as f037,
	cs.approval_code as f038,
	'00' as f039,
	cs.tid as f041,
	'' as f042,
	'' as f043,
	'AED' as f049,
	decode(cs.settle_flag ,'Y','AED','') as f050,
	'' as f051,
	'' as f054,
	'' as f060,
	'' as f090,
	'' as f100,
	'' as f106,
	'' as f120,
	'' as f121,
	to_char(cs.action_date, 'dd/mm/yyyy hh24:mi:ss'),
	to_char(cs.settle_date , 'dd/mm/yyyy hh24:mi:ss') as settle_date,
	'' as ticket_id,
	round(current_balance,2) as current_balance,
	round(previous_balance,2) as previous_balance,
	round(hold_balance,2) as hold_balance,
	cs.rrn as unique_txn_id
from
	cs_manual_adjustment cs
join card_detail cd on
	cs.card_number = cd.hash_card_number
WHERE
   cs.action_date >= (NOW() - INTERVAL '15 minutes')
--TRUNC(cs.action_date) between trunc(v_date) and trunc(sysdate)
union all 
select
	fee.fee_ind,
	'' as int_mti,
	fee.rrn as int_ref_no,
	decode(fee.drcr,'Dr','D','Cr','C')  as drcr,
	cd.card_ref_number as f002,
	'' as f003,
	round(fee.fee_amt,2) as f004,
	round(decode(fee.settle_flag ,'Y',fee.fee_amt,0),2) as f005,
	round(0,2) as f006,
	--'' as f007,
	'' as f011,
--   fee.date_time::time as f012,
   to_char(fee.date_time,'dd/mm/yyyy hh24:mi:ss') as f013,
	'' as f018,
	'' as f019,
	'' as f022,
	'' as f025,
	'' as f032,
	'' as f033,
	fee.rrn as f037,
	'' as f038,
	'00' as f039,
	fee.tid as f041,
	'' as f042,
	'' as f043,
	'AED' as f049,
	decode(fee.settle_flag ,'Y','AED','') as f050,
	'' as f051,
	'' as f054,
	'' as f060,
	'' as f090,
	'' as f100,
	'' as f106,
	'' as f120,
	'' as f121,
	to_char(fee.date_time, 'dd/mm/yyyy hh24:mi:ss'),
	to_char(fee.settle_date, 'dd/mm/yyyy hh24:mi:ss') as settle_date,
	'' as ticket_id,
	round(current_balance,2) as current_balance,
	round(previous_balance,2) as previous_balance,
	round(hold_balance,2) as hold_balance,
	fee.rrn as unique_txn_id
from
	cs_fee_temp fee
join card_detail cd on
	fee.card_number = cd.hash_card_number
WHERE 
 fee.date_time >= (NOW() - INTERVAL '15 minutes')
--TRUNC(fee.date_time) between trunc(v_date) and trunc(sysdate)
;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE proc_verify_otp(p_hash_card_no character varying, p_otp character varying, p_action_name character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
v_otp             VARCHAR2(100);
    v_count           NUMBER;
    v_expired_count   NUMBER;
    v_active_count    NUMBER;
    ----------------------------------------------------
    invalid_otp EXCEPTION; --newly added
    v_mob_no          cms_otp_details.mobile_number%TYPE;
    -----------------------------------------------------
	pragma autonomous_transaction;
BEGIN
/*
    UPDATE cms_otp_details
        SET
            status = 'D'
    WHERE
            status = 'A'
        AND
            otp_expiry_time < SYSDATE;
*/
---------------------------------
-- Newly Added
-- Action Name:
----------------------------------
    BEGIN
        SELECT DISTINCT
            mobile_number
        INTO v_mob_no
        FROM
            cms_otp_details
        WHERE
            hash_card_number = p_hash_card_no
            AND status = 'A'
            AND action_name = p_action_name
            AND otp_expiry_time > sysdate;

    EXCEPTION
        WHEN OTHERS THEN
            v_mob_no := NULL;
    END;
-----------------------------------

    SELECT
        COUNT(*)
    INTO v_count
    FROM
        cms_otp_details
    WHERE
        hash_card_number = p_hash_card_no
        AND status = 'A'
        AND action_name = p_action_name
        AND otp_expiry_time > sysdate;

    dbms_output.put_line('Active count :' || v_count);
    IF v_count > 0 THEN
        SELECT
            otp
        INTO v_otp
        FROM
            (
                SELECT
                    *
                FROM
                    cms_otp_details
                WHERE
                    hash_card_number = p_hash_card_no
                    AND status = 'A'
                    AND action_name = p_action_name
                    AND otp_expiry_time > sysdate
                ORDER BY
                    otp_generated_time DESC
            )
        WHERE
            ROWNUM = 1;

        dbms_output.put_line('Active count :' || v_active_count);
        IF v_otp = p_otp THEN
            p_out := 'SUCCESS';
            UPDATE cms_otp_details
            SET
                status = 'D'
            WHERE
                hash_card_number = p_hash_card_no
                AND status = 'A'
                AND otp = p_otp
                AND action_name = p_action_name;

        ELSE
            p_out := 'FAILURE';
            RAISE invalid_otp;  -- newly added
        END IF;

    ELSE
        --p_out := 'FAILURE';
		p_out := 'EXPIRED';
        RAISE invalid_otp;  -- newly added
    END IF;

EXCEPTION
    WHEN invalid_otp THEN
        INSERT INTO cms_invalid_otp_details (
            id,
            mobile_number,
            service_name,
            invalid_otp,
            sys_txn_date
        ) VALUES (
            invalid_otp_seq.NEXTVAL,
            v_mob_no,
            p_action_name,
            p_otp,
            sysdate
        );

       -- COMMIT;
    WHEN OTHERS THEN
        p_out := 'FAILURE';
        RAISE;
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE replace_card(p_card_ref_number character varying, p_cust_seq_id character varying, p_cust_ref_no character varying, p_email_id character varying, p_embossname character varying, p_updated_by numeric, p_customer_name character varying, p_online_bal numeric, p_offline_bal_on_host numeric, p_chip_offline_bal numeric, p_mobile_no numeric, p_kyc_type character varying, p_prep_account_number character varying, p_outlet_id character varying, p_fee_amount numeric, p_old_card_no character varying, p_action_type character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
v_card_cnt            NUMBER;
    v_event_cnt           NUMBER;
    v_issuer_id           card_detail.issuer_id%TYPE;
    v_product_id          card_detail.product_id%TYPE;
    v_status              card_detail.status%TYPE;
    v_card_activated_on   card_detail.card_activated_on%TYPE;
    invalid_card EXCEPTION;
BEGIN
    SELECT
        COUNT(1)
    INTO v_card_cnt
    FROM
        card_detail
    WHERE
        card_ref_number = p_card_ref_number;

    IF
        v_card_cnt = 0
    THEN
        RAISE invalid_card;
    END IF;

    SELECT
        issuer_id,
        product_id
    INTO
        v_issuer_id,
        v_product_id
    FROM
        card_detail
    WHERE
        card_ref_number = p_card_ref_number;

    SELECT
        COUNT(1)
    INTO v_event_cnt
    FROM
        cms_event_actions
    WHERE
        event_id = 5
        AND action_id = 1
        AND issuer_id = v_issuer_id
        AND product_id = v_product_id;

    IF
        v_event_cnt = 1
    THEN
        v_status := 'A';
        v_card_activated_on := SYSDATE;
    ELSE
        v_status := 'INA';
        v_card_activated_on := NULL;
    END IF;

    UPDATE card_detail
    SET
        cust_seq_id = p_cust_seq_id,
        cust_ref_no = p_cust_ref_no,
        email_id = p_email_id,
        embossname = p_embossname,
        updated_by = p_updated_by,
        updated_date = SYSDATE,
        customer_name = p_customer_name,
        online_bal = p_online_bal,
        offline_bal_on_host = p_offline_bal_on_host,
        chip_offline_bal = p_chip_offline_bal,
        mobile_no = p_mobile_no,
        kyc_type = p_kyc_type,
        prep_account_number = p_prep_account_number,
        status = v_status,
        card_activated_on = v_card_activated_on,
        outlet_id = p_outlet_id,
        fee_amount = p_fee_amount,
        old_card_no = p_old_card_no,
        initial_load_done = 'Y' --,
--        REPLACEMENT_FLAG= case when p_action_type = 'REPLACEMENT' then 'Y'
--                                when p_action_type = 'RENEWAL' then 'N' end,
--        RENEWAL_FLAG=case when p_action_type = 'REPLACEMENT' then 'N'
--                          when p_action_type = 'RENEWAL' then 'Y'  end
    WHERE
        card_ref_number = p_card_ref_number;

       update   card_detail
       set REPLACEMENT_FLAG = case when p_action_type = 'REPLACEMENT' then 'Y'
                                    when p_action_type = 'RENEWAL' then 'N' end
       where hash_card_number = p_old_card_no;  

    p_out := 'SUCCESS';
EXCEPTION
    WHEN invalid_card THEN
        p_out := 'Invalid Card';
    WHEN OTHERS THEN
        p_out := 'Error';
        RAISE;
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE rollback_identification(OUT p_response character varying)
 SECURITY DEFINER
AS $procedure$

        v_file_name           VARCHAR2(100);
        v_process_id          VARCHAR2(100);
        v_process_complete    VARCHAR2(30);
        v_rollback_complete   VARCHAR2(30);
        v_end_date_time       VARCHAR2(25);
        c_val                 NUMBER;
        v_count               NUMBER;
        p_file_name           VARCHAR2(100);
        p_process_id          VARCHAR2(100);
        p_file_response       VARCHAR2(100);
        v_cnt                 NUMBER;
        v_start_date          VARCHAR2(100);
        v_end_date            VARCHAR2(100);
		
    v_complete_status character varying(25);
    v_err_msg character varying(500);
    BEGIN
        v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
        SELECT
            COUNT(*)
        INTO v_cnt
        FROM
            cs_filerollback
        WHERE
            nvl(upper(process_complete),'NO') != 'YES'
            AND nvl(upper(rollback_complete),'NO') != 'YES'
--            AND process_id NOT LIKE 'TLF%'
       -- ORDER BY end_date_time
		;

        IF
            v_cnt > 0
        THEN
            FOR cur_rec IN (
                SELECT
                    file_name,
                    process_id,
                    process_complete,
                    rollback_complete,
                    end_date_time,
                    user_id
                FROM
                    cs_filerollback
                WHERE
                    nvl(upper(process_complete),'NO') != 'YES'
                    AND nvl(upper(rollback_complete),'NO') != 'YES'
--                    AND process_id NOT LIKE 'TLF%'
                ORDER BY
                    end_date_time
            ) LOOP
               
        dbms_output.put_line('v_PROCESS_COMPLETE'||v_process_complete);
        dbms_output.put_line('v_ROLLBACK_COMPLETE'||v_rollback_complete);
        dbms_output.put_line('v_process_id'||v_process_id);
        p_file_name  :=cur_rec.file_name;
        p_process_id :=cur_rec.process_id;
        p_response   :='01';
        dbms_output.put_line('p_response:='||p_response);
        dbms_output.put_line('p_process_id:='||p_process_id);
        settlement_rollback_procedure(p_file_name ,p_process_id , p_file_response) ;
        dbms_output.put_line('p_file_name:='||p_file_name||' p_file_response'||p_file_response);
        dbms_output.put_line('SETTLEMENT_ROLLBACK_PROCEDURE called successfully');
        p_response:=p_file_response;

            END LOOP;
        ELSE
            p_response := '00';
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            v_err_msg := 'Error Occurred Msg :'
                         || sqlerrm
                         || ' Code :'
                         || sqlcode;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            p_cs_processlogmaster(p_process_id,'ERROR IN ROLLBACK_IDENTIFICATION  ',v_err_msg,v_start_date,v_end_date,'NO',NULL,'6.34',null);

            p_response := '03'
                               || ','
                               || 'ERROR Occured During ROLLBACK_IDENTIFICATION please contact system administrator';
END rollback_identification$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE rupay_bin_settlement(p_file_name character varying, p_user_id character varying, OUT p_file_response character varying)
 SECURITY DEFINER
AS $procedure$

        v_file_type           VARCHAR2(100) := NULL;
        v_file_description    VARCHAR2(100) := NULL;
        v_file_code           VARCHAR2(100) := NULL;
        v_netwk               VARCHAR2(100) := NULL;
        v_file_cnt            VARCHAR2(100) := NULL;
        v_start_date          VARCHAR2(100) := NULL;
        v_end_date            VARCHAR2(100) := NULL;
        v_activity_log        VARCHAR2(100) := NULL;
        v_process_id          VARCHAR2(100) := NULL;
        v_scheme_code         VARCHAR2(100) := NULL;
        v_participant_id      VARCHAR2(100) := NULL;
        v_txn_cnt             VARCHAR2(100) := NULL;
        v_txn_amt             VARCHAR2(100) := NULL;
        v_pid                 VARCHAR2(100) := NULL;
        v_file_date           VARCHAR2(100) := NULL;
        v_user_id             VARCHAR2(100) := NULL;
        v_file_desc           VARCHAR2(100) := NULL;
        v_file_name           VARCHAR2(100) := NULL;
        v_cnt                 NUMBER;
        v_process_complete    VARCHAR2(100) := NULL;
        v_process_reverse     VARCHAR2(100) := NULL;
        v_rollback_complete   VARCHAR2(100) := NULL;
        v_cnt_schm            NUMBER;
        v_cnt_pid             NUMBER;
        
          v_file_gen_date       VARCHAR2(6) := NULL;
        v_file_seq            NUMBER;
        v_seq_flag            VARCHAR2(4) := NULL;
        v_alert_msg           VARCHAR2(100);
        v_roll_count          NUMBER;
        v_rupay_filename      VARCHAR2(21);
        processid_update_fail EXCEPTION;
        invalid_parameter EXCEPTION;
        file_updation EXCEPTION;
		v_complete_status  varchar2(10):=null;
		v_err_msg  varchar2(100);
    --v_scheme_code                          NVARCHAR2(3);
    --v_participant_id                      varchar2(100) := NULL;
    --v_pid                                VARCHAR2(100);
    BEGIN
    
    
        IF p_file_name IS NULL OR p_user_id IS NULL THEN
            RAISE invalid_parameter;
        END IF;
        SELECT
            file_type,
            file_code,
            file_name_description,
            network,
            file_seq,
            seq_flag
        INTO
            v_file_type,
            v_file_code,
            v_file_description,
            v_netwk,
            v_file_seq,
            v_seq_flag
        FROM
            cs_config_filenamemaster
        WHERE
            file_code = substr(p_file_name,1,2);

        dbms_output.put_line('file_code:='
                               || v_file_code
                               || 'File_Type:='
                               || v_file_type);
        IF
            v_file_type = 'BIN'
        THEN
            SELECT
                COUNT(file_name)
            INTO v_file_cnt
            FROM
                cs_filemaster
            WHERE
                file_name = p_file_name;

            dbms_output.put_line(v_file_cnt);
            IF
                v_file_cnt > 0
            THEN
                dbms_output.put_line('File is already process in system');
            ELSE
                dbms_output.put_line('File processing is started');
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    'RBF.'
                    || TO_CHAR(SYSDATE,'DDMMYY')
                    || '.'
                    || lpad(incoming_file_seq.NEXTVAL,5,'0')
                INTO v_process_id
                FROM
                    dual;

                UPDATE cs_rupay_bin
                SET
                    process_id = v_process_id
                WHERE
                    file_name = p_file_name;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                      RAISE processid_update_fail;
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Creation and application of process ID';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.3',p_file_name);

                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    process_complete,
                    process_reverse,
                    rollback_complete,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_process_complete,
                    v_process_reverse,
                    v_rollback_complete,
                    v_start_date,
                    v_end_date,
                    p_user_id,
                    '3'
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion into cs_filerollback table';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.3',p_file_name);

                INSERT INTO cs_rupay_bin_history
                    SELECT
                        *
                    FROM
                        cs_rupay_bin
                    WHERE
                        nvl(identifier,'N/A') NOT IN (
                            'HDR',
                            'TRL'
                        );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion into cs_rupay_bin_history table';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.3',p_file_name);

                INSERT INTO cs_rupay_pid (
                    scheme_code,
                    pid,
                    process_id,
                    file_name,
                    entry_date
                )
                    SELECT
                        a.scheme_code,
                        a.participant_id,
                        v_process_id,
                        p_file_name,
                        TO_CHAR(SYSDATE,'DDMMYYYY')
                    FROM
                        cs_rupay_bin a,
                        cs_config_rupay_networkinfo b
                    WHERE
                        a.scheme_code = b.scheme_code
                        AND NOT EXISTS (
                            SELECT
                                c.pid
                            FROM
                                cs_rupay_pid c
                            WHERE
                                a.participant_id = c.pid
                        );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

        --------------------pid end;------------

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion of PID value';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.5',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                
                
                SELECT
                    file_gen_date
                INTO v_file_gen_date
                FROM
                    cs_rupay_bin
                WHERE
                    process_id = v_process_id
                    AND identifier = 'HDR';
                
                INSERT INTO cs_hdrtrl (
                    de024,
                    ide001,
                    ide005,
                    process_date,
                    process_id,
                    pds0306,
                    id,
                    ide003,
                    file_name
                )
                    SELECT
                            CASE
                                WHEN nvl(identifier,'N/A') = 'HDR' THEN 670
                                WHEN nvl(identifier,'N/A') = 'TRL' THEN 671
                            END,
                            file_gen_date,
                            version_number,
                            process_date,
                            process_id,
                            record_count,
                            id,
                            file_name,
                            file_name
                    FROM
                        cs_rupay_bin
                    WHERE
                        nvl(identifier,'N/A') IN (
                            'HDR',
                            'TRL'
                        );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Header and Trailer record movement';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.6',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    COUNT(*)
                INTO v_txn_cnt
                FROM
                    cs_rupay_bin
                WHERE
                    process_id = v_process_id
                    AND nvl(identifier,'N/A') NOT IN (
                        'HDR',
                        'TRL'
                    );

               INSERT INTO cs_filemaster (
                    process_id,
                    file_name,
                    file_description,
                    process_date,
                    process_time,
                    transaction_count,
                    transaction_amount,
                    user_id,
                    network,
                    file_priority,
                    file_date
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_file_description,
                    SYSDATE,
                    TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    v_txn_cnt,
                    v_txn_amt,
                    p_user_id,
                    v_netwk,
                    CASE
                        WHEN v_seq_flag = 'Y' THEN v_file_seq
                    END,
                    v_file_gen_date
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Completion entry into CS_FILEMASTER table';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.7',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                p_file_response :='05, '||p_file_name
                                   || ' '
                                   || v_file_description
                                   || ' is processed successfully';
                UPDATE cs_filerollback
                SET
                    process_complete = 'YES'
                WHERE
                    process_id = v_process_id;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Process completion update into cs_filerollback table';
                p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'3.9',p_file_name);

            END IF;

        END IF;

    EXCEPTION
    
    WHEN invalid_parameter THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Parameter Check';
            p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,
            v_end_date,'NO',p_user_id,'3.11',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN file_updation THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File updation into cs_rupay_in';
            p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,
            v_end_date,'NO',p_user_id,'3.12',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN processid_update_fail THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Creation and application of process ID';
            p_cs_processlogmaster(v_process_id,'Bin Management File processing',v_activity_log,v_start_date,
            v_end_date,'NO',p_user_id,'3.13',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
            
        WHEN OTHERS THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_err_msg := 'Error Occurred Msg :'
                         || sqlerrm
                         || ' code :'
                         || sqlcode                         
                        ;

            p_cs_processlogmaster(v_process_id,'ERROR IN rupay_bin_settlement  ',v_err_msg,v_start_date,v_end_date,'NO',
NULL,'6.34',p_file_name);

            SELECT
                COUNT(1)
            INTO v_roll_count
            FROM
                cs_filerollback
            WHERE
                process_id = v_process_id;

            IF v_roll_count > 0 THEN
                NULL;
            ELSE
                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    p_user_id,
                    '3'
                );

            END IF;

            settlement_rollback_procedure(p_file_name,v_process_id,p_file_response);
            
            
            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
            EXECUTE IMMEDIATE 'truncate table cs_rupay_bin';
            
    END rupay_bin_settlement$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE rupay_raw_settlement(p_file_name character varying, p_user_id character varying, OUT p_file_response character varying)
 SECURITY DEFINER
AS $procedure$

        v_file_type           VARCHAR2(100) := NULL;
        v_file_description    VARCHAR2(100) := NULL;
        v_file_code           VARCHAR2(100) := NULL;
        v_netwk               VARCHAR2(100) := NULL;
        v_file_cnt            VARCHAR2(100) := NULL;
        v_start_date          VARCHAR2(100) := NULL;
        v_end_date            VARCHAR2(100) := NULL;
        v_activity_log        VARCHAR2(100) := NULL;
        v_process_id          VARCHAR2(100) := NULL;
        v_scheme_code         VARCHAR2(100) := NULL;
        v_participant_id      VARCHAR2(100) := NULL;
        v_txn_cnt             VARCHAR2(100) := NULL;
        v_txn_amt             VARCHAR2(100) := NULL;
        v_pid                 VARCHAR2(100) := NULL;
        v_file_date           VARCHAR2(100) := NULL;
        v_user_id             VARCHAR2(100) := NULL;
        v_file_desc           VARCHAR2(100) := NULL;
        v_file_name           VARCHAR2(100) := NULL;
        v_resp_code_flag      VARCHAR2(100) := NULL;
        v_process_complete    VARCHAR2(100) := NULL;
        v_process_reverse     VARCHAR2(100) := NULL;
        v_rollback_complete   VARCHAR2(100) := NULL;
        
        v_file_gen_date       VARCHAR2(6) := NULL;
        v_file_seq            NUMBER;
        v_seq_flag            VARCHAR2(4) := NULL;
        v_alert_msg           VARCHAR2(1000);
        v_roll_count          NUMBER;
        v_rupay_filename      VARCHAR2(21);
        processid_update_fail EXCEPTION;
        invalid_parameter EXCEPTION;
        file_updation EXCEPTION;
        v_complete_status   varchar2(10) := null;
		v_err_msg  varchar2(100);
        
        p_out varchar2(2000);
        l_temp_count  number;
        
    BEGIN
        IF p_file_name IS NULL OR p_user_id IS NULL THEN
            RAISE invalid_parameter;
        END IF;
        SELECT
            file_type,
            file_code,
            file_name_description,
            network,
            file_seq,
            seq_flag
        INTO
            v_file_type,
            v_file_code,
            v_file_description,
            v_netwk,
            v_file_seq,
            v_seq_flag
        FROM
            cs_config_filenamemaster
        WHERE
            file_code = substr(p_file_name,1,2);

        dbms_output.put_line('file_code:='
                               || v_file_code
                               || 'File_Type:='
                               || v_file_type);
        IF
            v_file_type = 'RAW'
        THEN
            SELECT
                COUNT(file_name)
            INTO v_file_cnt
            FROM
                cs_filemaster
            WHERE
                file_name = p_file_name;

            dbms_output.put_line(v_file_cnt);
            IF
                v_file_cnt > 0
            THEN
                dbms_output.put_line('File is already process in system');
            ELSE
                dbms_output.put_line('File processing is started');
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    'RRF.'
                    || TO_CHAR(SYSDATE,'DDMMYY')
                    || '.'
                    || lpad(incoming_file_seq.NEXTVAL,5,'0')
                INTO v_process_id
                FROM
                    dual;

                UPDATE cs_rupay_netswitchtemp
                SET
                    process_id = v_process_id --PROCESS_DATE = (SELECT SYSDATE FROM DUAL), process_id=v_process_id
                WHERE
                    file_name = p_file_name;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                    RAISE processid_update_fail;
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Creation and application of process ID';
                p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'6.3',p_file_name);

                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    process_complete,
                    process_reverse,
                    rollback_complete,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_process_complete,
                    v_process_reverse,
                    v_rollback_complete,
                    v_start_date,
                    v_end_date,
                    p_user_id,
                    '6'
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion of file details into CS_FILEROLLBACK table';
  p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'6.3',p_file_name);

                SELECT
                    resp_code_flag
                INTO v_resp_code_flag
                FROM
                    cs_rupay_netswitchtemp
                WHERE
                    ROWNUM < 2;

                dbms_output.put_line(v_resp_code_flag);
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Data splitting';
                INSERT INTO cs_rupay_netswitchd 
                    SELECT
                        *
                    FROM
                        cs_rupay_netswitchtemp b
                    WHERE
                        b.resp_code_flag = 'D';
                        
               SELECT
                        count(1)
                        into
                        l_temp_count
                    FROM
                        cs_rupay_netswitchtemp b
                    WHERE
                        b.resp_code_flag = 'D'
                        and b.process_id is not null;    
                        
    dbms_output.put_line('l_temp_count :'||l_temp_count);
	dbms_output.put_line('v_process_id :'||v_process_id);
	dbms_output.put_line('p_file_name :'||p_file_name);
	
-- p_cs_processlogmaster(v_process_id,'RuPay raw data file switch before count',l_temp_count,v_start_date,v_end_date,v_complete_status,p_user_id,'6.3',p_file_name);            

                  
    p_cs_processlogmaster(v_process_id,'RuPay raw data file switch before count',l_temp_count::text,v_start_date,v_end_date,v_complete_status,p_user_id,'6.3',p_file_name);            

      dbms_output.put_line('before decline:'||l_temp_count);
            --declined reversal code added
                  -- if sql%rowcount> 0 then
                  IF l_temp_count > 0 then

                  sp_OFFLINE_DECLINE_REVERSAL(
                    P_PROCESS_ID => v_process_id,
                    P_USER_ID => p_user_id,
                    P_OUT => P_OUT
                  );
                  
                  
                  end if;                 

                dbms_output.put_line('inserted into CS_RUPAY_ NETSWITCHD successfully');
                INSERT INTO cs_rupay_netswitcha 
                    SELECT
                        *
                    FROM
                        cs_rupay_netswitchtemp b
                    WHERE
                        b.resp_code_flag = 'A';

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Data splitting';
                p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'6.3',p_file_name);

             SELECT
                    substr(ide001,1,6)
                INTO v_file_gen_date
                FROM
                    cs_rupay_netswitchtemp
                WHERE
                    process_id = v_process_id
                    AND txn_code = 'HDR';
   
                INSERT INTO cs_hdrtrl (
                    process_date,
                    file_name,
                    process_id,
                    id,
                    pds0159_sett_date,
                    de024,
                    ide001,
                    ide003,
                    de094,
                    pds0122,
                    ide005,
                    pds0306,
                    pds0301
                )
                    SELECT
                        cast(process_date as timestamp),
                        file_name,
                        process_id,
                        id,
                        pds0159_sett_date,
                        CASE
                                WHEN nvl(txn_code,'N/A') = 'HDR' THEN 670
                                WHEN nvl(txn_code,'N/A') = 'TRL' THEN 671
                            END,
                        ide001,
                        file_name,
                        de094,
                        pds0122,
                        ide005,
                        pds0306,
                        pds0301
                    FROM
                        cs_rupay_netswitchtemp
                    WHERE
                        nvl(txn_code,'N/A') IN (
                            'HDR',
                            'TRL'
                        );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                dbms_output.put_line('inserted into CS_RUPAY_NETSWITCHA successfully');
                p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'6.4',p_file_name);

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Header and Trailer record movement';
                p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,'YES'
,p_user_id,'6.5',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    COUNT(*)
                INTO v_txn_cnt
                FROM
                    cs_rupay_netswitchtemp
                WHERE
                    process_id = v_process_id
                    AND nvl(txn_code,'N/A') NOT IN (
                        'HDR',
                        'TRL'
                    );

                SELECT
                    SUM(de004)
                INTO v_txn_amt
                FROM
                    cs_rupay_netswitchtemp
                WHERE
                    process_id = v_process_id
                    AND nvl(txn_code,'N/A') NOT IN (
                        'HDR',
                        'TRL'
                    );

                INSERT INTO cs_filemaster (
                    process_id,
                    file_name,
                    file_description,
                    process_date,
                    process_time,
                    transaction_count,
                    transaction_amount,
                    user_id,
                    network,
                    file_priority,
                    file_date
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_file_description,
                    SYSDATE,
                    TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    v_txn_cnt,
                    v_txn_amt,
                    p_user_id,
                    v_netwk,
                    CASE
                        WHEN v_seq_flag = 'Y' THEN v_file_seq
                    END,
                    v_file_gen_date
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Completion entry into CS_FILEMASTER table';
                p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'6.6',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                p_file_response := '05, '||p_file_name
                                   || ' '
                                   || v_file_description
                                   || ' is processed successfully';
                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'File process completion message';
                p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,v_end_date,'YES'
,p_user_id,'6.7',p_file_name);

                UPDATE cs_filerollback
                SET
                    process_complete = 'YES'
                WHERE
                    process_id = v_process_id;

            END IF;

        END IF;

    EXCEPTION

   WHEN invalid_parameter THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Parameter Check';
            p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,
            v_end_date,'NO',p_user_id,'6.9',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN file_updation THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File updation into cs_rupay_intemp';
            p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,
            v_end_date,'NO',p_user_id,'6.10',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN processid_update_fail THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Creation and application of process ID';
            p_cs_processlogmaster(v_process_id,'RuPay raw data file processing',v_activity_log,v_start_date,
            v_end_date,'NO',p_user_id,'6.11',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN OTHERS THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_err_msg := 'Error Occurred Msg :'
                         || sqlerrm
                         || ' code :'
                         || sqlcode;

            p_cs_processlogmaster(v_process_id,'ERROR IN rupay_raw_settlement  ',v_err_msg,v_start_date,v_end_date

           ,'NO',NULL,'6.34',p_file_name);

            SELECT
                COUNT(1)
            INTO v_roll_count
            FROM
                cs_filerollback
            WHERE
                process_id = v_process_id;

            IF v_roll_count > 0 THEN
                NULL;
            ELSE
                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    p_user_id,
                    '6'
                );

            END IF;

            settlement_rollback_procedure(p_file_name,v_process_id,p_file_response);
            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
            EXECUTE IMMEDIATE 'truncate table cs_rupay_netswitchtemp';
    END rupay_raw_settlement$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE rupay_setauth_settle(p_file_name character varying, p_user_id character varying, OUT p_file_response character varying)
 SECURITY DEFINER
AS $procedure$

        v_file_type             VARCHAR2(100) := NULL;
        v_file_description      VARCHAR2(100) := NULL;
        v_file_code             VARCHAR2(100) := NULL;
        v_netwk                 VARCHAR2(100) := NULL;
        v_file_cnt              VARCHAR2(100) := NULL;
        v_start_date            VARCHAR2(100) := NULL;
        v_end_date              VARCHAR2(100) := NULL;
        v_activity_log          VARCHAR2(100) := NULL;
        v_process_id            VARCHAR2(100) := NULL;
        v_scheme_code           VARCHAR2(100) := NULL;
        v_participant_id        VARCHAR2(100) := NULL;
        v_txn_cnt               VARCHAR2(100) := NULL;
        v_txn_amt               VARCHAR2(100) := NULL;
        v_pid                   VARCHAR2(100) := NULL;
        v_file_date             VARCHAR2(100) := NULL;
        v_user_id               VARCHAR2(100) := NULL;
        v_file_desc             VARCHAR2(100) := NULL;
        v_file_name             VARCHAR2(100) := NULL;
        v_resp_code_flag        VARCHAR2(100) := NULL;
        v_process_complete      VARCHAR2(100) := NULL;
        v_process_reverse       VARCHAR2(100) := NULL;
        v_rollback_complete     VARCHAR2(100) := NULL;
        v_recon_cnt             NUMBER;
        v_pds0146_fee_type_2    VARCHAR2(100) := NULL;
        v_pds0146_fee_amt_2     VARCHAR2(100) := NULL;
        v_pds0146_drcr_2        VARCHAR2(100) := NULL;
        v_pds0146_curr_code_2   VARCHAR2(100) := NULL;
        v_pds0159_sett_date     VARCHAR2(100) := NULL;
        
         v_file_gen_date         VARCHAR2(6) := NULL;
        v_file_seq              NUMBER;
        v_seq_flag              VARCHAR2(4) := NULL;
        v_alert_msg             VARCHAR2(100);
        v_roll_count            NUMBER;
        v_rupay_filename        VARCHAR2(21);
        processid_update_fail EXCEPTION;
        invalid_parameter EXCEPTION;
        file_updation EXCEPTION;
        v_complete_status   varchar2(10) := null;
		v_err_msg  varchar2(100);
        
        TYPE v_recon_id IS
            TABLE OF VARCHAR2(1000);
        c_data_1                v_recon_id := v_recon_id ();
    BEGIN
       IF p_file_name IS NULL OR p_user_id IS NULL THEN
            RAISE invalid_parameter;
        END IF;
        SELECT
            file_type,
            file_code,
            file_name_description,
            network,
            file_seq,
            seq_flag
        INTO
            v_file_type,
            v_file_code,
            v_file_description,
            v_netwk,
            v_file_seq,
            v_seq_flag
        FROM
            cs_config_filenamemaster
        WHERE
            file_code = substr(p_file_name,1,2);

        dbms_output.put_line('file_code:='
                               || v_file_code
                               || 'File_Type:='
                               || v_file_type);
        IF
            v_file_type = 'SETAUTH'
        THEN
            SELECT
                COUNT(file_name)
            INTO v_file_cnt
            FROM
                cs_filemaster
            WHERE
                file_name = p_file_name;

            dbms_output.put_line(v_file_cnt);
            IF
                v_file_cnt > 0
            THEN
                dbms_output.put_line('File is already process in system');
            ELSE
                dbms_output.put_line('File processing is started');
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    'RIC.'
                    || TO_CHAR(SYSDATE,'DDMMYY')
                    || '.'
                    || lpad(incoming_file_seq.NEXTVAL,5,'0')
                INTO v_process_id
                FROM
                    dual;
                    
                    
                 BEGIN
                    SELECT
                        ide003
                    INTO v_rupay_filename
                    FROM
                        cs_rupay_intemp
                    WHERE
                        de024 = 670
                        AND mti = 1644;

                EXCEPTION
                    WHEN OTHERS THEN
                        v_rupay_filename := NULL;
                        RAISE file_updation;
                END;

                UPDATE cs_rupay_intemp
                SET
                    ide003 = v_rupay_filename;    

                UPDATE cs_rupay_intemp
                SET
                    process_id = v_process_id --PROCESS_DATE = (SELECT SYSDATE FROM DUAL), process_id=v_process_id
                WHERE
                    ide003 = p_file_name;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                    RAISE processid_update_fail;
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Creation and application of process ID';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'6.1',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    process_complete,
                    process_reverse,
                    rollback_complete,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_process_complete,
                    v_process_reverse,
                    v_rollback_complete,
                    v_start_date,
                    v_end_date,
                    p_user_id,
                    '6.2'
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion of file details into CS_FILEROLLBACK table';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'6.2',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                
                 SELECT
                    pds0159_sett_date
                INTO v_file_gen_date
                FROM
                    cs_rupay_intemp
                WHERE
                    process_id = v_process_id
                    AND de024 = '670';
                
                INSERT INTO cs_rupay_network_fee
                    SELECT
                        *
                    FROM
                        cs_rupay_intemp
                    WHERE
                        nvl(de024,0) NOT IN (
                            670,
                            671
                        );
      ----*********************recon merge query ----------------
      /*   merge into CS_RUPAY_NETSWITCHA b
      USING cs_rupay_intemp a
      ON (  a.DE002=b.DE002 and
      a.DE038=b.DE038 and
      a.DE041=b.DE041 and
      a.DE037=b.DE037 and
      substr(a.DE012,1,6)=substr(actual_DE013,2,7) and
      substr(a.DE012,7,12)=b.Actual_DE012   and
      a.DE024='100')
      WHEN MATCHED THEN
      update
      set
      b.PDS0146_FEE_TYPE_2=a.PDS0146_FEE_TYPE_2,
      b.PDS0146_FEE_AMT_2=a.PDS0146_FEE_AMT_2,
      b.PDS0146_DRCR_2=a.PDS0146_DRCR_2,
      b.PDS0146_CURR_CODE_2=a.PDS0146_CURR_CODE_2,
      b.PDS0159_SETT_DATE=a.PDS0159_SETT_DATE; */

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion of fee records into CS_RUPAY_NETWORK_FEE table';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'6.3',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
--                 MERGE INTO cs_rupay_netswitcha b USING cs_rupay_intemp a ON (
--                     a.de002 = b.de002
--                     AND a.de038 = b.de038
--                     AND a.de041 = b.de041
--                     AND a.de037 = b.de037
--                     AND substr(a.de012,1,6) = substr(actual_de013,2,7)
--                     AND substr(a.de012,7,12) = b.actual_de012
--                     AND a.de024 = '100'
--                 )
--                 WHEN MATCHED THEN UPDATE SET b.mti =
--                     CASE
--                         WHEN bin_msg_type = '01' THEN '1240'
--                         WHEN bin_msg_type = '02' THEN '0200'
--                     END,
--                 b.de024 = '200',
--                 b.in_process_id = a.process_id,
--                 b.pds0146_fee_type_2 = a.pds0146_fee_type_2,
--                 b.pds0146_fee_amt_2 = a.pds0146_fee_amt_2,
--                 b.pds0146_drcr_2 = a.pds0146_drcr_2,
--                 b.pds0146_curr_code_2 = a.pds0146_curr_code_2,
--                                              b.pds0159_sett_date = a.pds0159_sett_date;

UPDATE cs_rupay_netswitcha b
SET 
b.mti =CASE WHEN b.bin_msg_type = '01' THEN '1240'
            WHEN b.bin_msg_type = '02' THEN '0200'  END,
b.de024 = '200',
b.in_process_id = a.process_id,
b.pds0146_fee_type_2 = a.pds0146_fee_type_2,
b.pds0146_fee_amt_2 = a.pds0146_fee_amt_2,
b.pds0146_drcr_2 = a.pds0146_drcr_2,
b.pds0146_curr_code_2 = a.pds0146_curr_code_2,
b.pds0159_sett_date = a.pds0159_sett_date
FROM cs_rupay_intemp a
WHERE 
a.de002 = b.de002
AND a.de038 = b.de038
AND a.de041 = b.de041
AND a.de037 = b.de037
AND substr(a.de012,1,6) = substr(actual_de013,2,7)
AND substr(a.de012,7,12) = b.actual_de012
AND a.de024 = '100';


                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'updated details into CS_RUPAY_NETSWITCHA table ';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'6.4',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                INSERT INTO cs_hdrtrl
                    ( SELECT
                        a.*
                      FROM
                        cs_rupay_intemp a,
                        cs_config_rupay_xmltag b
                      WHERE
                        a.mti = b.mti
                        AND a.de024 = b.function_code
                        AND (
                            b.txn_code = 'HDR'
                            OR b.txn_code = 'TLR'
                        )
                    );
      /* in this line table b should be used not a -- Amruta */
    --  v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
      --*****************************end recon query**********************************

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Header and Trailer record movement';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'6.5',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    COUNT(*),
                    SUM(de004)
                INTO
                    v_txn_cnt,
                    v_txn_amt
                FROM
                    cs_rupay_network_fee
                WHERE
                    process_id = v_process_id
                    AND nvl(de024,0) NOT IN (
                        670,
                        671
                    );

                 INSERT INTO cs_filemaster (
                    process_id,
                    file_name,
                    file_description,
                    process_date,
                    process_time,
                    transaction_count,
                    transaction_amount,
                    user_id,
                    network,
                    file_priority,
                    file_date
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    v_file_description,
                    SYSDATE,
                    TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    v_txn_cnt,
                    v_txn_amt,
                    p_user_id,
                    v_netwk,
                    CASE
                        WHEN v_seq_flag = 'Y' THEN v_file_seq
                    END,
                    v_file_gen_date
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Completion entry into CS_FILEMASTER table';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,v_complete_status,p_user_id,'6.6',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                p_file_response := '05, '||p_file_name
                                   || ' '
                                   || v_file_description
                                   || ' is processed successfully';
                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'File process completion message';
                p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date,v_end_date
,'YES',p_user_id,'6.7',p_file_name);

                UPDATE cs_filerollback
                SET
                    process_complete = 'YES'
                WHERE
                    process_id = v_process_id;

            END IF;

        END IF;

    EXCEPTION
 
 WHEN invalid_parameter THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Parameter Check';
            p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date
           ,v_end_date,'NO',p_user_id,'6.9',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN file_updation THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File updation into cs_rupay_intemp';
            p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date
           ,v_end_date,'NO',p_user_id,'6.10',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN processid_update_fail THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Creation and application of process ID';
            p_cs_processlogmaster(v_process_id,'RuPay Setauth data file processing',v_activity_log,v_start_date
           ,v_end_date,'NO',p_user_id,'6.11',p_file_name);

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
        WHEN OTHERS THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_err_msg := 'Error Occurred Msg :'
                         || sqlerrm
                         || ' code :'
                         || sqlcode ;

            p_cs_processlogmaster(v_process_id,'ERROR IN rupay_raw_settlement  ',v_err_msg,v_start_date,v_end_date,'NO',
NULL,'6.34',p_file_name);

           SELECT
                COUNT(1)
            INTO v_roll_count
            FROM
                cs_filerollback
            WHERE
                process_id = v_process_id;

            IF v_roll_count > 0 THEN
                NULL;
            ELSE
                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES (
                    v_process_id,
                    p_file_name,
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
                    p_user_id,
                    '6'
                );

            END IF;
  -- dbms_output.put_line('11111');

            settlement_rollback_procedure(p_file_name,v_process_id,p_file_response);
            
            
            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
            EXECUTE IMMEDIATE 'truncate table cs_rupay_intemp';
            
    END rupay_setauth_settle$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE service_channel_outlet_exists(p_channel_id character varying, p_service_name character varying, p_outlet_id character varying, p_org_id character varying, p_tgtappid character varying, OUT p_out character varying, OUT p_session_expiry numeric)
 SECURITY DEFINER
AS $procedure$
v_count_channel    NUMBER;
    v_service_name     NUMBER;
    v_count            NUMBER;
    v_count_org_id     NUMBER;
    v_tgtappid         NUMBER;
    v_chann_status     VARCHAR2(10);
    v_service_status   VARCHAR2(10);
    v_count_outlet     NUMBER;
    v_outlet_status    VARCHAR2(10);
    v_ch_cnt           NUMBER;
    v_ch_isuerid       NUMBER;
    v_outlet_cnt       NUMBER;
    v_out_isuerid      NUMBER;
BEGIN

  --To check if channel_id exists in CMS_CHANNELS_MASTER table 
    SELECT
        COUNT(*)
    INTO v_count_channel
    FROM
        cms_channels_master
    WHERE
        channel_id = p_channel_id;

    IF
        v_count_channel = 0
    THEN
        p_out := 'Invalid Channel ID';
        p_session_expiry := 0;
        dbms_output.put_line('Invalid Channel ID');
        return;
    END IF;

  --To check if status is Active

    SELECT
        status
    INTO v_chann_status
    FROM
        cms_channels_master
    WHERE
        channel_id = p_channel_id;

    IF
        nvl(v_chann_status,'D') != 'A'
    THEN
        p_out := 'Channel is not active';
        p_session_expiry := 0;
        dbms_output.put_line('Channel is not active');
        return;
    END IF;

  --To check if service_name exists in CMS_WEB_SERVICE_MASTER table

    SELECT
        COUNT(*)
    INTO v_service_name
    FROM
        cms_web_service_master
    WHERE
        services_name = p_service_name;

    IF
        v_service_name = 0
    THEN
        p_out := 'Invalid Service Name';
        p_session_expiry := 0;
        dbms_output.put_line('Invalid Service Name');
        return;
    END IF;

  --To check if Service is Active

    SELECT
        service_status
    INTO v_service_status
    FROM
        cms_web_service_master
    WHERE
        services_name = p_service_name;

    IF
        nvl(v_service_status,'D') != 'A'
    THEN
        p_out := 'Channel has no access to this Service';
        p_session_expiry := 0;
        dbms_output.put_line('Channel has no access to this Service');
        return;
    END IF;
-- To check outlet channel exits

    SELECT
        COUNT(1)
    INTO v_count
    FROM
        cms_channel_outlet_link
    WHERE
        channel_id = (
            SELECT
                id
            FROM
                cms_channels_master
            WHERE
                channel_id = p_channel_id
        )
        AND outlet_id = p_outlet_id;

    IF
        v_count = 0
    THEN
        p_out := 'Channel and outlet does not map';
        p_session_expiry := 0;
        dbms_output.put_line('Channel and outlet does not map');
    END IF;

  --To check outlet channel belongs to same issuer

    SELECT
        COUNT(1)
    INTO v_count
    FROM
        cms_channels_master cm
        JOIN cms_channel_outlet_link col ON ( cm.id = col.channel_id )
        JOIN cms_outlet co ON ( col.outlet_id = co.outlet_id
                                AND cm.issuer_id = co.issuer_id )
    WHERE
        cm.channel_id = p_channel_id
        AND co.outlet_id = p_outlet_id;

    IF
        v_count = 0
    THEN
        p_out := 'Channel and outlet does not belong to same issuer';
        p_session_expiry := 0;
        dbms_output.put_line('Channel and outlet does not belong to same issuer');
        return;
    END IF;

  --To check if org_id exists in CMS_CHANNELS_MASTER table 

    SELECT
        COUNT(*)
    INTO v_count_org_id
    FROM
        cms_channels_master
    WHERE
        channel_id = p_channel_id
        AND org_id = p_org_id;

    IF
        v_count_org_id = 0
    THEN
        p_out := 'Invalid Organisation ID';
        p_session_expiry := 0;
        dbms_output.put_line('Invalid Organisation ID');
        return;
    END IF;

  --To check if TGTAPPID exists in CMS_WEB_SERVICE_MASTER table

    SELECT
        COUNT(*)
    INTO v_tgtappid
    FROM
        cms_web_service_master
    WHERE
        services_name = p_service_name
        AND tgtappid = p_tgtappid;

    IF
        v_tgtappid = 0
    THEN
        p_out := 'Invalid TGT App ID';
        p_session_expiry := 0;
        dbms_output.put_line('Invalid TGT App ID');
        return;
    END IF;

-- Added on 30th May,2018 by Karan- Start

  --To check if outlet_id exists in CMS_OUTLET table 

    SELECT
        COUNT(*)
    INTO v_count_outlet
    FROM
        cms_outlet
    WHERE
        outlet_id = p_outlet_id;

    IF
        v_count_outlet = 0
    THEN
        p_out := 'Invalid Outlet ID';
        p_session_expiry := 0;
        dbms_output.put_line('Invalid Outlet ID');
        return;
    END IF;

  --To check if Outlet status is Active

    SELECT
        status
    INTO v_outlet_status
    FROM
        cms_outlet
    WHERE
        outlet_id = p_outlet_id;

    IF
        nvl(v_outlet_status,'D') != 'A'
    THEN
        p_out := 'Outlet is not active';
        p_session_expiry := 0;
        dbms_output.put_line('Outlet is not active');
        return;
    END IF;

-- Added on 30th May,2018 by Karan- End

  --To check if there are any sessions for the given channel_id,user_id and outlet_id

    SELECT
        COUNT(*)
    INTO v_count
    FROM
        cms_channels_master cm,
        cms_web_service_master wsm,
        cms_channel_service_link csl,
        cms_outlet co,
        cms_outlet_service_link osl,
        cms_channel_outlet_link col
    WHERE
        cm.id = csl.channel_id
        AND wsm.service_id = csl.service_id
        AND osl.service_id = wsm.service_id
        AND col.channel_id = cm.id
        AND co.outlet_id = osl.outlet_id
        AND cm.channel_id = p_channel_id
        AND wsm.services_name = p_service_name
        AND co.outlet_id = p_outlet_id;

    IF
        v_count > 0
    THEN
        dbms_output.put_line('Success');
        p_out := 'SUCCESS';
        SELECT
            cm.session_expiry_time
        INTO p_session_expiry
        FROM
            cms_channels_master cm,
            cms_web_service_master wsm,
            cms_channel_service_link csl,
            cms_outlet co,
            cms_outlet_service_link osl,
            cms_channel_outlet_link col
        WHERE
            cm.id = csl.channel_id
            AND wsm.service_id = csl.service_id
            AND osl.service_id = wsm.service_id
            AND col.channel_id = cm.id
            AND co.outlet_id = osl.outlet_id
            AND cm.channel_id = p_channel_id
            AND services_name = p_service_name
            AND co.outlet_id = p_outlet_id;

    ELSE
        p_out := 'Service name is not available for mentioned channel id';
        p_session_expiry := 0;
        dbms_output.put_line('Service name is not available for mentioned channel id');
        return;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error '
                               || sqlcode
                               || ' '
                               || sqlerrm);
                               --|| dbms_utility.format_error_backtrace);
END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE service_exists(p_channel_id character varying, p_service_name character varying, p_org_id character varying, p_tgtappid character varying, p_outlet_id character varying, OUT p_out character varying, OUT p_session_expiry numeric)
 SECURITY DEFINER
AS $procedure$
  v_count_channel   NUMBER;
  v_service_name    NUMBER;
  v_count           NUMBER;
  v_count_org_id    NUMBER;
  v_tgtappid        NUMBER;
  v_channel_cnt     NUMBER;
  v_chann_status    VARCHAR2(10);
  v_service_status  VARCHAR2(10);

BEGIN

  --To check if channel_id exists in CMS_CHANNELS_MASTER table 
  SELECT COUNT(*)
  INTO v_count_channel
  FROM CMS_CHANNELS_MASTER WHERE CHANNEL_ID  = p_channel_id;

  IF v_count_channel=0 THEN
    p_out := 'Invalid Channel ID';
    dbms_output.put_line('Invalid Channel ID');
    RETURN;
  END IF;

  --To check if status is Active
  SELECT STATUS
  INTO v_chann_status
  FROM CMS_CHANNELS_MASTER
  WHERE CHANNEL_ID  = p_channel_id;

  IF NVL(v_chann_status,'D')!='A' THEN
    p_out := 'Channel is not active';
    dbms_output.put_line('Channel is not active');
    RETURN;
  END IF;

  --To check if service_name exists in CMS_WEB_SERVICE_MASTER table
  SELECT COUNT(*)
  INTO v_service_name
  FROM CMS_WEB_SERVICE_MASTER
  WHERE SERVICES_NAME = p_service_name;

  IF v_service_name=0 THEN
    p_out := 'Invalid Service Name';
    dbms_output.put_line('Invalid Service Name');
    RETURN;
  END IF;

  --To check if Service is Active
  SELECT SERVICE_STATUS
  INTO v_service_status
  FROM CMS_WEB_SERVICE_MASTER
  WHERE SERVICES_NAME = p_service_name;

  IF NVL(v_service_status,'D')!='A' THEN
    p_out := 'Channel has no access to this Service';
    dbms_output.put_line('Channel has no access to this Service');
    RETURN;
  END IF;

  --To check if org_id exists in CMS_CHANNELS_MASTER table 
  SELECT COUNT(*)
  INTO v_count_org_id
  FROM CMS_CHANNELS_MASTER 
  WHERE CHANNEL_ID  = p_channel_id
  AND ORG_ID  = p_org_id;

  IF v_count_org_id=0 THEN
    p_out := 'Invalid Organisation ID';
    dbms_output.put_line('Invalid Organisation ID');
    RETURN;
  END IF;

  --To check if TGTAPPID exists in CMS_WEB_SERVICE_MASTER table
  SELECT COUNT(*)
  INTO v_tgtappid
  FROM CMS_WEB_SERVICE_MASTER
  WHERE SERVICES_NAME = p_service_name
  AND TGTAPPID = p_tgtappid;

  IF v_tgtappid=0 THEN
    p_out := 'Invalid TGT App ID';
    dbms_output.put_line('Invalid TGT App ID');
    RETURN;
  END IF;

  --Channel service

--  SELECT COUNT(*)
--  INTO v_channel_cnt
--  FROM cms_channels_master c join cms_outlet co
--  on(c.issuer_id=co.issuer_id)
--  where c.channel_id=p_channel_id
--  AND co.outlet_id=p_outlet_id;
--
--  IF v_channel_cnt=0 THEN
--    p_out := 'Channel and outlet does not belongs to same issuer';
--    dbms_output.put_line('Channel and outlet does not belongs to same issuer');
--    RETURN;
--  END IF;

SELECT
        COUNT(*)
    INTO
        v_channel_cnt
    FROM
        cms_channels_master cm,
        cms_web_service_master wsm,
        cms_channel_service_link csl,
        cms_outlet co,        
        cms_outlet_service_link osl,
        cms_channel_outlet_link col
    WHERE
            cm.id = csl.channel_id
        AND
            wsm.service_id = csl.service_id
        AND
            osl.service_id = wsm.service_id
        AND
            col.channel_id = cm.id
        AND
            co.outlet_id = osl.OUTLET_ID
        AND 
            cm.issuer_id = co.issuer_id 
        AND
            cm.channel_id = p_channel_id
        AND
            wsm.services_name = p_service_name
        AND
            co.outlet_id = p_outlet_id;

  IF v_channel_cnt=0 THEN
    p_out := 'Channel and outlet does not belongs to same issuer';
    dbms_output.put_line('Channel and outlet does not belongs to same issuer');
    RETURN;
  END IF;

  --To check if there are any sessions for the given channel_id, user_id and outlet_id
    SELECT count(*)
    INTO v_count
    FROM CMS_CHANNELS_MASTER cm,
      CMS_WEB_SERVICE_MASTER wsm,
      CMS_CHANNEL_SERVICE_LINK csl
    WHERE cm.ID         = csl.CHANNEL_ID
    AND wsm.SERVICE_ID  = csl.SERVICE_ID
    AND cm.CHANNEL_ID   = p_channel_id
    AND SERVICES_NAME   = p_service_name;

  IF v_count > 0 THEN

    dbms_output.put_line('Success');

    p_out := 'SUCCESS';

    SELECT SESSION_EXPIRY_TIME
    INTO p_session_expiry
    FROM CMS_CHANNELS_MASTER cm,
      CMS_WEB_SERVICE_MASTER wsm,
      CMS_CHANNEL_SERVICE_LINK csl
    WHERE cm.ID         = csl.CHANNEL_ID
    AND wsm.SERVICE_ID  = csl.SERVICE_ID
    AND cm.CHANNEL_ID   = p_channel_id
    AND SERVICES_NAME   = p_service_name;

  ELSE
      p_out := 'Service name is not available for mentioned channel id';
      dbms_output.put_line('Service name is not available for mentioned channel id');
      RETURN;
  END IF;

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE session_exists_for_channel(p_channel_id character varying, p_user_id character varying, p_outlet_id character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
v_count_channel NUMBER;
  v_user_id       NUMBER;
  v_outlet_id     NUMBER;
  v_count         NUMBER;
BEGIN

  UPDATE session_master SET STATUS = 'D' WHERE (SESSION_CREATED_TIME+1/(24*(60/SESSION_EXPIRE_IN_MIN))) < sysdate AND STATUS = 'A' ;
--   COMMIT;
  dbms_output.put_line(SQL%ROWCOUNT ||' rows updated');

  --To check if channel_id exists in session_master table 
  SELECT COUNT(*)
  INTO v_count_channel
  FROM CMS_CHANNELS_MASTER WHERE CHANNEL_ID  = p_channel_id;

  IF v_count_channel=0 THEN
    p_out := 'Invalid Channel ID';
    dbms_output.put_line('Invalid Channel ID');
    RETURN;
  END IF;
  /*
  --To check if user_id exists in session_master table
  SELECT COUNT(*)
  INTO v_user_id
  FROM session_master
  WHERE CHANNEL_ID  = p_channel_id
  AND USER_ID       = p_user_id;

  IF v_user_id=0 THEN
    p_out := 'Invalid User ID';
    dbms_output.put_line('Invalid User ID');
    RETURN;
  END IF;
  */

  --To check if there are any sessions for the given channel_id, user_id and outlet_id
  SELECT COUNT(*)
  INTO v_count
  FROM session_master
  WHERE CHANNEL_ID            = p_channel_id
  AND USER_ID                 = p_user_id
  AND NVL(OUTLET_ID,'N/A')    = p_outlet_id
  AND STATUS                  = 'A'
  AND (SESSION_CREATED_TIME+1/(24*(60/SESSION_EXPIRE_IN_MIN))) > sysdate;

  IF v_count > 1000 THEN
    dbms_output.put_line('User is already logged in under this session');
--    p_out := 'User is already logged in under this session';
    p_out := 'Max session count reached';

ELSE
      p_out := 'SUCCESS';
      dbms_output.put_line('No sessions');
      RETURN;
  END IF;

END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE session_validate_proc(p_channel_id character varying, p_session_id character varying, p_outlet_id character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
v_count_channel          NUMBER;
    v_count_session          NUMBER;
    v_outlet_id              NUMBER;
    v_count                  NUMBER;
    v_chann_sess_outlet_id   NUMBER;
BEGIN

/*
    UPDATE session_master
        SET
            status = 'D'
    WHERE
            TO_CHAR(
                session_created_time + 1 / (24 * (60 / session_expire_in_min) ),
                'DD-Mon-YYYY hh24:mi:ss'
            ) < TO_CHAR(SYSDATE,'DD-Mon-YYYY hh24:mi:ss')
        AND
            status = 'A';
*/
    UPDATE session_master
        SET
            status = 'D'
    WHERE
                (session_created_time + 1 / (24 * (60 / session_expire_in_min) )) < SYSDATE
        AND
            status = 'A';

--     COMMIT;

    dbms_output.put_line(SQL%rowcount || ' rows updated');
    SELECT
        COUNT(*)
    INTO
        v_count_channel
    FROM
        cms_channels_master
    WHERE
        channel_id = p_channel_id;
  -- dbms_output.put_line(v_count_channel ||' v_count_channel');

    IF
        v_count_channel = 0
    THEN
        dbms_output.put_line('Invalid Channel ID');
        p_out := 'Invalid Channel ID';
        return;
    END IF;

    SELECT
        COUNT(*)
    INTO
        v_count_session
    FROM
        session_master
    WHERE
            channel_id = p_channel_id
        AND
            session_id = p_session_id;

    IF
        v_count_session = 0
    THEN
        dbms_output.put_line('Invalid Session ID');
        p_out := 'Invalid Session ID';
        return;
    END IF;

  --to check outlet_id

    SELECT
        COUNT(*)
    INTO
        v_outlet_id
    FROM
        session_master
    WHERE
            channel_id = p_channel_id
        AND
            nvl(outlet_id,'N/A') = p_outlet_id;

    IF
        v_outlet_id = 0
    THEN
        dbms_output.put_line('Invalid Outlet ID');
        p_out := 'Invalid Outlet ID';
        return;
    END IF; 

  --to check channel,session and outlet_id

    SELECT
        COUNT(*)
    INTO
        v_chann_sess_outlet_id
    FROM
        session_master
    WHERE
            channel_id = p_channel_id
        AND
            session_id = p_session_id
        AND
            nvl(outlet_id,'N/A') = p_outlet_id;

    IF
        v_chann_sess_outlet_id = 0
    THEN
        dbms_output.put_line('Invalid Outlet ID');
        p_out := 'Invalid Outlet ID';
        return;
    END IF;

    SELECT
        COUNT(*)
    INTO
        v_count
    FROM
        session_master
    WHERE
            channel_id = p_channel_id
        AND
            nvl(outlet_id,'N/A') = p_outlet_id
        AND
            session_id = p_session_id -- added new
        AND
            status = 'A'
        AND
        (session_created_time + 1 / (24 * (60 / session_expire_in_min) )) > SYSDATE;
--            TO_CHAR(
--                session_created_time + 1 / (24 * (60 / session_expire_in_min) ),
--                'DD-Mon-YYYY hh24:mi:ss'
--            ) > TO_CHAR(SYSDATE,'DD-Mon-YYYY hh24:mi:ss');

    IF
        v_count > 0
    THEN
        dbms_output.put_line('Success');
        p_out := 'SUCCESS';
    ELSE
        dbms_output.put_line('Session is expired');
        p_out := 'Session is expired';
        return;
    END IF;

END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE settlement_process(p_file_name character varying, p_user_id character varying, OUT p_file_response character varying)
 SECURITY DEFINER
AS $procedure$
v_file_name            VARCHAR2(100);
        v_nextval              VARCHAR2(100);
        v_process_id           VARCHAR2(100);
        v_main_activity_name   VARCHAR2(100);
        v_activity_log         VARCHAR2(500);
        v_start_date_time      VARCHAR2(100);
        v_end_date_time        VARCHAR2(100);
        v_user_id              VARCHAR2(100);
        v_main_activity_id     VARCHAR2(100);
        v_parameters           VARCHAR2(100);
        v_file_code            VARCHAR2(100);
        v_de024                VARCHAR2(100);
        v_mti                  VARCHAR2(100);
        v_function_code        VARCHAR2(100);
        v_txn_code             VARCHAR2(100);
        v_de093                VARCHAR2(100);
        v_de094                VARCHAR2(100);
        v_pid                  VARCHAR2(100);
    ---Recon---
        v_parameter            VARCHAR2(100);
        whr_condition          VARCHAR2(4000) := NULL;
        sql_stmt               VARCHAR2(4000) := NULL;
    --Rupay_2
        c2_de024               cs_rupay_intemp.de024%TYPE;
        c2_mti                 cs_rupay_intemp.mti%TYPE;
        c2_rec_function_code   cs_config_rupay_xmltag.function_code%TYPE;
        c2_rec_mti             cs_config_rupay_xmltag.mti%TYPE;
    ---Rupay_3
        c3_de024               cs_rupay_intemp.de024%TYPE;
        c3_mti                 cs_rupay_intemp.mti%TYPE;
        c3_rec_function_code   cs_config_rupay_xmltag.function_code%TYPE;
        c3_rec_mti             cs_config_rupay_xmltag.mti%TYPE;
        v_ide010               cs_rupay_ogtemp.ide010%TYPE;
        c_txn_code             cs_config_rupay_xmltag.txn_code%TYPE;
        c_function_code        cs_config_rupay_xmltag.function_code%TYPE;
        c_mti                  cs_config_rupay_xmltag.mti%TYPE;
        c_de024                cs_rupay_intemp.de024%TYPE;
        v_file_type            cs_config_filenamemaster.file_type%TYPE;
        v_file_desc            VARCHAR2(100);
        v_process_date         VARCHAR2(100);
        v_process_time         VARCHAR2(100);
        v_txn_cnt              NUMBER := 0;
        v_txn_amt              NUMBER := 0;
        v_file_date            VARCHAR2(100);
        v_netwk                VARCHAR2(100);
        v_process_complete     cs_filerollback.process_complete%TYPE;
        process_id             cs_filerollback.process_id%TYPE;
        v_file_description     cs_config_filenamemaster.file_name_description%TYPE;
        file_cnt               NUMBER := 0;
        v_pds0641              cs_rupay_intemp.pds0641%TYPE;
        v_ide004               cs_rupay_intemp.ide004%TYPE;
        v_pds0122              cs_rupay_intemp.pds0122%TYPE;
        v_ide005               cs_rupay_intemp.ide005%TYPE;
        v_ide003               cs_rupay_intemp.ide003%TYPE;
        lofo_count             NUMBER := 0;
        v_txn_id               VARCHAR2(100);
        v_start_date           VARCHAR2(50) := NULL;
        v_end_date             VARCHAR2(50) := NULL;
        v_temp_rowid           VARCHAR2(100) := NULL;
        v_process_reverse      VARCHAR2(100) := NULL;
        v_rollback_complete    VARCHAR2(100) := NULL;
        v_cnt1                 NUMBER;
        v_cnt2                 NUMBER;
        v_error                VARCHAR2(100);
        P_OUT                 VARCHAR2(200);
        v_complete_status   varchar2(10) := null;
		v_err_msg  varchar2(100);
        
        v_file_gen_date        VARCHAR2(6) := NULL;
        v_file_seq             NUMBER;
        v_seq_flag             VARCHAR2(4) := NULL;
        v_alert_msg            VARCHAR2(100);
        v_roll_count           NUMBER;
        v_rupay_filename       VARCHAR2(21);
        processid_update_fail EXCEPTION;
        invalid_parameter EXCEPTION;
        file_updation EXCEPTION;
		v_offline_cnt number; -- OFFLINE COUNT
        v_offline_exp exception;
        v_rw_cnt number;
        
    -- v_IDE003 varchar2(100);
        CURSOR c_rupcs_intemp IS SELECT
            de093,
            de094
                                 FROM
            cs_rupay_intemp;

        CURSOR c2_rupay_2 IS SELECT
            de024,
            mti
                             FROM
            cs_rupay_intemp;

        CURSOR c2_rec IS SELECT
            function_code,
            mti,
            txn_code
                         FROM
            cs_config_rupay_xmltag;
    ---RuPay_3

        CURSOR c3_rupay_3 IS SELECT
            de024,
            mti
                             FROM
            cs_rupay_intemp;

        CURSOR c3_rec IS SELECT
            function_code,
            mti,
            txn_code
                         FROM
            cs_config_rupay_xmltag;

        CURSOR c_rupaycs_pid IS SELECT
            pid
                                FROM
            cs_rupay_pid;

    BEGIN
    
    IF p_file_name IS NULL OR p_user_id IS NULL THEN
            RAISE invalid_parameter;
        END IF;
        SELECT
            file_type,
            file_code,
            file_name_description,
            network,
            file_seq,
            seq_flag
        INTO
            v_file_type,
            v_file_code,
            v_file_description,
            v_netwk,
            v_file_seq,
            v_seq_flag
        FROM
            cs_config_filenamemaster
        WHERE
            file_code = substr(p_file_name,1,2);

        dbms_output.put_line('file_code:= '
                               || v_file_code
                               || '  File_Type:=  '
                               || v_file_type);
        IF
            v_file_type = 'INC' OR v_file_type = 'ACK' OR v_file_type = 'WEBACK' OR v_file_type = 'AUTOSET' OR v_file_type = 'SETAUTH' OR v_file_type IS NULL
        THEN
            SELECT
                COUNT(file_name)
            INTO file_cnt
            FROM
                cs_filemaster
            WHERE
                file_name = p_file_name;

            dbms_output.put_line(file_cnt);
            IF
                file_cnt > 0
            THEN
                dbms_output.put_line('File is already process in system');
                p_file_response := p_file_name
                                   || ' '
                                   || v_file_description
                                   || ' File is already process in system';
            ELSE
                dbms_output.put_line('File processing is started');
                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                SELECT
                    'RIC.'
                    || TO_CHAR(SYSDATE,'DDMMYY')
                    || '.'
                    || lpad(incoming_file_seq.NEXTVAL,5,'0')
                INTO v_process_id
                FROM
                    dual;
                    
               -----new changes---------
           Begin
              select ide003
              into v_rupay_filename
              from CS_RUPAY_INTEMP 
              where DE024 =670 
              and MTI=1644;
              
              exception
               when others then
               v_rupay_filename := null;
                raise File_updation;
              end;

                UPDATE cs_rupay_intemp
                SET  ide003 = v_rupay_filename;      

                UPDATE cs_rupay_intemp
                SET
                    process_id = v_process_id --PROCESS_DATE = (SELECT SYSDATE FROM DUAL), process_id=v_process_id
       -- WHERE file_name     =p_file_name;   commented by AP - 11 AUG 18
                WHERE
                    ide003 = p_file_name;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                    RAISE processid_update_fail;
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Creation and application of process ID';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.1',p_file_name);
                     v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                INSERT INTO cs_filerollback (
                    process_id,
                    file_name,
                    process_complete,
                    process_reverse,
                    rollback_complete,
                    start_date_time,
                    end_date_time,
                    user_id,
                    main_activity_id
                ) VALUES
                  (
                    v_process_id,
                    p_file_name,
                    v_process_complete,
                    v_process_reverse,
                    v_rollback_complete,
                    v_start_date,
                    v_end_date,
                    p_user_id,
                    '7'
                );

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Insertion of file details into CS_FILEROLLBACK table';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.2',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                IF
                    v_file_type = 'ACK'
                THEN
                    v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    INSERT INTO cs_rupay_ack
                        SELECT
                            *
                        FROM
                            cs_rupay_intemp
                        WHERE
                            nvl(de024,0) NOT IN (
                                670,
                                671
                            );

                    IF
                        SQL%rowcount > 0
                    THEN
                        v_complete_status := 'YES';
                    ELSE
                        v_complete_status := 'NO';
                    END IF;

                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Insert data into CS_RUPAY_ACK table';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.3',p_file_name);

                END IF;

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');

        /* Process are swipe and ids are change by Amruta */
                SELECT
                    it.pds0641,
                    it.ide004,
                    it.pds0122,
                    it.ide005,
                    it.ide003
                INTO
                    v_pds0641,
                    v_ide004,
                    v_pds0122,
                    v_ide005,
                    v_ide003
                FROM
                    cs_rupay_intemp it,
                    cs_config_rupay_xmltag xt
                WHERE
                    it.mti = xt.mti
                    AND it.de024 = xt.function_code
                    AND xt.txn_code = 'HDR';

                UPDATE cs_rupay_intemp
                SET
                    pds0641 = v_pds0641,
                    ide004 = v_ide004,
                    pds0122 = v_pds0122,
                    ide005 = v_ide005;
                   -- ide003 = v_ide003;

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Continuation of field from header record';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.4',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                
                -------New changes----------      
                SELECT
                    pds0159_sett_date
                INTO v_file_gen_date
                FROM
                    cs_rupay_intemp
                WHERE
                    process_id = v_process_id
                    AND de024 = '670';
                
                INSERT INTO cs_hdrtrl
                    ( SELECT
                        a.*
                      FROM
                        cs_rupay_intemp a,
                        cs_config_rupay_xmltag b
                      WHERE
                        a.mti = b.mti
                        AND a.de024 = b.function_code
                        AND (
                            b.txn_code = 'HDR'
                            OR b.txn_code = 'TLR'
                        )
                    );
        /* in this line table b should be used not a -- Amruta */

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Header and Trailer record movement';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.5',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                OPEN c_rupcs_intemp;
                LOOP
                    FETCH c_rupcs_intemp INTO
                        v_de093,
                        v_de094;
                    dbms_output.put_line('DE093:='
                                           || v_de093
                                           || 'DE094:='
                                           || v_de094);
                    EXIT WHEN c_rupcs_intemp%notfound;
                    SELECT
                        COUNT(arp.pid)
                    INTO lofo_count
                    FROM
                        cs_rupay_pid arp
                    WHERE
                        arp.pid = v_de093
                        OR arp.pid = v_de094;

                    IF
                        lofo_count > 0
                    THEN
                        UPDATE cs_rupay_intemp
                        SET
                            lofo_indicator = 'F'
                        WHERE
                            de093 = v_de093
                            OR de094 = v_de094;
            -- where ROWID = v_temp_rowid;

                    ELSE
                        UPDATE cs_rupay_intemp
                        SET
                            lofo_indicator = 'L'
                        WHERE
                            de093 = v_de093
                            OR de094 = v_de094;
            --where ROWID = v_temp_rowid;

                    END IF;

                    IF
                        SQL%rowcount > 0
                    THEN
                        v_complete_status := 'YES';
                    ELSE
                        v_complete_status := 'NO';
                    END IF;

                END LOOP;

                CLOSE c_rupcs_intemp;
                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Updation of LOFO_INDICATOR';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.6',p_file_name);
        ---*************Recon logic start here************----------
        --- Updation from raw data
        -------static logic start here------------

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                   
                    
              UPDATE cs_rupay_intemp t1
                SET
                    t1.bin_msg_type = nvl(t1.bin_msg_type,(
                        SELECT
                            t2.bin_msg_type
                        FROM
                            cs_rupay_netswitcha t2
                        WHERE
                            t1.de012 = (substr(t2.actual_de013,2,6)
                                         || t2.actual_de012)
                            AND substr(t1.de031,11,12) = t2.de037
                    )),
                    t1.de018 = nvl(t1.de018,(
                        SELECT
                            t2.de018
                        FROM
                            cs_rupay_netswitcha t2
                        WHERE
                            t1.de012 = (substr(t2.actual_de013,2,6)
                                         || t2.actual_de012)
                            AND substr(t1.de031,11,12) = t2.de037
                    )),
                    t1.de042 = nvl(t1.de042,(
                        SELECT
                            t2.de042
                        FROM
                            cs_rupay_netswitcha t2
                        WHERE
                            t1.de012 = (substr(t2.actual_de013,2,6)
                                         || t2.actual_de012)
                            AND substr(t1.de031,11,12) = t2.de037
                    )),
                    t1.de043_merch_addr = nvl(t1.de043_merch_addr,(
                        SELECT
                            t2.de043_merch_addr
                        FROM
                            cs_rupay_netswitcha t2
                        WHERE
                            t1.de012 = (substr(t2.actual_de013,2,6)
                                         || t2.actual_de012)
                            AND substr(t1.de031,11,12) = t2.de037
                    ));      

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Internal recon logic - Updation of transaction details from raw data table - CS_RUPAY_NETSWITCHA';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.7',p_file_name);
        --  Updation of settlement data
        -------*********--Rupay_2-----**********----

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                IF
                    v_file_type = 'ACK' OR v_file_type = 'WEBACK'
                THEN
                    v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    whr_condition := get_recon_whr_condition('RUPAY_2');

                    OPEN c2_rupay_2;
                    LOOP
                        FETCH c2_rupay_2 INTO
                            c2_de024,
                            c2_mti;
                        EXIT WHEN c2_rupay_2%notfound;
                        OPEN c2_rec;
                        LOOP
                            FETCH c2_rec INTO
                                c2_rec_function_code,
                                c2_rec_mti,
                                v_txn_code;
                            EXIT WHEN c2_rec%notfound;
                            IF
                                c2_mti = c2_rec_mti AND c2_de024 = c2_rec_function_code AND v_txn_code != 'REF'
                            THEN
                                sql_stmt := 'Update CS_RUPAY_OGTEMP t1            

Set (t1.DE026, t1.DE042, t1.DE093,t1.PDS0159_SETT_DATE,t1.PDS0390,t1.DE005,t1.DE050,t1.DE009,t1.DE006,t1.DE010,t1.DE051,t1.PDS0146_FEE_TYPE_1,t1.PDS0146_FEE_TYPE_2,t1.PDS0146_FEE_TYPE_3,t1.PDS0146_FEE_TYPE_4,t1.PDS0146_FEE_TYPE_5,t1.PDS0146_INTCHG_CAT,t1.PDS0146_INTCHG_CAT_1,t1.PDS0146_INTCHG_CAT_2,t1.PDS0146_INTCHG_CAT_3,t1.PDS0146_INTCHG_CAT_4,t1.PDS0146_INTCHG_CAT_5,t1.PDS0146_FEE_AMT_1,t1.PDS0146_FEE_AMT_2,t1.PDS0146_FEE_AMT_3,t1.PDS0146_FEE_AMT_4,t1.PDS0146_FEE_AMT_5,t1.PDS0146_DRCR_1,t1.PDS0146_DRCR_2,t1.PDS0146_DRCR_3,t1.PDS0146_DRCR_4,t1.PDS0146_DRCR_5,t1.PDS0146_CURR_CODE_1,PDS0146_CURR_CODE_2,PDS0146_CURR_CODE_3,PDS0146_CURR_CODE_4,PDS0146_CURR_CODE_5,t1.IDE003,t1.IDE010,t1.PDS0005_REJ_RSNCODE_TXN,t1.IDE006) = (select t2.DE026, t2.DE042, t2.DE093,t2.PDS0159_SETT_DATE,t2.PDS0390,t2.DE005,t2.DE050,t2.DE009,t2.DE006,t2.DE010,t2.DE051,t2.PDS0146_FEE_TYPE_1,t2.PDS0146_FEE_TYPE_2,t2.PDS0146_FEE_TYPE_3,t2.PDS0146_FEE_TYPE_4,t2.PDS0146_FEE_TYPE_5,t2.PDS0146_INTCHG_CAT,t2.PDS0146_INTCHG_CAT_1,t2.PDS0146_INTCHG_CAT_2,t2.PDS0146_INTCHG_CAT_3,t2.PDS0146_INTCHG_CAT_4,t2.PDS0146_INTCHG_CAT_5,t2.PDS0146_FEE_AMT_1,t2.PDS0146_FEE_AMT_2,t2.PDS0146_FEE_AMT_3,t2.PDS0146_FEE_AMT_4,t2.PDS0146_FEE_AMT_5,t2.PDS0146_DRCR_1,t2.PDS0146_DRCR_2,t2.PDS0146_DRCR_3,t2.PDS0146_DRCR_4,t2.PDS0146_DRCR_5,t2.PDS0146_CURR_CODE_1,t2.PDS0146_CURR_CODE_2,t2.PDS0146_CURR_CODE_3,t2.PDS0146_CURR_CODE_4,t2.PDS0146_CURR_CODE_5,t2.IDE003,t2.IDE010,t2.PDS0005_REJ_RSNCODE_TXN,t2.IDE006  from cs_rupay_intemp  t2         

Where 1 = 1 '
                                            || whr_condition
                                            || ')';
                --             dbms_output.put_line('sql_stmt : ' || sql_stmt); --commented by karan
                                EXECUTE IMMEDIATE sql_stmt;
                            END IF;

                        END LOOP;

                        CLOSE c2_rec;
                    END LOOP;

                    CLOSE c2_rupay_2;
                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Internal recon logic - Updation of settlement data for  other than refund trnsaction';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,'YES'
,p_user_id,'7.8.1',p_file_name);
          ------**************RUPAY_3*******************------

                    v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    whr_condition := get_recon_whr_condition('RUPAY_3');
          --whr_condition := get_recon_whr_condition('RUPAY_3');
                    OPEN c3_rupay_3;
                    LOOP
                        FETCH c3_rupay_3 INTO
                            c3_de024,
                            c3_mti;
                        EXIT WHEN c3_rupay_3%notfound;
                        OPEN c3_rec;
                        LOOP
                            FETCH c3_rec INTO
                                c3_rec_function_code,
                                c3_rec_mti,
                                v_txn_code;
                            EXIT WHEN c3_rec%notfound;
                            IF
                                c3_mti = c3_rec_mti AND c3_de024 = c3_rec_function_code AND v_txn_code = 'REF'
                            THEN
                                sql_stmt := 'Update CS_RUPAY_OGTEMP t1            

Set (t1.DE026, t1.DE042, t1.DE093,t1.PDS0159_SETT_DATE,t1.PDS0390,t1.DE005,t1.DE050,t1.DE009,t1.DE006,t1.DE010,t1.DE051,t1.PDS0146_FEE_TYPE_1,t1.PDS0146_FEE_TYPE_2,t1.PDS0146_FEE_TYPE_3,t1.PDS0146_FEE_TYPE_4,t1.PDS0146_FEE_TYPE_5,t1.PDS0146_INTCHG_CAT,t1.PDS0146_INTCHG_CAT_1,t1.PDS0146_INTCHG_CAT_2,t1.PDS0146_INTCHG_CAT_3,t1.PDS0146_INTCHG_CAT_4,t1.PDS0146_INTCHG_CAT_5,t1.PDS0146_FEE_AMT_1,t1.PDS0146_FEE_AMT_2,t1.PDS0146_FEE_AMT_3,t1.PDS0146_FEE_AMT_4,t1.PDS0146_FEE_AMT_5,t1.PDS0146_DRCR_1,t1.PDS0146_DRCR_2,t1.PDS0146_DRCR_3,t1.PDS0146_DRCR_4,t1.PDS0146_DRCR_5,t1.PDS0146_CURR_CODE_1,PDS0146_CURR_CODE_2,PDS0146_CURR_CODE_3,PDS0146_CURR_CODE_4,PDS0146_CURR_CODE_5,t1.IDE003,t1.IDE010,t1.PDS0005_REJ_RSNCODE_TXN,t1.IDE006) = (select t2.DE026, t2.DE042, t2.DE093,t2.PDS0159_SETT_DATE,t2.PDS0390,t2.DE005,t2.DE050,t2.DE009,t2.DE006,t2.DE010,t2.DE051,t2.PDS0146_FEE_TYPE_1,t2.PDS0146_FEE_TYPE_2,t2.PDS0146_FEE_TYPE_3,t2.PDS0146_FEE_TYPE_4,t2.PDS0146_FEE_TYPE_5,t2.PDS0146_INTCHG_CAT,t2.PDS0146_INTCHG_CAT_1,t2.PDS0146_INTCHG_CAT_2,t2.PDS0146_INTCHG_CAT_3,t2.PDS0146_INTCHG_CAT_4,t2.PDS0146_INTCHG_CAT_5,t2.PDS0146_FEE_AMT_1,t2.PDS0146_FEE_AMT_2,t2.PDS0146_FEE_AMT_3,t2.PDS0146_FEE_AMT_4,t2.PDS0146_FEE_AMT_5,t2.PDS0146_DRCR_1,t2.PDS0146_DRCR_2,t2.PDS0146_DRCR_3,t2.PDS0146_DRCR_4,t2.PDS0146_DRCR_5,t2.PDS0146_CURR_CODE_1,t2.PDS0146_CURR_CODE_2,t2.PDS0146_CURR_CODE_3,t2.PDS0146_CURR_CODE_4,t2.PDS0146_CURR_CODE_5,t2.IDE003,t2.IDE010,t2.PDS0005_REJ_RSNCODE_TXN,t2.IDE006  from cs_rupay_intemp  t2         

Where 1 = 1 '
                                            || whr_condition
                                            || ')';
                                dbms_output.put_line('sql_stmt : ' || sql_stmt);
                                EXECUTE IMMEDIATE sql_stmt;
                            END IF;

                        END LOOP;

                        CLOSE c3_rec;
                    END LOOP;

                    CLOSE c3_rupay_3;
                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Internal recon logic - Updation of settlement data for  refund transaction';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,'YES'
,p_user_id,'7.8.2',p_file_name);

                END IF; -- End of Updation of settlement data
        -- Movement of successful Records for type 'ACK'

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                IF
                    v_file_type = 'ACK'
                THEN
                    INSERT INTO cs_rupay_og
                        SELECT
                            *
                        FROM
                            cs_rupay_ogtemp
                        WHERE
                            ide010 = 'S';

                    IF
                        SQL%rowcount > 0
                    THEN
                        v_complete_status := 'YES';
                    ELSE
                        v_complete_status := 'NO';
                    END IF;

                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Movement of successful records for file type ACK';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.9',p_file_name);
          -- Movement of successful Records for type 'WEBACK'

                    v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                ELSIF v_file_type = 'WEBACK' THEN
                    INSERT INTO cs_rupay_og
                        SELECT
                            *
                        FROM
                            cs_rupay_intemp
                        WHERE
                            ide010 = 'S';

                    IF
                        SQL%rowcount > 0
                    THEN
                        v_complete_status := 'YES';
                    ELSE
                        v_complete_status := 'NO';
                    END IF;

                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Movement of successful records for file type WEBACK';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.10',p_file_name);

                    v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    INSERT INTO cs_rupay_ogtemp
                        SELECT
                            *
                        FROM
                            cs_rupay_intemp
                        WHERE
                            ide010 <> 'S';

                    IF
                        SQL%rowcount > 0
                    THEN
                        v_complete_status := 'YES';
                    ELSE
                        v_complete_status := 'NO';
                    END IF;

                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Movement of Unsuccessful records for file type WEBACK';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.11',p_file_name);

          -- Movement of successful Records for type 'AUTOSET'

                    v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                ELSIF v_file_type = 'AUTOSET' THEN
                    INSERT INTO cs_rupay_og
                        SELECT
                            *
                        FROM
                            cs_rupay_intemp
                        WHERE
                            nvl(de024,0) NOT IN (
                                670,
                                671
                            );

                    IF
                        SQL%rowcount > 0
                    THEN
                        v_complete_status := 'YES';
                    ELSE
                        v_complete_status := 'NO';
                    END IF;

                    v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                    v_activity_log := 'Movement of successful records for file type AUTOSET';
                    p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.12',p_file_name);

                END IF;

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');

        ---*******recon changes new*******************
        ---****incoming recon-------------

-- POSTGRES MERGE
-------------------
UPDATE cs_rupay_intemp cs
SET cs.already_settle_flag = 'Y'
FROM (SELECT cd.hash_card_number,
             b.f018,
             b.f004,
             b.txn_date,
             b.f012,
             b.f037,
	         b.f013,
             b.f038,
             b.f041,
             b.txn_type,
             b.drcr,
             b.int_ref_no,
             b.int_txn_type, 
             ced.enrypted_card_no,
             b.unique_txn_id,
	         b.settle_flag
       FROM
             aswt_switch_txn_authrization b,
             card_detail cd,
             card_encryption_detail ced
       WHERE
             b.f002 = cd.hash_card_number
             AND ced.card_ref_number = cd.card_ref_number) a
WHERE cs.de002 = a.enrypted_card_no
      AND substr(cs.de031,11,12) = a.f037
      AND substr(cs.de012,1,6) = substr(a.txn_date,7,2)|| a.f013
      AND substr(cs.de012,7,6) = a.f012
      AND cs.de038 = a.f038
      AND cs.de041 = rtrim(a.f041)
      AND a.txn_type ='21000'
    --  and a.int_txn_type= '2100005'
	  and a.settle_flag = 'Y'
     -- AND a.drcr <> 'R'
      AND cs.de024 = '200'
      AND cs.mti IN ('1240','0200');  
	  
	  IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Settlement already_settle_flag updation in ASWT_SWITCH_TXN_AUTHRIZATION table';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.13',p_file_name);
                dbms_output.put_line('Before Auth');
				
	For x in (select * from 
				(select a.f037,a.f012,a.f013,a.f038,a.f041,cs.id,
				row_number() over (partition by a.f037,a.f012,a.f013,a.f038,a.f041) rn
					from  cs_rupay_intemp cs,
						 (SELECT cd.hash_card_number,
						 b.f018,
						 b.f004,
						 b.txn_date,
						 b.f012,
						 b.f037,
						 b.f013,
						 b.f038,
						 b.f041,
						 b.txn_type,
						 b.drcr,
						 b.int_ref_no,
						 b.int_txn_type, 
						 ced.enrypted_card_no,
						 b.unique_txn_id,
						 b.settle_flag
				   FROM
						 aswt_switch_txn_authrization b,
						 card_detail cd,
						 card_encryption_detail ced
				   WHERE
						 b.f002 = cd.hash_card_number
						 AND ced.card_ref_number = cd.card_ref_number
						 and to_number(substr(expiry_date,3,2)||substr(expiry_date,1,2)) >= to_number(to_char(sysdate,'yymm'))) a
			WHERE cs.de002 = a.enrypted_card_no
				  AND substr(cs.de031,11,12) = a.f037
				  AND substr(cs.de012,1,6) = substr(a.txn_date,7,2)|| a.f013
				  AND substr(cs.de012,7,6) = a.f012
				  AND cs.de038 = a.f038
				  AND cs.de041 = rtrim(a.f041)
				  AND a.txn_type ='21000'
				  --and a.int_txn_type= '2100005' 
				  AND cs.de024 = '200'
				  AND cs.mti IN ('1240','0200')
				  and nvl(cs.already_settle_flag,'N') = 'N') where rn > 1)
				  loop
				  
				  dbms_output.put_line('inside loop');
				  
				  update cs_rupay_intemp t
				  set already_settle_flag = 'Y'
				  where t.id = x.id;
	  
	  
	 			 end loop;
	 			
	 			dbms_output.put_line('AFter Auth');

UPDATE aswt_switch_txn_authrization b
SET 
b.settle_flag = 'Y',
b.settle_date = to_date(pds0159_sett_date, 'yymmdd'),--SYSDATE,
b.cs_id = a.id,
b.cs_process_id = a.process_id
FROM (SELECT
            cs.de031,
            cs.de012,
            cs.de038,
            cs.de041,
            cs.de002,
            cs.de024,
            cs.mti,
            cd.hash_card_number,
            cs.de004,
            cs.process_id,
            cs.pds0159_sett_date,
            cs.id--, cs.id
        FROM
            cs_rupay_intemp cs,
            card_detail cd,
            card_encryption_detail ced
        WHERE
            cs.de002 = ced.enrypted_card_no
            AND ced.card_ref_number = cd.card_ref_number
	       and nvl(cs.already_settle_flag,'N') = 'N') a
WHERE 
b.f037 = substr(a.de031,11,12)
AND substr(b.txn_date,7,2)|| b.f013 = substr(a.de012,1,6)
AND b.f012 = substr(a.de012,7,6)
AND b.f038 = a.de038
AND rtrim(b.f041) = a.de041
AND b.f002 = a.hash_card_number
AND b.txn_type = ( '21000' )
--and b.int_txn_type = '2100005'
--AND b.drcr <> 'R'
AND a.de024 = '200'
AND a.mti IN ('1240','0200')
AND (b.settle_flag IS NULL OR b.settle_flag = 'N');

                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                   
                   dbms_output.put_line('Before account');

                 for cur_rec in (select * 
                            from aswt_switch_txn_authrization a 
                            join card_detail cd on cd.hash_card_number = a.f002
                            where a.cs_process_id = v_process_id) loop
                          
                  update account_details ac set ac.hold_balance =ac.hold_balance - (cur_rec.f004/100),
                         current_balance =ac.current_balance - (cur_rec.f004/100)    
                        where ac.account_number =cur_rec.prep_account_number
                       and ac.wallet_id  = cur_rec.wallet_id;                                               
                            
                 end loop;           
                   
                   
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Settlement updation in ASWT_SWITCH_TXN_AUTHRIZATION table';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.13',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');    
                
                
                
--                 
-- Postgres Merge
--------------------
UPDATE aswt_raw_decline_queue b
SET b.settle_flag = 'Y',
    b.settle_date = to_date(pds0159_sett_date, 'yymmdd'),--SYSDATE,
    b.cs_id = a.id,
    b.cs_process_id = a.process_id
FROM (SELECT
      cs.de031,
      cs.de012,
      cs.de038,
      cs.de041,
      cs.de002,
      cs.de024,
      cs.mti,
      cd.hash_card_number,
      cs.de004,
      cs.process_id,
      cs.pds0159_sett_date,
      cs.id--, cs.id
      FROM
      cs_rupay_intemp cs,
      card_detail cd,
      card_encryption_detail ced
      WHERE
      cs.de002 = ced.enrypted_card_no
      AND ced.card_ref_number = cd.card_ref_number) a
WHERE 
 b.f037 = substr(a.de031,11,12)
 AND  substr(b.txn_date,7,2)|| b.f013 = substr(a.de012,1,6)
 AND b.f012 = substr(a.de012,7,6)
 AND b.f038 = a.de038
 AND rtrim(b.f041) = a.de041
 AND b.f002 = a.hash_card_number
 AND b.txn_type = ( '21000' )
 --AND b.drcr <> 'R'
 AND a.de024 = '200'
 AND a.mti IN ('1240','0200')
 AND ( b.settle_flag IS NULL OR b.settle_flag = 'N' );                                            
 
                IF SQL%rowcount > 0 THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Settlement updation in aswt_raw_decline_queue table';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date
               ,v_end_date,v_complete_status,p_user_id,'7.13',p_file_name);

              v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'); 
             
             dbms_output.put_line('Before merge');
               

-- POSTGRES MERGE -
---------------------
UPDATE harmonization_Exception_rpt b
SET 
b.settle_flag = 'Y',
b.settle_date = SYSDATE,
b.PRESENTMENT_FLAG = 'Y',
b.cs_id = a.id,
b.cs_process_id = a.process_id
FROM ( SELECT cs.de031,
              cs.de012,
              cs.de038,
              cs.de041,
              cs.de002,
              cs.de024,
              cs.mti,
              cd.hash_card_number,
              cs.de004,
              cs.process_id,
              cs.id--, cs.id
        FROM
              cs_rupay_intemp cs,
              card_detail cd,
              card_encryption_detail ced
         WHERE
              cs.de002 = ced.enrypted_card_no
              AND ced.card_ref_number = cd.card_ref_number) a
WHERE 
b.f037 = substr(a.de031,11,12)
AND to_char(b.txn_auth_date,'YY') || b.f013 = substr(a.de012,1,6)
AND b.f012 = substr(a.de012,7,6)
AND b.f038 = a.de038
AND rtrim(b.f041) = a.de041
AND b.f002 = a.hash_card_number
AND b.txn_type = ( '21000' )
AND b.drcr <> 'R'
AND a.de024 = '200'
AND a.mti IN ('1240','0200')
AND ( b.settle_flag IS NULL OR b.settle_flag = 'N' );

                IF SQL%rowcount > 0 THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Settlement updation in harmonization_Exception_rpt table';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date
               ,v_end_date,v_complete_status,p_user_id,'7.14',p_file_name);
                
              
              v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
             
             dbms_output.put_line('after merge');

-- POSTGRES MERGE
----------------------------
UPDATE cs_rupay_intemp cs
SET 
cs.cs_host_recon_flag = 'Y',
cs.cs_host_recon_date = SYSDATE,
cs.cs_host_recon_diff = to_number(cs.de004) - to_number(a.f004),
cs.cs_host_mcc = a.f018,
cs.cs_host_recon_rrn = a.unique_txn_id
FROM (SELECT cd.hash_card_number,
             b.f018,
             b.f004,
             b.txn_date,
             b.f012,
	         b.f013,
             b.f037,
             b.f038,
             b.f041,
             b.txn_type,
             b.drcr,
             b.int_ref_no,
             b.int_txn_type, 
             ced.enrypted_card_no,
             b.unique_txn_id
       FROM
             aswt_switch_txn_authrization b,
             card_detail cd,
             card_encryption_detail ced
       WHERE
             b.f002 = cd.hash_card_number
             AND ced.card_ref_number = cd.card_ref_number) a
WHERE cs.de002 = a.enrypted_card_no
      AND substr(cs.de031,11,12) = a.f037
      AND substr(cs.de012,1,6) = substr(a.txn_date,7,2)|| a.f013
      AND substr(cs.de012,7,6) = a.f012
      AND cs.de038 = a.f038
      AND cs.de041 = rtrim(a.f041)
      AND a.txn_type = ( '21000' )
   --   and a.int_txn_type= '2100005'
     -- AND a.drcr <> 'R'
      AND cs.de024 = '200'
      AND cs.mti IN ('1240','0200')
	  and nvl(cs.already_settle_flag,'N') = 'N';
      
                IF
                    SQL%rowcount > 0
                THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Updatation for tip and surcharge';
                p_cs_processlogmaster(v_process_id,'RuPay Settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status
,p_user_id,'7.14',p_file_name);

                v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'); 

               
               dbms_output.put_line('Before offline');
-------------------------------------------------------------------------------------------------------------------------
-- OFFLINE TICKETING
--------------------
update
	aswt_switch_txn_offline b
set
	b.settle_flag = 'Y',
	b.settle_date = to_date(pds0159_sett_date, 'yymmdd'),
	b.cs_id = a.id,
	b.cs_process_id = a.process_id
from
	(
	select
		cs.*,
		cd.hash_card_number
	from
		cs_rupay_intemp cs,
		card_detail cd,
		card_encryption_detail ced
	where
		cs.de002 = ced.enrypted_card_no
		and ced.card_ref_number = cd.card_ref_number
		and cs.de024 = '260' ) a
where
	b.f037 = substr(a.de031,11,12)
	and substr(b.txn_date,7,2) || b.f013 = substr(a.de012,1,6)
	and b.f012 = substr(a.de012,7,6)
	and b.f038 = a.de038
	and rtrim(b.f041) = a.de041
	and b.f002 = a.hash_card_number
	and b.txn_type = ('23000')
	and b.drcr = 'D'
	and a.mti in ('1240','0200')
	and (b.settle_flag is null or b.settle_flag = 'N' ) ;

update cs_rupay_intemp cs
SET cs.cs_host_recon_flag = 'Y',
    cs.cs_host_recon_date = sysdate,
    cs.cs_host_recon_diff = to_number(cs.de004) - to_number(a.f004),
    cs.cs_host_mcc = a.f018,
    cs.cs_host_recon_rrn = a.unique_txn_id
from (
      SELECT
          cd.hash_card_number,
          b.f018,
          b.f004,
          b.txn_date,
          b.f012,
          b.f037,
          b.f013,
          b.f038,
          b.f041,
          b.txn_type,
          b.drcr,
          b.int_ref_no,
          ced.enrypted_card_no,
          b.unique_txn_id,
          b.cs_process_id,
          b.tlf_flag
      FROM
          aswt_switch_txn_offline   b,
          card_detail               cd,
          card_encryption_detail    ced
      WHERE
          b.f002 = cd.hash_card_number
          AND ced.card_ref_number = cd.card_ref_number
        )a
where cs.de002 = a.enrypted_card_no
      AND substr(cs.de031, 11, 12) = a.f037
	  AND substr(a.txn_date, 7, 2)|| a.f013 = substr(cs.de012, 1, 6)						   
      AND substr(cs.de012, 7, 6) = a.f012
      AND cs.de038 = a.f038
      AND cs.de041 = rtrim(a.f041)
      AND a.txn_type ='23000'
      AND a.drcr = 'D'
      AND cs.mti IN ('1240','0200');
     
     dbms_output.put_line('Before insert');
      
insert into aswt_switch_txn_offline
(   settle_flag,
	txn_type,
	txn_date,
	txn_time,
	int_mti,
	int_ref_no,
	drcr,
	int_rrn,
	int_proc_code,
	int_amt,
	int_pos_entry_mode,
	mti,
	f002,
	f003,
	f004,
	f005,
	f006,
	f009,
	f010,
	f012,
	f013,
	f018,
	f022,
	f025,
	f026,
--  b.f031,
    f032,
	f037,
	f038,
	f039,
	f040,
	f041,
	f042,
	f043,
	f049,
	f050,
	f051,
	f054,
	f055,
	f061,
	f071,
	f072,
	f093,
	f094,
	f095,
	f125,
	settle_date,
	sys_txn_date,
	rfu_6,
	rfu_7,
	rfu_8,
	rfu_9,
	rfu_10,
	manual_settle_flag,
	manual_settle_date,
	cs_id,
	cs_process_id,
	trml_date,
	atc,
	--int_txn_type,
	tlf_flag,
	UNIQUE_TXN_ID)
select
	'Y',
	decode(a.de024, '260', '23000'),
	to_char(to_date(substr(a.de012,1,6),'YYMMDD'),'DDMMYYYY'),
	substr(a.de012,7,6),
	a.mti ,
	substr(a.de031,11,12),
	pds0390,
	substr(a.de031,11,12),
	a.de003,
	lpad(a.de004, 12, '0'),
	a.ide007,
	a.mti,
	a.hash_card_number,
	a.de003,
	a.de004,
	a.de005,
	a.de006,
	a.de009,
	a.de010,
	substr(a.de012,7,6),
	substr(a.de012,3,4),
	a.de018,
	a.ide007,
	a.ide008,
	a.de026,
--  a.de031,
    a.de032,
	substr(a.de031,11,12),
	a.de038,
	a.de039,
	a.de040,
	a.de041,
	a.de042,
	a.de043_merch_addr,
	a.de049,
	a.de050,
	a.de051,
	a.de054,
	a.de055,
	a.de022 || a.pds0515,
	a.de071,
	a.de072,
	a.de093,
	a.de094,
	a.pds0384,
	a.de125,
	to_date(pds0159_sett_date, 'yymmdd'),
--  a.pds0159_sett_date,
    sysdate,
	a.rfu_6,
	a.rfu_7,
	a.rfu_8,
	a.rfu_9,
	a.rfu_10,
	a.manual_settle_flag,
	a.manual_settle_date,
	a.id,
	a.process_id,
	case
		when a.emvtag_9a is null or a.de012 is null then null
		else to_date(a.emvtag_9a || substr(de012, 7, 6), 'YYMMDDHH24MISS')
	end,
	a.emvtag_9f36,
	--decode(a.de024, '260', '23000'),
	'Y' ,
	TO_CHAR(SYSDATE, 'DDMMYYHH24MMSS') || LPAD(cs_tlf_intemp_to_off_seq.nextval, 9, 0)
from
    (
	select
		cs.*,
		cd.hash_card_number
	from
		cs_rupay_intemp cs,
		card_detail cd,
		card_encryption_detail ced
	where
		cs.de002 = ced.enrypted_card_no
		and ced.card_ref_number = cd.card_ref_number
		and cs.de024 = '260' 
	) a
where 
    nvl(a.cs_host_recon_flag, 'N') = 'N'
	AND a.process_id = v_process_id;
	
	
   v_rw_cnt:=SQL%rowcount;
           select count(1) into v_offline_cnt from cs_rupay_intemp where de024='260' and process_id=v_process_id;  
                  
           
           PROC_PROCESSLOG('settlement','OFFLINE TICKETING start','PROCEDURE','OFFLINE TICKETING start 1 v_offline_cnt :' ||v_offline_cnt||'rowcount :'||v_rw_cnt,SYSDATE);  

                  if(v_rw_cnt>0) then
                PROC_PROCESSLOG('settlement','OFFLINE TICKETING start 2','PROCEDURE','OFFLINE TICKETING start 2 v_offline_cnt :' ||v_offline_cnt||'rowcount :'||v_rw_cnt,SYSDATE);  

                     if(v_offline_cnt<>v_rw_cnt) then
                         raise v_offline_exp;                       
                     end if;               
               PROC_PROCESSLOG('settlement','OFFLINE TICKETING start 2','PROCEDURE','OFFLINE TICKETING start 2 v_offline_cnt :' ||v_offline_cnt||'rowcount :'||v_rw_cnt,SYSDATE);  

                    v_complete_status := 'YES';
             
                    SELECT
                        file_type,
                        file_code,
                        file_name_description,
                        network,
                        file_seq,
                        seq_flag
                    INTO
                        v_file_type,
                        v_file_code,
                        v_file_description,
                        v_netwk,
                        v_file_seq,
                        v_seq_flag
                    FROM
                        cs_config_filenamemaster
                    WHERE
                        file_code = '05';
             
                ELSE
                    v_complete_status := 'NO';
                PROC_PROCESSLOG('settlement','OFFLINE TICKETING start 2','PROCEDURE','OFFLINE TICKETING start 3 v_offline_cnt :' ||v_offline_cnt||'rowcount :'||v_rw_cnt,SYSDATE);  

                    if(v_offline_cnt>0) then
                         raise v_offline_exp;
                    end if;
                END IF;

               
                dbms_output.put_line('Before insert 1');
                v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Settlement updation in ASWT_SWITCH_TXN_OFFLINE table';
                p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date
                , v_end_date,v_complete_status, p_user_id, '7.13.1', p_file_name);

                v_start_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
	

-- OFFLINE TICKETING

             /*   MERGE INTO aswt_switch_txn_offline b
                USING (
                          SELECT
                              cs.*,
                              cd.hash_card_number
                          FROM
                              cs_rupay_intemp          cs,
                              card_detail              cd,
                              card_encryption_detail   ced
                          WHERE
                              cs.de002 = ced.enrypted_card_no
                              AND ced.card_ref_number = cd.card_ref_number
--                              AND substr(ide003, 1, 2) = '05'  -- newly added
                             AND cs.de024='260'
                      )
                a ON ( b.f037 = substr(a.de031, 11, 12)
                       AND substr(b.txn_date, 7, 2)
                           || b.f013 = substr(a.de012, 1, 6)
                       AND b.f012 = substr(a.de012, 7, 6)
                       AND b.f038 = a.de038
                       AND rtrim(b.f041) = a.de041
                       AND b.f002 = a.hash_card_number
                       AND b.txn_type = ( '23000' )
                       AND b.drcr = 'D'
                       AND a.mti IN ('1240','0200')
                       AND ( b.settle_flag IS NULL
                             OR b.settle_flag = 'N' ) )
                WHEN MATCHED THEN UPDATE
                SET b.settle_flag = 'Y',
                    b.settle_date = sysdate,
                    b.cs_id = a.id,
                    b.cs_process_id = a.process_id
                WHEN NOT MATCHED THEN
                INSERT (
                    b.settle_flag,
                    b.txn_type,
                    b.txn_date,
                    b.txn_time,
                    b.int_mti,
                    b.int_ref_no,
                    b.drcr,
                    b.int_rrn,
                    b.int_proc_code,
                    b.int_amt,
                    b.int_pos_entry_mode,
                    b.mti,
                    b.f002,
                    b.f003,
                    b.f004,
                    b.f005,
                    b.f006,
                    b.f009,
                    b.f010,
                    b.f012,
                    b.f013,
                    b.f018,
                    b.f022,
                    b.f025,
                    b.f026,
--    b.f031,
                    b.f032,
                    b.f037,
                    b.f038,
                    b.f039,
                    b.f040,
                    b.f041,
                    b.f042,
                    b.f043,
                    b.f049,
                    b.f050,
                    b.f051,
                    b.f054,
                    b.f055,
                    b.f061,
                    b.f071,
                    b.f072,
                    b.f093,
                    b.f094,
                    b.f095,
                    b.f125,
                    b.settle_date,
                    b.sys_txn_date,
                    b.rfu_6,
                    b.rfu_7,
                    b.rfu_8,
                    b.rfu_9,
                    b.rfu_10,
                    b.manual_settle_flag,
                    b.manual_settle_date,
                    b.cs_id,
                    b.cs_process_id,
                    b.trml_date,
                    b.atc,
                    b.int_txn_type,
                    b.tlf_flag,
                    b.UNIQUE_TXN_ID)
                VALUES
                    ( 'Y',
                    decode(a.de024, '260', '23000'),
                    substr(a.de012, 1, 6),
                    substr(a.de012, 7, 6),
                    a.mti  ,
                    substr(a.de031, 11, 12),
                    pds0390,
                    substr(a.de031, 11, 12),
                    a.de003,
                    lpad(a.de004, 12, '0'),
                    a.ide007,
                    a.mti,
                    a.hash_card_number,
                    a.de003,
                    a.de004,
                    a.de005,
                    a.de006,
                    a.de009,
                    a.de010,
                    substr(a.de012, 7, 6),
                    substr(a.de012, 3, 4),
                    a.de018,
                    a.ide007,
                    a.ide008,
                    a.de026,
--    a.de031,
                    a.de032,
                    substr(a.de031, 11, 12),
                    a.de038,
                    a.de039,
                    a.de040,
                    a.de041,
                    a.de042,
                    a.de043_merch_addr,
                    a.de049,
                    a.de050,
                    a.de051,
                    a.de054,
                    a.de055,
                    a.de022 || a.pds0515,
                    a.de071,
                    a.de072,
                    a.de093,
                    a.de094,
                    a.pds0384,
                    a.de125,
                    to_date(pds0159_sett_date, 'yymmdd'),--    a.pds0159_sett_date,
                    sysdate,
                    a.rfu_6,
                    a.rfu_7,
                    a.rfu_8,
                    a.rfu_9,
                    a.rfu_10,
                    a.manual_settle_flag,
                    a.manual_settle_date,
                    a.id,
                    a.process_id,
                        CASE
                            WHEN a.emvtag_9a IS NULL
                                 OR a.de012 IS NULL THEN
                                NULL
                            ELSE
                                to_date(a.emvtag_9a
                                        || substr(de012, 7, 6), 'YYMMDDHH24MISS')
                        END,
                    a.emvtag_9f36,
                    decode(a.de024, '260', '23000'),
                    'Y' ,
                    TO_CHAR(SYSDATE,'DDMMYYHH24MMSS') ||LPAD(cs_tlf_intemp_to_off_seq.nextval,9,0));
            
                  
                 */
update cs_rupay_intemp cs
SET cs.cs_host_recon_flag = 'Y',
    cs.cs_host_recon_date = sysdate,
    cs.cs_host_recon_diff = to_number(cs.de004) - to_number(a.f004),
    cs.cs_host_mcc = a.f018,
    cs.cs_host_recon_rrn = a.unique_txn_id
from (
      SELECT
          cd.hash_card_number,
          b.f018,
          b.f004,
          b.txn_date,
          b.f012,
          b.f037,
          b.f013,
          b.f038,
          b.f041,
          b.txn_type,
          b.drcr,
          b.int_ref_no,
          ced.enrypted_card_no,
          b.unique_txn_id,
          b.cs_process_id,
          b.tlf_flag
      FROM
          aswt_switch_txn_offline   b,
          card_detail               cd,
          card_encryption_detail    ced
      WHERE
          b.f002 = cd.hash_card_number
          AND ced.card_ref_number = cd.card_ref_number
        )a
where cs.de002 = a.enrypted_card_no
      AND substr(cs.de031, 11, 12) = a.f037
	  AND substr(a.txn_date, 7, 2)|| a.f013 = substr(cs.de012, 1, 6)						   
      AND substr(cs.de012, 7, 6) = a.f012
      AND cs.de038 = a.f038
      AND cs.de041 = rtrim(a.f041)
      AND a.txn_type = ( '23000' )
      AND a.drcr = 'D'
      AND cs.mti IN ('1240','0200')
      and cs.process_id=a.cs_process_id
      and a.tlf_flag is null;

                IF SQL%rowcount > 0 THEN
                    v_complete_status := 'YES';
                ELSE
                    v_complete_status := 'NO';
                END IF;

                v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
                v_activity_log := 'Updatation of amount in offline table';
                p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date
                , v_end_date,
                                                           v_complete_status, p_user_id, '7.13.2', p_file_name);

                v_start_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');                              
------------------------------------------------------------------------------------------------------------------------------------
        -----**************************************************
		
		
		 dbms_output.put_line('Before insert 2');
        --for Rep

UPDATE cs_rupay_og b
SET 
b.rep_flag = 'Y',
b.rep_fullind = a.pds0268,
b.rep_adj_amt = ( b.de005 - a.de005 ),
b.rep_process_id = a.process_id
FROM
    cs_rupay_intemp a
WHERE
    b.de031 = a.de031
    AND b.de012 = a.de012
        AND b.de038 = a.de038
            AND b.de041 =
        a.de041;
               
        -- Movement of successful Records for type 'INC'
    IF SQL%rowcount > 0 THEN
        v_complete_status := 'YES';
    ELSE
        v_complete_status := 'NO';
    END IF;

    v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    v_activity_log := 'Updation of Re-presentment details ';
    p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
    ,
                                               v_complete_status, p_user_id, '7.15', p_file_name);

    v_start_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    IF v_file_type = 'INC' THEN
        UPDATE cs_rupay_intemp
        SET
            process_id = v_process_id;                
                
                --harmonization start

        sp_offline_void_reversal(p_process_id => v_process_id, p_user_id => p_user_id, p_out => p_out);
               --harmonization end
        INSERT INTO cs_rupay_in
            SELECT
                *
            FROM
                cs_rupay_intemp
            WHERE
                nvl(de024, 0) NOT IN (
                    670,
                    671
                );

        IF SQL%rowcount > 0 THEN
            v_complete_status := 'YES';
        ELSE
            v_complete_status := 'NO';
        END IF;

        v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
        v_activity_log := 'Movement of successful records for file type INC';
        p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
        ,
                                                   v_complete_status, p_user_id, '7.16', p_file_name);

        v_start_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    END IF;

    SELECT
        COUNT(*),  -- ap 11aug18
        SUM(de004)
    INTO
        v_txn_cnt,
        v_txn_amt
    FROM
        cs_rupay_intemp
    WHERE
        process_id = v_process_id
        AND nvl(de024, 0) NOT IN (
            670,
            671
        );

    INSERT INTO cs_filemaster (
        process_id,
        file_name,
        file_description,
        process_date,
        process_time,
        transaction_count,
        transaction_amount,
        user_id,
        network,
        file_priority,
        file_date
    ) VALUES (
        v_process_id,
        p_file_name,
        v_file_description,
        sysdate,
        to_char(sysdate, 'HH24:MI:SS'),
        v_txn_cnt,
        v_txn_amt,
        p_user_id,
        v_netwk,
            CASE
                WHEN v_seq_flag = 'Y' THEN
                    v_file_seq
            END,
        v_file_gen_date
    );

    IF SQL%rowcount > 0 THEN
        v_complete_status := 'YES';
    ELSE
        v_complete_status := 'NO';
    END IF;

    v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    v_activity_log := 'Completion Entry into CS_FILEMASTER table';
    p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
    ,
                                               v_complete_status, p_user_id, '7.17', p_file_name);

    v_start_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
        ---file process alert----
    p_file_response := '05, '
                       || p_file_name
                       || ' '
                       || v_file_description
                       || ' is processed successfully';
    v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    v_activity_log := 'File Process Alert';
    p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
    ,
                                               'YES', p_user_id, '7.18', p_file_name);

    dbms_output.put_line(p_file_response);
    UPDATE cs_filerollback
    SET
        process_complete = 'YES'
    WHERE
        process_id = v_process_id;

    IF SQL%rowcount > 0 THEN
        v_complete_status := 'YES';
    ELSE
        v_complete_status := 'NO';
    END IF;

    v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    v_activity_log := ' Process completion flag updation into CS_FILEROLLBACK table';
    p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
    ,
                                               v_complete_status, p_user_id, '7.19', p_file_name);

END IF; --end of file check file_cnt

        END IF;   --end of file types

EXCEPTION
 when v_offline_exp then
         v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Offline table entry Check';
            p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date
            , v_end_date,
                                                       'NO', p_user_id, '7.20', p_file_name);
                                                       
--            rollback;                                           

            BEGIN
                SELECT
                    alert_msg
                INTO v_alert_msg
                FROM
                    cs_config_alert_msg
                WHERE
                    alert_code = 12
                    AND display_source = 'T';

            EXCEPTION
                WHEN OTHERS THEN
                    v_alert_msg := NULL;
            END;

            p_file_response := '04, ' || v_alert_msg;
          --  EXECUTE IMMEDIATE 'truncate table cs_rupay_intemp';

    WHEN invalid_parameter THEN
        v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
        v_activity_log := 'Parameter Check';
        p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
        ,
                                                   'NO', p_user_id, '7.21', p_file_name);

        BEGIN
            SELECT
                alert_msg
            INTO v_alert_msg
            FROM
                cs_config_alert_msg
            WHERE
                alert_code = 12
                AND display_source = 'T';

        EXCEPTION
            WHEN OTHERS THEN
                v_alert_msg := NULL;
        END;

        p_file_response := '04, ' || v_alert_msg;
    WHEN file_updation THEN
        v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
        v_activity_log := 'File updation into cs_rupay_intemp';
        p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
        ,
                                                   'NO', p_user_id, '7.22', p_file_name);

        BEGIN
            SELECT
                alert_msg
            INTO v_alert_msg
            FROM
                cs_config_alert_msg
            WHERE
                alert_code = 12
                AND display_source = 'T';

        EXCEPTION
            WHEN OTHERS THEN
                v_alert_msg := NULL;
        END;

        p_file_response := '04, ' || v_alert_msg;
    WHEN processid_update_fail THEN
        v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
        v_activity_log := 'Creation and application of process ID';
        p_cs_processlogmaster(v_process_id, 'RuPay Settlment file process', v_activity_log, v_start_date, v_end_date
        ,
                                                   'NO', p_user_id, '7.3', p_file_name);
                                                  
                                                   dbms_output.put_line('Before insert 5');

        BEGIN
            SELECT
                alert_msg
            INTO v_alert_msg
            FROM
                cs_config_alert_msg
            WHERE
                alert_code = 12
                AND display_source = 'T';

        EXCEPTION
            WHEN OTHERS THEN
                v_alert_msg := NULL;
        END;

        p_file_response := '04, ' || v_alert_msg;
    WHEN OTHERS THEN
        v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
        v_err_msg := 'Error Occurred Msg :'
                     || sqlerrm
                     || ' code :'
                     || sqlcode;
                     --|| dbms_utility.format_error_backtrace;

        p_cs_processlogmaster(v_process_id, 'ERROR IN SETTLEMENT_PROCESS  ', v_err_msg, v_start_date, v_end_date
        ,
                                                   'NO', NULL, '6.34', p_file_name);

        SELECT
            COUNT(1)
        INTO v_roll_count
        FROM
            cs_filerollback
        WHERE
            process_id = v_process_id;

        IF v_roll_count > 0 THEN
            NULL;
        ELSE
            INSERT INTO cs_filerollback (
                process_id,
                file_name,
                start_date_time,
                end_date_time,
                user_id,
                main_activity_id
            ) VALUES (
                v_process_id,
                p_file_name,
                to_char(sysdate, 'DDMMYYYY HH24:MI:SS'),
                to_char(sysdate, 'DDMMYYYY HH24:MI:SS'),
                p_user_id,
                '7'
            );

        END IF;

        settlement_rollback_procedure(p_file_name, v_process_id, p_file_response);
        BEGIN
            SELECT
                alert_msg
            INTO v_alert_msg
            FROM
                cs_config_alert_msg
            WHERE
                alert_code = 12
                AND display_source = 'T';

        EXCEPTION
            WHEN OTHERS THEN
                v_alert_msg := NULL;
        END;

        p_file_response := '04, ' || v_alert_msg;
        EXECUTE IMMEDIATE 'truncate table cs_rupay_intemp';
END settlement_process
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE settlement_rollback_procedure(p_file_name character varying, p_process_id character varying, OUT p_file_response character varying)
 SECURITY DEFINER
AS $procedure$

        whr_condition        VARCHAR2(4000) := NULL;
        sql_stmt             VARCHAR2(4000) := NULL;
        v_start_date         VARCHAR2(50) := NULL;
        v_file_type          VARCHAR2(30) := NULL;
        v_activity_log       VARCHAR2(500) := NULL;
        v_end_date           VARCHAR2(30) := NULL;
        v_file_description   VARCHAR2(100) := NULL;
        v_file_code          VARCHAR2(30) := NULL;
        v_netwk              VARCHAR2(30) := NULL;
        v_process_id         VARCHAR2(100) := NULL;
        v_user_id            VARCHAR2(100) := NULL;
		v_complete_status    VARCHAR2(10) := NULL;
		v_err_msg            varchar2(100);
    BEGIN
        v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
        SELECT
            file_type,
            file_code,
            file_name_description,
            network
        INTO
            v_file_type,
            v_file_code,
            v_file_description,
            v_netwk
        FROM
            cs_config_filenamemaster
        WHERE
            file_code = substr(p_file_name,1,2);

        dbms_output.put_line('file_code:='
                               || v_file_code
                               || 'File_Type:='
                               || v_file_type);
        dbms_output.put_line('File_Type:=' || v_file_type);
        IF
            v_file_type IN (
                'INC',
                'ACK',
                'WEBACK',
                'AUTOSET'
            )
        THEN
            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_filemaster
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback - Deletion of completion entry from CS_FILEMASTER table';
           p_cs_processlogmaster(p_process_id,'RuPay Rollback settlment file process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.15',p_file_name);

          
                      v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            

                         for cur_rec in (select * 
                            from aswt_switch_txn_authrization a 
                            join card_detail cd on cd.hash_card_number = a.f002
                            where a.cs_process_id = p_process_id) loop
                          
                  update account_details ac 
                  set ac.hold_balance =ac.hold_balance + (cur_rec.f004/100),
                         current_balance =ac.current_balance + (cur_rec.f004/100)    
                        where ac.account_number =cur_rec.prep_account_number
                       and ac.wallet_id  = cur_rec.wallet_id;                                               
                            
                 end loop;           
                   

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'updation bal in account detail';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.14',p_file_name);

          
          
            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_manual_adjustment
            WHERE
                cs_process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of tip -surcharge - Refund from cs_manual_adjustment table';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.14',p_file_name);

DBMS_OUTPUT.PUT_LINE('BEFORE START LOOP');

               --harmonization rollback start
                for cur_rec in(select * from cs_rupay_in where process_id =p_process_id and de024='266' and mti='8144')
                loop
                
                
                delete from aswt_switch_txn_authrization WHERE F038=cur_rec.de038 AND F037=substr(cur_rec.de031,11,12) AND rtrim(F041)=cur_rec.de041
                 and txn_type='42000' and f039='00' and drcr='R' and (settle_flag='N' or settle_flag is null)
                 and sub_txn_type='1005'
                ;
                
                  DBMS_OUTPUT.PUT_LINE('REVERSAL DELETE AUTH%%'||SQL%ROWCOUNT);

                COMMIT;
                DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
                
                UPDATE ASWT_SWITCH_TXN_AUTHRIZATION SET DRCR='D' ,sub_txn_type=null WHERE  F038=cur_rec.de038 AND F037=substr(cur_rec.de031,11,12) AND rtrim(F041)=cur_rec.de041
                and txn_type='21000' and f039='00' and drcr='R' and (settle_flag='N' or settle_flag is null);
              
                DBMS_OUTPUT.PUT_LINE('AUTH%%'||SQL%ROWCOUNT);
                COMMIT;
                end loop;
               --harmonization rollback end
               
                                                           DBMS_OUTPUT.PUT_LINE('AFTER END LOOP');

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_rupay_in
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of incoimng data from CS_RUPAY_IN table';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.13',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE cs_rupay_og b
            SET
                b.rep_flag = NULL,
                b.rep_fullind = NULL,
                b.rep_adj_amt = NULL,
                b.rep_process_id = NULL
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of Re-presentment details update from CS_RUPAY_OG table ';
           p_cs_processlogmaster(p_process_id,'RuPay ACK and WEBACK file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.12',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE cs_rupay_intemp cs
            SET
                cs.cs_host_recon_flag = NULL,
                cs.cs_host_recon_date = NULL,
                cs.cs_host_recon_diff = NULL,
                cs.cs_host_mcc = NULL,
                cs.cs_host_recon_rrn = NULL
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of tip and surcharge details update from CS_RUPAY_INTEMP table ';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.11',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE aswt_switch_txn_authrization b
            SET
                b.settle_flag = NULL,
                b.settle_date = NULL,
                b.cs_id = NULL,
                b.cs_process_id = NULL
            WHERE
                b.cs_process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of settlement details update from ASWT_SWITCH_TXN_AUTHRIZATION table ';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.10',p_file_name);
		   
		   ----------------------------------------------------------------------------------------------------------------------------------------           

            v_start_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
            DELETE FROM aswt_switch_txn_offline
            WHERE
                cs_process_id = p_process_id
                AND tlf_flag = 'Y';
                
                dbms_output.put_line('rows_deleted '||sql%rowcount);

            UPDATE aswt_switch_txn_offline b
            SET
                b.settle_flag = NULL,
                b.settle_date = NULL,
                b.cs_id = NULL,
                b.cs_process_id = NULL
            WHERE
                b.cs_process_id = p_process_id;
                
                 dbms_output.put_line('rows_updated '||sql%rowcount);

            IF SQL%rowcount > 0 THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of settlement details update from ASWT_SWITCH_TXN_OFFLINE table ';
            p_cs_processlogmaster(p_process_id, 'RuPay incoming file Rollback process', v_activity_log, v_start_date
            , v_end_date,
                                                       v_complete_status, v_user_id, '7.10.1', p_file_name);        
----------------------------------------------------------------------------------------------------------------------------------------
            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE aswt_raw_decline_queue b
            SET
                b.settle_flag = NULL,
                b.settle_date = NULL,
                b.cs_id = NULL,
                b.cs_process_id = NULL
            WHERE
                b.cs_process_id = p_process_id;

            IF SQL%rowcount > 0 THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of settlement details update from aswt_raw_decline_queue table ';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.10',p_file_name);
           
            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
           update harmonization_Exception_rpt e
           set e.settle_flag = NULL,
                e.settle_date = NULL,
                e.cs_id = NULL,
                e.cs_process_id = NULL,
                e.PRESENTMENT_FLAG = null
           where e.cs_process_id = p_process_id;    
           
           IF SQL%rowcount > 0 THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;
           
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of settlement details update from harmonization_Exception_rpt table ';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.10',p_file_name);
           
           
            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            
           delete from ASWT_SWITCH_TXN_AUTHRIZATION where cs_process_id = p_process_id and sub_txn_type = '1006';
           
           IF SQL%rowcount > 0 THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;
           
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of debit recoery details from ASWT_SWITCH_TXN_AUTHRIZATION table ';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.10',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_rupay_og
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of settle transactions received in AUTOSET and WEBACK file - delete from CS_RUPAY_OG table';
           p_cs_processlogmaster(p_process_id,'RuPay AUTOSET and WEBACK file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.9',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_rupay_ogtemp
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of unsettle records received through weback file  - delete from CS_RUPAY_OGTEMP table';
           p_cs_processlogmaster(p_process_id,'RuPay web file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.8',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');

 /* --RUPAY_1 Rollback
    whr_condition :=rupay_settlement_pkg.get_recon_whr_condition('RUPAY_1');
    -- whr_condition := get_recon_whr_condition('RUPAY_1');
    sql_stmt := 'Update CS_RUPAY_INTEMP t1            

Set (t1.BIN_MSG_TYPE, t1.DE026, t1.DE042,t1.DE043_MERCH_ADDR) =             

(select NULL, NULL, NULL, NULL from            

CS_RUPAY_ NETSWITCHA t2            

Where 1 = 1 ' || whr_condition || ')';

    EXECUTE IMMEDIATE sql_stmt;
    --RUPAY_2 Rollback
    whr_condition :=rupay_settlement_pkg.get_recon_whr_condition('RUPAY_2');
    --whr_condition := get_recon_whr_condition('RUPAY_2');
    sql_stmt := 'Update CS_RUPAY_OGTEMPEMP t1         

Set (t1.DE026, t1.DE042, t1.DE093,t1.PDS0159_SETT_DATE,t1.PDS0390,t1.DE005,t1.DE050,t1.DE009,t1.DE006,t1.DE010,t1.DE051,t1.PDS0146_FEE_TYPE_1,t1.PDS0146_FEE_TYPE_2,t1.PDS0146_FEE_TYPE_3,t1.PDS0146_FEE_TYPE_4,t1.PDS0146_FEE_TYPE_5,t1.PDS0146_INTCHG_CAT,t1.PDS0146_INTCHG_CAT_1,t1.PDS0146_INTCHG_CAT_2,t1.PDS0146_INTCHG_CAT_3,t1.PDS0146_INTCHG_CAT_4,t1.PDS0146_INTCHG_CAT_5,t1.PDS0146_FEE_AMT_1,t1.PDS0146_FEE_AMT_2,t1.PDS0146_FEE_AMT_3,t1.PDS0146_FEE_AMT_4,t1.PDS0146_FEE_AMT_5,t1.PDS0146_DRCR_1,t1.PDS0146_DRCR_2,t1.PDS0146_DRCR_3,t1.PDS0146_DRCR_4,t1.PDS0146_DRCR_5,t1.PDS0146_CURR_CODE_1,PDS0146_CURR_CODE_2,PDS0146_CURR_CODE_3,PDS0146_CURR_CODE_4,PDS0146_CURR_CODE_5,t1.IDE003,t1.IDE010,t1.PDS0005_REJ_RSNCODE_TXN,t1.IDE006)          

= (select NULL, NULL, NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL from cs_rupay_intemp  t2         

Where 1 = 1 ' || whr_condition || ')';
    EXECUTE IMMEDIATE sql_stmt;
    --RUPAY_3 Rollback
    whr_condition :=rupay_settlement_pkg.get_recon_whr_condition('RUPAY_3');
    --whr_condition := get_recon_whr_condition('RUPAY_3');
    sql_stmt := 'Update CS_RUPAY_OGTEMPEMP t1            

Set (t1.DE026, t1.DE042, t1.DE093,t1.PDS0159_SETT_DATE,t1.PDS0390,t1.DE005,t1.DE050,t1.DE009,t1.DE006,t1.DE010,t1.DE051,t1.PDS0146_FEE_TYPE_1,t1.PDS0146_FEE_TYPE_2,t1.PDS0146_FEE_TYPE_3,t1.PDS0146_FEE_TYPE_4,t1.PDS0146_FEE_TYPE_5,t1.PDS0146_INTCHG_CAT,t1.PDS0146_INTCHG_CAT_1,t1.PDS0146_INTCHG_CAT_2,t1.PDS0146_INTCHG_CAT_3,t1.PDS0146_INTCHG_CAT_4,t1.PDS0146_INTCHG_CAT_5,t1.PDS0146_FEE_AMT_1,t1.PDS0146_FEE_AMT_2,t1.PDS0146_FEE_AMT_3,t1.PDS0146_FEE_AMT_4,t1.PDS0146_FEE_AMT_5,t1.PDS0146_DRCR_1,t1.PDS0146_DRCR_2,t1.PDS0146_DRCR_3,t1.PDS0146_DRCR_4,t1.PDS0146_DRCR_5,t1.PDS0146_CURR_CODE_1,PDS0146_CURR_CODE_2,PDS0146_CURR_CODE_3,PDS0146_CURR_CODE_4,PDS0146_CURR_CODE_5,t1.IDE003,t1.IDE010,t1.PDS0005_REJ_RSNCODE_TXN,t1.IDE006)             

= (select NULL,NULL, NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL from cs_rupay_intemp  t2         

Where 1 = 1 '|| whr_condition || ')';

    EXECUTE IMMEDIATE sql_stmt;
    --LOFO updation Rollback

    UPDATE cs_rupay_intemp SET lofo_indicator = NULL;
    --Header1 record movement Rollback
   IF SQL%rowcount        >0 THEN
        v_complete_status   :='YES';
      ELSE
        v_complete_status:='NO';
      END IF;

 v_end_date     := to_char(sysdate, 'DDMMYYYY HH24:MI:SS');
    v_activity_log := 'Rollback to update lofo indicator';
   p_cs_processlogmaster(p_process_id, 'RuPay Rollback acknowledgment file process', v_activity_log, v_start_date, v_end_date, v_complete_status,'','7.18'); */

    -- need to be revisited above commented code
            UPDATE cs_rupay_intemp
            SET
                pds0641 = NULL,
                ide004 = NULL,
                pds0122 = NULL,
                ide005 = NULL,
                ide003 = NULL
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of header details from cs_rupay_intemp table ';
           p_cs_processlogmaster(p_process_id,'RuPay WEBACK , ACK , INC , AUTOSET  file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.6',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE cs_rupay_intemp cs
            SET
                cs.bin_msg_type = NULL,
                cs.de018 = NULL,
                cs.de042 = NULL,
                cs.de043_merch_addr = NULL
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of merchant details updated from CS_RUPAY_NETSWITCHA table ';
           p_cs_processlogmaster(p_process_id,'RuPay incoming file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.5',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE cs_rupay_intemp
            SET
                lofo_indicator = NULL
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of lofo details from cs_rupay_intemp table ';
           p_cs_processlogmaster(p_process_id,'RuPay WEBACK , ACK , INC , AUTOSET  file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.4',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_hdrtrl
            WHERE
                process_id = p_process_id;
    -- Continuation of field from header record Rollback

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of Header and Trailer record movement CS_HDRTRL table ';
           p_cs_processlogmaster(p_process_id,'RuPay WEBACK , ACK , INC , AUTOSET  file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.3',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            DELETE FROM cs_rupay_ack
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of ackonwlegement details from CS_RUPAY_ACK table ';
           p_cs_processlogmaster(p_process_id,'RuPay WEBACK , ACK file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.2',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            UPDATE cs_filerollback
            SET
                rollback_complete = 'YES'
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback of file process completion flag updated in CS_FILEROLLBACK table ';
           p_cs_processlogmaster(p_process_id,'RuPay settlement file Rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,v_user_id,'7.1',p_file_name);

            v_start_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');

  --########################################################################################  
        ELSIF v_file_type = 'ACQID' THEN

    -- delete from  CS_RUPAY_ACQID  where process_id=p_process_id;
            DELETE FROM cs_rupay_acqid_history
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete from cs_rupay_acqid_history ';
           p_cs_processlogmaster(p_process_id,'RuPay ACQID file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_hdrtrl
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete Header and Trailer record from CS_HDRTRL table ';
           p_cs_processlogmaster(p_process_id,'RuPay ACQID file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_filemaster
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback  - Delete from cs_filemaster ';
           p_cs_processlogmaster(p_process_id,'RuPay ACQID file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            UPDATE cs_filerollback
            SET
                rollback_complete = 'YES'
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Update into cs_filerollback to YES';
           p_cs_processlogmaster(p_process_id,'RuPay ACQID file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

--##############################################################################################

        ELSIF v_file_type = 'BIN' THEN
    --DELETE FROM CS_RUPAY_BIN WHERE PROCESS_ID = p_process_id;
            DELETE FROM cs_hdrtrl
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File Rollback - Delete from CS_HDRTRL';
           p_cs_processlogmaster(p_process_id,'RuPay BIN file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_rupay_bin_history
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File Rollback - Delete from cs_rupay_bin_history';
           p_cs_processlogmaster(p_process_id,'RuPay BIN file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_rupay_pid
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File Rollback - Delete from cs_rupay_pid';
           p_cs_processlogmaster(p_process_id,'RuPay BIN file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_filemaster
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File Rollback - Delete from cs_filemaster';
           p_cs_processlogmaster(p_process_id,'RuPay BIN file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            UPDATE cs_filerollback
            SET
                rollback_complete = 'YES'
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File Rollback - Update into cs_filerollback to YES';
           p_cs_processlogmaster(p_process_id,'RuPay BIN file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

 --#################################################################################################   

        ELSIF v_file_type = 'RAW' THEN
    -- delete from   CS_RUPAY_NETSWITCHTEMP  where process_id=p_process_id;
            DELETE FROM cs_rupay_netswitcha
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete from cs_rupay_netswitcha';
           p_cs_processlogmaster(p_process_id,'RuPay RAW file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

             for cur_rec in (select * from cs_rupay_netswitchd
            WHERE
                process_id = p_process_id)
                loop
--               DELETE FROM
--                    offline_csu_update
--                WHERE
--                    f037 = cur_rec.DE037
--                    AND f041 = cur_rec.de041
--                    AND INT_MTI ='0420'
--                    AND int_void_flag is null;
        
        --    UPDATE OFFLINE_CSU_UPDATE SET  INT_VOID_FLAG=null  WHERE F037=cur_rec.DE037 AND F041=cur_rec.de041 AND INT_VOID_FLAG='R';    
            UPDATE ASWT_SWITCH_TXN_AUTHRIZATION SET DRCR='D' , sub_txn_type=null WHERE F038=cur_rec.de038 AND F037=cur_rec.DE037 AND F041=cur_rec.de041 AND DRCR='R';
             
             
             delete from aswt_switch_txn_authrization WHERE F038=cur_rec.de038 AND F037=cur_rec.de037 AND rtrim(F041)=cur_rec.de041 and drcr='R' and txn_type='42000' and mti ='0420' and f039='00' and sub_txn_type='1003';
             
             end loop;

            DELETE FROM cs_rupay_netswitchd
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete from cs_rupay_netswitchd';
           p_cs_processlogmaster(p_process_id,'RuPay RAW file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_hdrtrl
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete Header and Trailer record movement';
           p_cs_processlogmaster(p_process_id,'RuPay RAW file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_filemaster
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback  - Delete from CS_FILEMASTER table';
           p_cs_processlogmaster(p_process_id,'RuPay RAW file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            UPDATE cs_filerollback
            SET
                rollback_complete = 'YES'
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Update rollback flag into CS_FILEROLLBACK table';
           p_cs_processlogmaster(p_process_id,'RuPay RAW file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

--###############################################################################################################

        ELSIF v_file_type = 'SETAUTH' THEN
            DELETE FROM cs_rupay_network_fee
            WHERE
                file_name = p_file_name;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete from CS_RUPAY_NETWORK_FEE table';
           p_cs_processlogmaster(p_process_id,'RuPay SETAUTH file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_hdrtrl
            WHERE
                file_name = p_file_name;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Delete from CS_HDRTRL table';
           p_cs_processlogmaster(p_process_id,'RuPay SETAUTH file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            UPDATE cs_rupay_netswitcha b
            SET
                b.mti = NULL,
                b.de024 = NULL,
                b.in_process_id = NULL,
                b.pds0146_fee_type_2 = NULL,
                b.pds0146_fee_amt_2 = NULL,
                b.pds0146_drcr_2 = NULL,
                b.pds0146_curr_code_2 = NULL,
                b.pds0159_sett_date = NULL
            WHERE
                in_process_id = p_process_id;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'File rollback - Update CS_RUPAY_NETSWITCHA Table';
           p_cs_processlogmaster(p_process_id,'RuPay SETAUTH file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            DELETE FROM cs_filemaster
            WHERE
                file_name = p_file_name;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := 'Rollback to delete file process completion entry from CS_FILEMASTER table';
           p_cs_processlogmaster(p_process_id,'RuPay SETAUTH file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

            UPDATE cs_filerollback
            SET
                rollback_complete = 'YES'
            WHERE
                process_id = p_process_id;

            IF
                SQL%rowcount > 0
            THEN
                v_complete_status := 'YES';
            ELSE
                v_complete_status := 'NO';
            END IF;

            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_activity_log := ' File rollback to update rollback completion flag into CS_FILEROLLBACK table';
           p_cs_processlogmaster(p_process_id,'RuPay SETAUTH file rollback process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

        END IF;
  --00 is for success
  -- p_file_response:= 'ROLLBACK PROCESS DONE SUCCESSFULLY USER CAN UPLOAD FILE';

        v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
        v_activity_log := 'File rollback done successfully';
       p_cs_processlogmaster(p_process_id,'RuPay file rollback  process',v_activity_log,v_start_date,v_end_date,v_complete_status,'','7.18',p_file_name);

        p_file_response := '02';
    EXCEPTION
        WHEN OTHERS THEN
            v_end_date := TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS');
            v_err_msg := 'Error Occurred Msg :'|| sqlerrm|| ' code :'|| sqlcode;

           p_cs_processlogmaster(p_process_id,'ERROR IN settlement_rollback_procedure  ',v_err_msg,v_start_date,v_end_date,'NO',NULL,'6.34',p_file_name);

    END settlement_rollback_procedure$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION sf_get_chip_bal(p_hash_no character varying)
 RETURNS numeric
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$

v_chip_bal number := 0;
v_count  number;
begin


select count(1) 
into v_count
from card_detail cd 
join account_details ad on ad.account_number =cd.prep_account_number 
where cd.hash_card_number =p_hash_no
and upper(ad.wallet_identifier) = 'TRANSIT';

IF v_count > 0  then

select shadow_bal/100
into v_chip_bal
from aswt_switch_txn_authrization asta 
where f002 = p_hash_no
and f039 = '00'
and drcr in ('D','C','E')
and atm_flag !='2' 
order by sys_txn_date desc limit 1;

end if;

return v_chip_bal;

exception 
when others then 
return 0;

end$function$
;

CREATE OR REPLACE FUNCTION sf_last_txn_date(p_hash_card_no character varying)
 RETURNS timestamp without time zone
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
v_max_date date;
begin
select max(txn_date) into v_max_date from
(
SELECT  sys_txn_date   txn_date 
FROM
aswt_switch_txn_offline
WHERE
f039 = '00'
AND drcr ='D'
and txn_type = '23000'
and f002 = p_hash_card_no
UNION ALL
SELECT
sys_txn_date   txn_date 
FROM
aswt_switch_txn_authrization
WHERE
f039 = '00'
AND drcr in ('D','C')
and txn_type in ('21028','21000','21001')
and f002 = p_hash_card_no
UNION ALL
SELECT
date_time   txn_date  
FROM
digital_txn_authorization
where txn_type not in('91029','97029','97030')
and card_enc = p_hash_card_no)
;
return v_max_date;
exception 
when others then
   return null;
end$function$
;

CREATE OR REPLACE PROCEDURE sp_card_generation(p_bin character varying, p_sub_bin character varying, p_length numeric, OUT p_out character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

v_count number :=0;
v_seq_length number:= 0;
v_max_value number := 0;

begin

	select count(1)
	into v_count
	from cms_card_generation_master 
	where bin = p_bin and sub_bin = p_sub_bin;

  
   if  v_count = 0 then 
   
   v_seq_length := p_length - (length(p_bin)+length(p_sub_bin) + 1);   
  
  if v_seq_length <=0  then 
  
  	  p_out := '03';   
      p_msg := 'Invalid length for card :'||v_seq_length;
  
  return;
  end if;
 
   for y in 1 .. v_seq_length loop
	   
	 v_max_value := v_max_value||9;  
	   	  
   	
   end loop;
  
  
  dbms_output.put_line('v_max_value '||v_max_value);
   
 
    for x in 1 .. v_max_value loop
    
--  insert into cms_card_generation_master(id,bin,sub_bin,card_number,seq)
--  select card_generation_master_seq.nextval,p_bin,p_sub_bin,p_bin||p_sub_bin||lpad(x,v_seq_length,0)||LUHN(p_bin||p_sub_bin||lpad(x,v_seq_length,0)),x;

	 insert into cms_card_generation_master(id,bin,sub_bin,card_number,seq)
  select card_generation_master_seq.nextval,p_bin,p_sub_bin,p_bin||p_sub_bin||lpad(x,v_seq_length::int,'0')||LUHN((p_bin||p_sub_bin||lpad(x,v_seq_length::int,'0'))::number),x;
     
	    
   end loop;
    
     p_out := '00';   
     p_msg := 'Success';
   else
    
      p_out := '01';   
      p_msg := 'Card is already generated for given bin and sub bin';
   end if;

exception
when others then 
 p_out := '02';
 p_msg := 'Error !'||sqlerrm;

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_check_card_status(p_card character varying, p_pin_count_chk numeric, OUT p_out character varying, OUT p_out2 character varying)
 SECURITY DEFINER
AS $procedure$
    v_num      NUMBER := 1;
    v_count    NUMBER;
    v_count2   NUMBER;
    invalid_card EXCEPTION;
	
	v_pin_count number := 0;
    v_current_status varchar2(2);
	
BEGIN
    
	SELECT
        COUNT(*)
    INTO
        v_count
    FROM
        card_detail
    WHERE
        hash_card_number = p_card;

    IF
        v_count = 0
    THEN
        RAISE invalid_card;
    END IF;
    
    
    SELECT
        status
    INTO
        v_current_status
    FROM
        card_detail
    WHERE
        hash_card_number = p_card;
    
    
    SELECT
        COUNT(*)
    INTO
        v_count2
    FROM
        cms_card_detail_history
    WHERE
            new_pan = p_card
        AND
            status_flag = 'THL';

    IF
        v_count2 > 0
    THEN
        SELECT
            floor(date_part('day',trunc(SYSDATE) - trunc(insert_time))) number_of_days
        INTO
            v_num
        FROM
            cms_card_detail_history
        WHERE
                new_pan = p_card
            AND
                status_flag = 'THL'
            AND
                insert_time = (
                    SELECT
                        MAX(insert_time)
                    FROM
                        cms_card_detail_history
                    WHERE
                            new_pan = p_card
                        AND
                            status_flag = 'THL'
                );

    END IF;

    IF
        v_num = 0 and v_current_status = 'THL'
    THEN
        p_out := '01';
        p_out2 := 'Card is blocked';
    ELSE
        --PROC_CARD_TEMP_THL(p_card,'A',p_out, p_out2);
		 IF p_pin_count_chk = 1  then		 		 
		
		  select pin_try_count		  
		  into v_pin_count
		  from card_Detail cd
		  where hash_Card_number = p_card;
		  
		  IF v_pin_count <3 then
		  
		  update card_Detail
		  set pin_try_count = pin_try_count+1
		  where hash_Card_number = p_card;
		  
		 else 
		 
		 PROC_CARD_TEMP_THL(p_card,'THL',p_out, p_out2);
		 
		 return;
		 
		 end if;
		
        p_out := '00';
        p_out2 := 'Pin Counter Updated';
      else
	  
	    update card_Detail
		  set pin_try_count = 0
		  where hash_Card_number = p_card;
		  
		  
        p_out := '05';
        p_out2 := 'Pin Counter Resetted';   
		
    END IF;	 	
	end if;

EXCEPTION
    WHEN invalid_card THEN
        p_out := '02';
        p_out2 := 'Invalid Card Number';
    WHEN OTHERS THEN
        p_out := '03';
        p_out2 := 'Error: ' || sqlerrm;
        dbms_output.put_line('In Exception '
         || sqlcode
         || ' Error Message: '
         || sqlerrm);

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_check_wallet(p_hash_card character varying, p_pre_account_nuber character varying, p_product_id numeric, p_mcc character varying, p_amount numeric, p_txn_type numeric, OUT p_wallet numeric, OUT p_surcharge numeric, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 


v_mcc_cnt  number;
v_rest_cnt number;
v_wallet_cnt number;
v_zero_wallet  number;
v_surcharge_flag varchar2(2);
v_surcharge_type varchar2(50);
v_surcharge_value number:=0;
v_transit_count  number := 0;

invalid_card  exception;
invalid_mcc   exception;
invalid_wallet exception;
restricted_mcc exception;

begin


  
    select count(1)
   into v_mcc_cnt
   from mcc_master mcc where mcc.mcc_code = p_mcc;      
    
   if v_mcc_cnt = 0 then   
      raise invalid_mcc;
   end if;
    
  select count(1)
   into v_rest_cnt
   from mcc_master mcc where mcc.mcc_code = p_mcc   
    and not exists (select 1 from cms_product cp 
                   join mcc_group_mapping m on cp.mcc_restrict_grp_id=m.mcc_grp_id
                   where cp.id = p_product_id
                   and m.mcc_code = mcc.mcc_code); 
                  
    if v_rest_cnt = 0 then   
      raise restricted_mcc;
   end if;               
  
  
     select  is_surcharge, surcharge_type, surcharge_value 
   into  v_surcharge_flag, v_surcharge_type, v_surcharge_value
   from mcc_master mcc where mcc.mcc_code = p_mcc  ; 
  
 -- 	dbms_output.put_line(v_surcharge_flag ||' v_surcharge_flag ');
   if upper(v_surcharge_flag) = 'Y' then
	  if upper(v_surcharge_type) = 'PERCENTAGE' then
	--	  dbms_output.put_line(v_surcharge_type ||' v_surcharge_type ');
         select round((p_amount * v_surcharge_value / 100), 2)
		 into p_surcharge from dual;
	--	dbms_output.put_line(p_surcharge ||' p_surcharge ');
	  else
		p_surcharge := v_surcharge_value;
	  end if;
   else
      p_surcharge := 0;
   end if;
  
   select count(1) 
   into v_zero_wallet
   from account_details ad 
   where account_number = p_pre_account_nuber
   and wallet_id = 0;
 
   if v_zero_wallet = 1 then 
      p_wallet := 0;
      p_msg := 'Success';
      return;
   end if;
   
   select count(1)--wm.wallet_id ,wm.key_identifier,wpm.priority_order,balance_check_wallet('p_hash_card',wm.key_identifier) 
   into v_wallet_cnt
   from mcc_master mm 
   join mcc_group_mapping mgp on mgp.mcc_code  = mm.mcc_code 
   join mcc_groups mg on mg.mcc_grp_id  = mgp.mcc_grp_id 
   join wallet_master wm on wm.mcc_grp_id  = mg.mcc_grp_id 
   join wallet_profile_mapping wpm on wpm.wallet_id  = wm.wallet_id 
   join prd_wallet_profile pwp on pwp.wallet_profile_id  = wpm.wallet_profile_id 
   join account_details ad on ad.wallet_id  = wm.wallet_id and ad.account_number  = p_pre_account_nuber
   where mm.mcc_code  = p_mcc
   and pwp.product_id = p_product_id
   --order by wpm.priority_order
   ;
   
  
   IF v_wallet_cnt = 0  then
	raise invalid_mcc;
   end if;
  
  
  
if p_txn_type in (21028,21029,41029,41028) then


  select count(1)
    into v_transit_count
	 from mcc_master mm 
	join mcc_group_mapping mgp on mgp.mcc_code  = mm.mcc_code 
	join mcc_groups mg on mg.mcc_grp_id  = mgp.mcc_grp_id 
	join wallet_master wm on wm.mcc_grp_id  = mg.mcc_grp_id 
	join wallet_profile_mapping wpm on wpm.wallet_id  = wm.wallet_id 
	join prd_wallet_profile pwp on pwp.wallet_profile_id  = wpm.wallet_profile_id 
	join account_details ad on ad.wallet_id  = wm.wallet_id and ad.account_number  = p_pre_account_nuber
	where mm.mcc_code  = p_mcc
	and pwp.product_id = p_product_id
    and upper(ad.wallet_identifier) in ('TRANSIT','OFFLINE')
   and upper(wm.is_transit_enable)  = 'YES';
  
  if v_transit_count = 0 then
  raise restricted_mcc;
  end if;
  
   select wm.wallet_id 
    into p_wallet
	 from mcc_master mm 
	join mcc_group_mapping mgp on mgp.mcc_code  = mm.mcc_code 
	join mcc_groups mg on mg.mcc_grp_id  = mgp.mcc_grp_id 
	join wallet_master wm on wm.mcc_grp_id  = mg.mcc_grp_id 
	join wallet_profile_mapping wpm on wpm.wallet_id  = wm.wallet_id 
	join prd_wallet_profile pwp on pwp.wallet_profile_id  = wpm.wallet_profile_id 
	join account_details ad on ad.wallet_id  = wm.wallet_id and ad.account_number  = p_pre_account_nuber
	where mm.mcc_code  = p_mcc
	and pwp.product_id = p_product_id
    and upper(ad.wallet_identifier) in ('TRANSIT','OFFLINE')
   and upper(wm.is_transit_enable)  = 'YES';
	
    p_msg := 'Success';
  
  return ;
  end if;
   
   FOr x in ( select wm.wallet_id ,
			 wm.key_identifier,
			 wpm.priority_order,	
			 wm.is_transit_enable ,
			 balance_check_wallet(p_hash_card,wm.wallet_id)  bal    
	 from mcc_master mm 
	join mcc_group_mapping mgp on mgp.mcc_code  = mm.mcc_code 
	join mcc_groups mg on mg.mcc_grp_id  = mgp.mcc_grp_id 
	join wallet_master wm on wm.mcc_grp_id  = mg.mcc_grp_id 
	join wallet_profile_mapping wpm on wpm.wallet_id  = wm.wallet_id 
	join prd_wallet_profile pwp on pwp.wallet_profile_id  = wpm.wallet_profile_id 
	join account_details ad on ad.wallet_id  = wm.wallet_id and ad.account_number  = p_pre_account_nuber
	where mm.mcc_code  = p_mcc
	and pwp.product_id = p_product_id
	--and upper(ad.wallet_identifier) not in ('TRANSIT','OFFLINE')
	order by wpm.priority_order) loop
	
	-- dbms_output.put_line(x.bal||' current bal '||p_amount);
	
		 if x.bal >= p_amount+p_surcharge  then 
	 
				-- dbms_output.put_line(x.wallet_id||' p_wallet ');
	 
				p_wallet := x.wallet_id;
				p_msg := 'Success';	 
	
				 --dbms_output.put_line(p_wallet||' p_wallet ');
				return;
			else
				continue;
				null;
			end if;		
--		else  -- this line added by vishal to return transit wallet 
--			p_wallet := x.wallet_id;  -- this line added by vishal to return transit wallet 
--			p_msg := 'Success';  -- this line added by vishal to return transit wallet 
--			return;  -- this line added by vishal to return transit wallet 
--		end if;  -- this line added by vishal to return transit wallet 
		
	end loop;     
	
	IF p_wallet is null  then
     raise invalid_wallet;
     end if;
   
exception
when invalid_mcc then
p_msg := 'Invalid Mcc';
when restricted_mcc then
p_msg := 'Restricted Mcc';
when invalid_wallet then
p_msg := 'Insufficient Fund';
when others then 
dbms_output.put_line('p_msg :' ||p_msg);
p_msg := 'Fail'||sqlerrm;
 dbms_output.put_line('p_msg :' ||p_msg);
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_d_dup_check(p_mobile_no numeric, p_product_id numeric, p_req_type character varying, OUT p_msg_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

 v_prd_count   number;
 v_virtual_cnt  number;
 v_virtual_physical_cnt  number;
 V_gift_card varchar2(5);
 V_card_count  number;
 v_req_type varchar2(5):= p_req_type;
 

begin

	 select count(1) 
	 into v_prd_count
	 from prd_bin_profile b
	 where b.product_id  = p_product_id;
	
	select count(1) 
	into v_virtual_cnt
	from  cms_product cp 
	where cp.base_product_id = p_product_id;
	

   select count(1) 
	into v_virtual_physical_cnt
	from  cms_product cp 
	where cp.id = p_product_id
	and base_product_id is not null
   ;
   

  if v_prd_count = 0  then
  
  p_msg_code := '01';
  p_msg := 'Product Not Found';
  return ;
  end if;
  
  select  upper(is_gift_card)
	 into V_gift_card
	 from prd_bin_profile b
	 where b.product_id  = p_product_id;
	

--  if v_req_type = 'L' and v_virtual_physical_cnt = 1  then 	
--  v_req_type = 'A';
--  end if;
  
  
--  IF v_req_type = 'F' and v_virtual_physical_cnt = 1  then
--  
--     p_msg_code := '02';
--     p_msg := 'Virtual to Physical Card cannot be linked from File';
--     
--  return;
 
   IF v_req_type = 'U'  then 
  
   
   if V_gift_card = 'Y' then 
   
  select sum(cnt)
    into v_card_count
    from
  (select count(distinct prep_account_number) cnt 
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
   --and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   )
   ;
   
  
  dbms_output.put_line('v_card_count gift:'|| v_card_count);
  
   if v_card_count < 4 then
   
    p_msg_code := '00';
     p_msg := 'Success';
     return;
  
  else
  
    p_msg_code := '03';
    p_msg := 'More than 4 Min Kyc Cards are present for same mobile number';
    
    return;
   end if; 
    
  else
  
  
   select sum(cnt)
   into v_card_count
   from 
  (select count(distinct prep_account_number) cnt  
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
    union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
   ) 
   ;
  
    dbms_output.put_line('v_card_count full:'|| v_card_count);
   
   if v_card_count = 0 then
   
     p_msg_code := '00';
     p_msg := 'Success';
     return;
  
   else
   
    p_msg_code := '04';
    p_msg := 'Full KYC Card already exists'; 
    return;

   end if;    
  
  end if;
  
  
   elsif v_req_type = 'RA'  then 
  
   
   if V_gift_card = 'Y' then 
   
  select sum(cnt)
    into v_card_count
    from
  (select count(distinct prep_account_number) cnt 
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   )
   ;
   
  
  dbms_output.put_line('v_card_count gift:'|| v_card_count);
  
   if v_card_count <= 4 then
   
    p_msg_code := '00';
     p_msg := 'Success';
     return;
  
  else
  
    p_msg_code := '03';
    p_msg := 'More than 4 Min Kyc Cards are present for same mobile number';
    
    return;
   end if; 
    
  else
  
  
   select sum(cnt)
   into v_card_count
   from 
  (select count(distinct prep_account_number) cnt  
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
   --and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
    union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
   ) 
   ;
  
    dbms_output.put_line('v_card_count full:'|| v_card_count);
   
   if v_card_count <= 1 then
   
     p_msg_code := '00';
     p_msg := 'Success';
     return;
  
   else
   
    p_msg_code := '04';
    p_msg := 'Full KYC Card already exists'; 
    return;

   end if;    
  
  end if; 
 
   elsif v_req_type = 'RB'  then 
  
   
   if V_gift_card = 'Y' then 
   
  select sum(cnt)
    into v_card_count
    from
  (select count(distinct prep_account_number) cnt 
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   )
   ;
   
  
  dbms_output.put_line('v_card_count gift:'|| v_card_count);
  
   if v_card_count < 4 then
   
    p_msg_code := '00';
     p_msg := 'Success';
     return;
  
  else
  
    p_msg_code := '03';
    p_msg := 'More than 4 Min Kyc Cards are present for same mobile number';
    
    return;
   end if; 
    
  else
  
  
   select sum(cnt)
   into v_card_count
   from 
  (select count(distinct prep_account_number) cnt  
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
    union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
   ) 
   ;
  
    dbms_output.put_line('v_card_count full:'|| v_card_count);
   
   if v_card_count = 0 then
   
     p_msg_code := '00';
     p_msg := 'Success';
     return;
  
   else
   
    p_msg_code := '04';
    p_msg := 'Full KYC Card already exists'; 
    return;

   end if;    
  
  end if;
 
 elsif v_req_type = 'AC'  then 
   
   if V_gift_card = 'Y' then 
   
  select sum(cnt)
    into v_card_count
    from
  (select count(distinct prep_account_number) cnt 
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   )
   ;
   
  
  dbms_output.put_line('v_card_count gift:'|| v_card_count);
  
   if v_card_count <= 4 then
   
    p_msg_code := '00';
     p_msg := 'Success';
     return;
  
  else
  
    p_msg_code := '03';
    p_msg := 'More than 4 Min Kyc Cards are present for same mobile number';
    
    return;
   end if; 
    
  else
  
  
   select sum(cnt)
   into v_card_count
   from 
  (select count(distinct prep_account_number) cnt  
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
    union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
   ) 
   ;
  
    dbms_output.put_line('v_card_count full:'|| v_card_count);
   
   if v_card_count <=1 then
   
     p_msg_code := '00';
     p_msg := 'Success';
     return;
  
   else
   
    p_msg_code := '04';
    p_msg := 'Full KYC Card already exists'; 
    return;

   end if;    
  
  end if;


  
  elsif v_req_type = 'A'  then 
  
   if V_gift_card = 'Y'  then 
  
  select sum(cnt)
    into v_card_count
    from
  (select count(distinct prep_account_number) cnt 
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status not in ('PHL') 
   and exists (select 1 from cms_product cp where cp.id = cd.product_id and cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
   and exists (select 1 from cms_product cp where cp.id = cd.product_id and cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   )
   ;
  
  dbms_output.put_line('v_card_count gift:'|| v_card_count);
  
   if v_card_count < 4 then
   
     p_msg_code := '00';
     p_msg := 'Success';
  return;
   else
   
    p_msg_code := '03';
    p_msg := 'More than 4 Min Kyc Cards are present for same mobile number';
   return;

   end if;

  
  else
  
  select sum(cnt)
   into v_card_count
   from 
  (select count(distinct prep_account_number) cnt  
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status not in ('PHL') 
    and exists (select 1 from cms_product cp where cp.id = cd.product_id and cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
  
    union all

    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
   and exists (select 1 from cms_product cp where cp.id = cd.product_id and cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
   ) 
   ;
  
    dbms_output.put_line('v_card_count full:'|| v_card_count);
   
   if v_card_count = 0 then
   
     p_msg_code := '00';
     p_msg := 'Success';
     return;
  
   else
   
    p_msg_code := '04';
    p_msg := 'Full KYC Card already exists'; 
    return;

   end if;
  
  end if;
  
  end if;
     

dbms_output.put_line('Is_Gift_Card '||V_gift_card);  
 
  if V_gift_card = 'Y'  then 
  
  select sum(cnt)
    into v_card_count
    from
  (select count(distinct prep_account_number) cnt 
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
  -- and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   union all
    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'Y')
   )
   ;
   
  
  dbms_output.put_line('v_card_count gift:'|| v_card_count);
  
   if v_card_count < 4 then
   
     p_msg_code := '00';
     p_msg := 'Success';
  
   else
   
    p_msg_code := '03';
    p_msg := 'More than 4 Min Kyc Cards are present for same mobile number';
   return;

   end if;

  
  else
  
  select sum(cnt)
   into v_card_count
   from 
  (select count(distinct prep_account_number) cnt  
   from card_detail cd
   where cd.mobile_no = p_mobile_no    
   and cd.status != 'PHL' 
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
  
    union all

    select count(1) 
   from temp_cust_detail cd
   where cd.mobile_number = p_mobile_no    
 --  and cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
   and exists (select 1 from prd_bin_profile p where p.product_id = cd.product_id and upper(p.is_gift_card) = 'N')
   ) 
   ;
  
    dbms_output.put_line('v_card_count full:'|| v_card_count);
   
   if v_card_count = 0 then
   
     p_msg_code := '00';
     p_msg := 'Success';
  
   else
   
    p_msg_code := '04';
    p_msg := 'Full KYC Card already exists'; 

   end if;
  
  end if;
	
exception
when others then 

  p_msg_code := '01';
  p_msg := 'Failure ...'||sqlerrm; 

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_dashboard(OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

TYPE t_tab IS Record(Day_type varchar2(50),
					total_Card number,
					active_card_txn number,
					active_card_pos_txn number,
					active_card_ecom_txn number,
					active_card_atm_txn number,
					pos_txn number,
					pos_amt number,
					ecom_txn number,
					ecom_amt number,
					atm_txn number,
					atm_amt number,
					top_mcc_list varchar2(2000),
					interchange_amt number,
					total_interchange_shared number,
					seq number
					);
					
  -- type p_tab is table of t_tab;                      
                     
   l_tab  t_tab; 
   l_tab_w1  t_tab; 
   l_tab_w2  t_tab; 
   l_tab_w3  t_tab; 
   l_tab_w4  t_tab; 
   l_tab_mnth  t_tab; 
  lv_mnt_start_Date date;
  lv_mnt_end_Date date;
 
begin

l_tab.seq := 1;
l_tab_w1.seq := 2;
l_tab_w2.seq := 3;
l_tab_w3.seq := 4;
l_tab_w4.seq := 5;
l_tab_mnth.seq := 6;

l_tab.Day_type := 'Day';
l_tab_w1.Day_type := 'Week 1';
l_tab_w2.Day_type := 'Week 2';
l_tab_w3.Day_type := 'Week 3';
l_tab_w4.Day_type := 'Week 4';
l_tab_mnth.Day_type := 'Month';


select count(1) into l_tab.total_Card
from card_detail cd where trunc(card_activated_on) <=trunc(sysdate-1);

select cast(date_trunc('month', sysdate) as date) , (date_trunc('month', sysdate::date) + interval '1 month' - interval '1 day')::date 
into lv_mnt_start_Date,lv_mnt_end_Date from dual;
 
 l_tab_w1.total_Card   := l_tab.total_Card;
 l_tab_w2.total_Card   := l_tab.total_Card;
 l_tab_w3.total_Card   := l_tab.total_Card;
 l_tab_w4.total_Card   := l_tab.total_Card;
 l_tab_mnth.total_Card := l_tab.total_Card;

dbms_output.put_line('Reached1');

--weeks start here
select count(1) 
into l_tab_w1.active_card_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type in (21000,21001)
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
))
; 


select count(1) 
into l_tab_w1.active_card_pos_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
))
; 

select count(1) 
into l_tab_w1.active_card_ecom_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
))
; 

select count(1) 
into l_tab_w1.active_card_atm_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type =21001
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21001
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
))
; 

dbms_output.put_line('Reached2');

select count(1),sum(f004/100) 
into l_tab_w1.pos_txn,l_tab_w1.pos_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
)  ;

select count(1),sum(f004/100) 
into l_tab_w1.ecom_txn,l_tab_w1.ecom_amt 
from aswt_switch_txn_authrization a
where f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
);

dbms_output.put_line('Reached3');

select count(1),sum(f004/100) 
into l_tab_w1.atm_txn,l_tab_w1.atm_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type in (21001)
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=1
);

dbms_output.put_line('Reached3.1');
----------

select count(1) 
into l_tab_w2.active_card_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type in (21000,21001)
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
))
; 


select count(1) 
into l_tab_w2.active_card_pos_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
))
; 

select count(1) 
into l_tab_w2.active_card_ecom_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
))
; 

select count(1) 
into l_tab_w2.active_card_atm_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type =21001
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21001
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
))
; 


dbms_output.put_line('Reached4');

select count(1),sum(f004/100) 
into l_tab_w2.pos_txn,l_tab_w2.pos_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date = (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
) ;

select count(1),sum(f004/100) 
into l_tab_w2.ecom_txn,l_tab_w2.ecom_amt 
from aswt_switch_txn_authrization a
where f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
);

dbms_output.put_line('Reached5');

select count(1),sum(f004/100) 
into l_tab_w2.atm_txn,l_tab_w2.atm_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type in (21001)
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=2
);
--------

select count(1) 
into l_tab_w3.active_card_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type in (21000,21001)
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3))
; 



select count(1) 
into l_tab_w3.active_card_pos_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3
))
; 

select count(1) 
into l_tab_w3.active_card_ecom_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3
))
; 

select count(1) 
into l_tab_w3.active_card_atm_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type =21001
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21001
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3
))
; 


dbms_output.put_line('Reached6');

select count(1),sum(f004/100) 
into l_tab_w3.pos_txn,l_tab_w3.pos_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3);

select count(1),sum(f004/100) 
into l_tab_w3.ecom_txn,l_tab_w3.ecom_amt 
from aswt_switch_txn_authrization a
where f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3
);

dbms_output.put_line('Reached6');

select count(1),sum(f004/100) 
into l_tab_w3.atm_txn,l_tab_w3.atm_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type in (21001)
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=3
);

----------
select count(1) 
into l_tab_w4.active_card_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type in (21000,21001)
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4))
; 


select count(1) 
into l_tab_w4.active_card_pos_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4
))
; 

select count(1) 
into l_tab_w4.active_card_ecom_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21000
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4
))
; 

select count(1) 
into l_tab_w4.active_card_atm_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type =21001
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type =21001
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4
))
; 


dbms_output.put_line('Reached7');

select count(1),sum(f004/100) 
into l_tab_w4.pos_txn,l_tab_w4.pos_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4
);

select count(1),sum(f004/100) 
into l_tab_w4.ecom_txn,l_tab_w4.ecom_amt 
from aswt_switch_txn_authrization a
where f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and date_trunc('week', sys_txn_date)::date= (select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4
);

dbms_output.put_line('Reached8');

select count(1),sum(f004/100) 
into l_tab_w4.atm_txn,l_tab_w4.atm_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type in (21001)
and date_trunc('week', sys_txn_date)::date=(select distinct start_date from
(select d.*, dense_rank ()over(order by date_trunc('week', start_date)) rn from 
(select 
    date_trunc('week', sys_txn_date)::date as start_date
    from aswt_switch_txn_authrization a where 
    f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between trunc(sysdate,'MM') and LAST_DAY(sysdate)) d
where start_date  between trunc(sysdate,'MM') and LAST_DAY(sysdate))
where rn=4
);


--weeks end here
---------------------------------------------------------------
--day start


select count(1) 
into l_tab.active_card_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) = trunc(sysdate-1))
;

select count(1) 
into l_tab.active_card_pos_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type = 21000
and f022 not like '%81%'
and trunc(a.sys_txn_date) = trunc(sysdate-1))
;

select count(1) 
into l_tab.active_card_ecom_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type =21000
and f022 like '%81%'
and trunc(a.sys_txn_date) = trunc(sysdate-1))
;


select count(1) 
into l_tab.active_card_atm_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type = 21001
and trunc(a.sys_txn_date) = trunc(sysdate-1)
)
;


select count(1),sum(f004/100) 
into l_tab.pos_txn,l_tab.pos_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and trunc(a.sys_txn_date) = trunc(sysdate-1);

dbms_output.put_line('Reached9');

select count(1),sum(f004/100) 
into l_tab.ecom_txn,l_tab.ecom_amt 
from aswt_switch_txn_authrization a
where f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and trunc(a.sys_txn_date) = trunc(sysdate-1);

select count(1),sum(f004/100) 
into l_tab.atm_txn,l_tab.atm_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type in (21001)
and trunc(a.sys_txn_date) = trunc(sysdate-1);

--day end

-----------------------


--month start
dbms_output.put_line('Reached10');

select count(1) 
into l_tab_mnth.active_card_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type in (21000,21001)
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date);


select count(1) 
into l_tab_mnth.active_card_pos_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date)
; 

select count(1) 
into l_tab_mnth.active_card_ecom_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date)
; 

select count(1) 
into l_tab_mnth.active_card_atm_txn
from card_detail cd where status = 'A'
and exists (select 1 from aswt_switch_txn_authrization a where a.f002 = cd.hash_card_number
and f039 = '00' and txn_type =21001
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date)
; 


dbms_output.put_line('Reached10.1');

select count(1),sum(f004/100) 
into l_tab_mnth.pos_txn,l_tab_mnth.pos_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type = 21000
and f022 not like '%81%'
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date;

dbms_output.put_line('Reached10.2');

select count(1),sum(f004/100) 
into l_tab_mnth.ecom_txn,l_tab_mnth.ecom_amt 
from aswt_switch_txn_authrization a
where f039 = '00' 
and txn_type = 21000
and f022 like '%81%'
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date;

dbms_output.put_line('Reached11');

select count(1),sum(f004/100) 
into l_tab_mnth.atm_txn,l_tab_mnth.atm_amt 
from aswt_switch_txn_authrization a 
where f039 = '00' 
and txn_type in (21001)
and trunc(a.sys_txn_date) between lv_mnt_start_Date and lv_mnt_end_Date;
--month end
-----------------------
dbms_output.put_line('Reached');

open p_out for
--select 1 from dual;
select  Day_type,
        total_Card,
	    active_card_txn,
	     Activity,
	    active_card_pos_txn,
	    active_card_ecom_txn,
	    active_card_atm_txn,
	    pos_txn,
	    ecom_txn,
	    atm_txn,
	   '0' as  "% of Pos",
	   '0' as  "% of Ecom",
	   '0' as  "% of ATM",
        pos_amt,	   
	    ecom_amt,       
	    atm_amt ,
	    null top_mcc_list,
	    0 interchange_amt,
	    0 total_interchange_shared
	    from 
(select l_tab.Day_type,
       l_tab.total_Card,
	   l_tab.active_card_txn,
	   (l_tab.active_card_txn/l_tab.total_Card)*100 Activity,
	   l_tab.active_card_pos_txn,
	   l_tab.active_card_ecom_txn,
	   l_tab.active_card_atm_txn,
	   l_tab.pos_txn,
	   l_tab.ecom_txn,
	   l_tab.atm_txn,
	  -- (l_tab.pos_txn/(l_tab.pos_txn+l_tab.ecom_txn+l_tab.atm_txn))*100 "% of Pos",
       nvl(l_tab.pos_amt,0) pos_amt,	   
	   nvl(l_tab.ecom_amt,0)ecom_amt,       
	   nvl(l_tab.atm_amt,0) atm_amt,
	   l_tab.seq
from dual
union
select l_tab_w1.Day_type,
       l_tab_w1.total_Card,
	   l_tab_w1.active_card_txn,
	   (l_tab_w1.active_card_txn/l_tab_w1.total_Card)*100 Activity,
	   l_tab_w1.active_card_pos_txn,
	   l_tab_w1.active_card_ecom_txn,
	   l_tab_w1.active_card_atm_txn,
	   l_tab_w1.pos_txn,
	   l_tab_w1.ecom_txn,
	   l_tab_w1.atm_txn,
	  -- (l_tab.pos_txn/(l_tab.pos_txn+l_tab.ecom_txn+l_tab.atm_txn))*100 "% of Pos",
       nvl(l_tab_w1.pos_amt,0) pos_amt,	   
	   nvl(l_tab_w1.ecom_amt,0)ecom_amt,       
	   nvl(l_tab_w1.atm_amt,0) atm_amt,
	   l_tab_w1.seq
from dual
union
select l_tab_w2.Day_type,
       l_tab_w2.total_Card,
	   l_tab_w2.active_card_txn,
	   (l_tab_w2.active_card_txn/l_tab_w1.total_Card)*100 Activity,
	   l_tab_w2.active_card_pos_txn,
	   l_tab_w2.active_card_ecom_txn,
	   l_tab_w2.active_card_atm_txn,
	   l_tab_w2.pos_txn,
	   l_tab_w2.ecom_txn,
	   l_tab_w2.atm_txn,
	  -- (l_tab.pos_txn/(l_tab.pos_txn+l_tab.ecom_txn+l_tab.atm_txn))*100 "% of Pos",
       nvl(l_tab_w2.pos_amt,0) pos_amt,	   
	   nvl(l_tab_w2.ecom_amt,0)ecom_amt,       
	   nvl(l_tab_w2.atm_amt,0) atm_amt,
	   l_tab_w2.seq
from dual
union
select l_tab_w3.Day_type,
       l_tab_w3.total_Card,
	   l_tab_w3.active_card_txn,
	   (l_tab_w3.active_card_txn/l_tab_w1.total_Card)*100 Activity,
	   l_tab_w3.active_card_pos_txn,
	   l_tab_w3.active_card_ecom_txn,
	   l_tab_w3.active_card_atm_txn,
	   l_tab_w3.pos_txn,
	   l_tab_w3.ecom_txn,
	   l_tab_w3.atm_txn,
	  -- (l_tab.pos_txn/(l_tab.pos_txn+l_tab.ecom_txn+l_tab.atm_txn))*100 "% of Pos",
       nvl(l_tab_w3.pos_amt,0) pos_amt,	   
	   nvl(l_tab_w3.ecom_amt,0)ecom_amt,       
	   nvl(l_tab_w3.atm_amt,0) atm_amt,
	   l_tab_w3.seq
from dual
union
select l_tab_w4.Day_type,
       l_tab_w4.total_Card,
	   l_tab_w4.active_card_txn,
	   (l_tab_w4.active_card_txn/l_tab_w1.total_Card)*100 Activity,
	   l_tab_w4.active_card_pos_txn,
	   l_tab_w4.active_card_ecom_txn,
	   l_tab_w4.active_card_atm_txn,
	   l_tab_w4.pos_txn,
	   l_tab_w4.ecom_txn,
	   l_tab_w4.atm_txn,
	  -- (l_tab.pos_txn/(l_tab.pos_txn+l_tab.ecom_txn+l_tab.atm_txn))*100 "% of Pos",
       nvl(l_tab_w4.pos_amt,0) pos_amt,	   
	   nvl(l_tab_w4.ecom_amt,0)ecom_amt,       
	   nvl(l_tab_w4.atm_amt,0) atm_amt,
	   l_tab_w4.seq
from dual
union
select l_tab_mnth.Day_type,
       l_tab_mnth.total_Card,
	   l_tab_mnth.active_card_txn,
	   (l_tab_mnth.active_card_txn/l_tab_w1.total_Card)*100 Activity,
	   l_tab_mnth.active_card_pos_txn,
	   l_tab_mnth.active_card_ecom_txn,
	   l_tab_mnth.active_card_atm_txn,
	   l_tab_mnth.pos_txn,
	   l_tab_mnth.ecom_txn,
	   l_tab_mnth.atm_txn,
	  -- (l_tab.pos_txn/(l_tab.pos_txn+l_tab.ecom_txn+l_tab.atm_txn))*100 "% of Pos",
       nvl(l_tab_mnth.pos_amt,0) pos_amt,	   
	   nvl(l_tab_mnth.ecom_amt,0)ecom_amt,       
	   nvl(l_tab_mnth.atm_amt,0) atm_amt,
	   l_tab_mnth.seq
from dual)
order by seq
;



p_msg := 'Success';

exception 
when others then 
p_msg := 'Error'||sqlerrm;
end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_decline_fee_calc(p_hash_card_number character varying, p_amount numeric, p_txn_type character varying, p_mcc character varying, OUT p_out character varying, OUT p_msg character varying, OUT p_fee_amt numeric, OUT p_mark_up_fee numeric, OUT p_vat_fee numeric, OUT p_wallet_id numeric, OUT p_queue_flag character varying, OUT p_fee_ind character varying, OUT p_available_balance numeric, OUT p_hold_balance numeric, OUT p_current_balance numeric, OUT p_previous_balance numeric)
 SECURITY DEFINER
AS $procedure$
 
v_card_ref_number card_detail.card_ref_number%type;
v_prepaid_account_number account_details.account_number%type;
v_tran_cnt  number;
v_txn_type number;
v_product_id card_detail.product_id%type;
v_fee_amt number;
v_fee_desc varchar2(200);
v_frequency pcs_fee_waiver.frequency%type;
v_txn_waiver_count pcs_fee_waiver.txn_count%type;
v_txn_cnt numeric :=0; 
v_flat_fee_amount numeric:=0;
v_txn_amount numeric:=0;
v_mark_up_fee numeric:=0;
v_vat_fee  numeric :=0;
v_total_mark_up_fee numeric :=0;
v_total_vat_fee numeric :=0;
v_total_fee numeric :=0;
v_group_id varchar(10);
v_markup_cnt number :=0;
v_fee_applicable varchar2(2);
v_queue_flag varchar2(2);
p_out_wallet varchar2(200);
v_org_txn_type number;
v_outlet_id varchar2(20);
v_surcharge_fee number;

begin 
	
	select cd.card_ref_number,cust.prepaid_account_number ,cd.product_id,ce.outlet_id
	into v_card_ref_number, v_prepaid_account_number,v_product_id,v_outlet_id
	 from card_detail cd 
	 join cms_cust_details cust on (cd.prep_account_number=cust.prepaid_account_number) 
     join cms_card_detail_extention ce on ce.card_Ref_no = cd.card_Ref_number
	-- join account_details  ad   on (ad.account_number=cust.prepaid_account_number)
	 where cd.hash_Card_number=p_hash_Card_number;
	
	v_org_txn_type := substr(p_txn_type,1,5);
	 
		 select count(1) into v_tran_cnt from transaction_type where swt_txn_type = p_txn_type;
		
		if v_tran_cnt = 0  then
				        
		dbms_output.put_line('p_hash_Card_number '|| p_hash_Card_number);
		dbms_output.put_line('v_prepaid_account_number '|| v_prepaid_account_number);
		dbms_output.put_line('v_product_id '|| v_product_id);
		dbms_output.put_line('p_mcc '|| p_mcc);
		dbms_output.put_line('p_amount '|| p_amount);
		dbms_output.put_line('v_org_txn_type '|| v_org_txn_type);
	
       sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
       --sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type); 
             
        p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','01');
		p_msg:= 'Transaction is not configured.';
		p_fee_amt :=0; 
		p_mark_up_fee:=0;
		p_vat_fee:=0;		
		p_queue_flag = decode(p_out_wallet,'Insufficient Fund','Y','N');
	
	if p_wallet_id >=0 and p_out_wallet ='Success' then


select available_balance,hold_balance,current_balance ,available_balance 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance
from account_details 
where account_number = v_prepaid_account_number
and wallet_id = p_wallet_id;
	  
else

select available_balance,hold_balance,current_balance ,available_balance ,a.wallet_id 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance,p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  

end if;

        
        return;
		
		else

	   select txn_type into v_txn_type from transaction_type where swt_txn_type = p_txn_type;
	   p_fee_ind:=v_txn_type;
	
       end  if;
	 	
     select count(1) 
	 into v_markup_cnt 
	 from prd_fee_profile p 
	 where p.product_id = v_product_id 
	 and txn_type =v_txn_type;

if v_markup_cnt > 0 then

select markup_fee_perc,fee_amount,fee_profile_desc,upper(fee_app_frequency),fee_txn_waiver_cnt,is_fee_applicable,queue_flag 
into v_mark_up_fee,v_fee_amt,v_fee_desc,v_frequency,v_txn_waiver_count,v_fee_applicable,v_queue_flag 
from prd_fee_profile p              
where p.product_id = v_product_id 
and txn_type =v_txn_type;
	

if v_frequency in ('DAILY','WEEKLY','MONTHLY','YEARLY') then --'DAILY','WEEKLY','MOTHLY','YEARLY'

select count(1) into v_txn_cnt  from aswt_switch_txn_authrization asta  where asta.f002=p_hash_card_number 
and asta.f039='00' and asta.txn_type=v_org_txn_type and asta.intl_flag=p_intl_flag
and trunc(asta.sys_txn_date) >= decode (v_frequency,'DAILY',trunc(sysdate),'WEEKLY',date_trunc('week', sysdate),'MONTHLY',date_trunc('month', sysdate),'YEARLY',date_trunc('year', sysdate));

if v_txn_cnt < v_txn_waiver_count then
dbms_output.put_line('In waiver subcidy');

sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type);

p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','00');
p_msg:= v_fee_desc;
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = decode(p_out_wallet,'Insufficient Fund','Y','N');

if p_wallet_id >=0 and p_out_wallet ='Success' then


select available_balance,hold_balance,current_balance ,available_balance 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance
from account_details 
where account_number = v_prepaid_account_number
and wallet_id = p_wallet_id;
	  
else


select available_balance,hold_balance,current_balance ,available_balance ,a.wallet_id 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance,p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  


end if;

return;
else

if v_mark_up_fee !=0 then

v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;

end if; --mark up fee

fee_vat_calculation(v_fee_amt,v_vat_fee);

v_total_vat_fee =v_vat_fee;

v_total_fee:=v_fee_amt + nvl(v_total_vat_fee,0)+nvl(v_total_mark_up_fee,0);

sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type);

p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','00');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;
p_queue_flag = decode(p_out_wallet,'Insufficient Fund','Y','N');


if p_wallet_id >=0 and p_out_wallet ='Success' then


select available_balance,hold_balance,current_balance  
into p_previous_balance,p_hold_balance,p_current_balance 
from account_details 
where account_number = v_prepaid_account_number
and wallet_id = p_wallet_id;

update account_details
		set available_balance = available_balance - v_total_fee,
		    current_balance = current_balance - v_total_fee
       where account_number = v_prepaid_account_number
	   and wallet_id = p_wallet_id;
	  
p_available_balance := p_previous_balance - v_total_fee;
p_current_balance := p_current_balance - v_total_fee;

	  
else


select available_balance,hold_balance,current_balance ,available_balance ,a.wallet_id 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance,p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  

if p_queue_flag = 'N' then
update account_details
		set available_balance = available_balance - v_total_fee,
		    current_balance = current_balance - v_total_fee
       where account_number = v_prepaid_account_number
	   and wallet_id = p_wallet_id;
	  
p_available_balance := p_previous_balance - v_total_fee;
p_current_balance := p_current_balance - v_total_fee;
end if;

end if;


return;

end if;

else


if v_mark_up_fee !=0 then

v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;

end if; --mark up fee

fee_vat_calculation(v_fee_amt ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;


v_total_fee:=v_fee_amt + nvl(v_total_vat_fee,0)+nvl(v_total_mark_up_fee,0);

sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type);

p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','00');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;
p_queue_flag = decode(p_out_wallet,'Insufficient Fund','Y','N');

if p_wallet_id >=0 and p_out_wallet ='Success' then


select available_balance,hold_balance,current_balance  
into p_previous_balance,p_hold_balance,p_current_balance 
from account_details 
where account_number = v_prepaid_account_number
and wallet_id = p_wallet_id;

update account_details
		set available_balance = available_balance - v_total_fee,
		    current_balance = current_balance - v_total_fee
       where account_number = v_prepaid_account_number
	   and wallet_id = p_wallet_id;
	  
p_available_balance := p_previous_balance - v_total_fee;
p_current_balance := p_current_balance - v_total_fee;

	  
else


select available_balance,hold_balance,current_balance ,available_balance ,a.wallet_id 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance,p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  

if p_queue_flag = 'N' then
update account_details
		set available_balance = available_balance - v_total_fee,
		    current_balance = current_balance - v_total_fee
       where account_number = v_prepaid_account_number
	   and wallet_id = p_wallet_id;
	  
p_available_balance := p_previous_balance - v_total_fee;
p_current_balance := p_current_balance - v_total_fee;
end if;

end if;

return;
end if;

else
dbms_output.put_line(' reached');

sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type);


p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','01');
p_msg:= 'Fee is not configured.';
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = decode(p_out_wallet,'Insufficient Fund','Y','N');

if p_wallet_id >=0 and p_out_wallet ='Success' then


select available_balance,hold_balance,current_balance ,available_balance 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance
from account_details 
where account_number = v_prepaid_account_number
and wallet_id = p_wallet_id;
	  
else


select available_balance,hold_balance,current_balance ,available_balance ,a.wallet_id 
into p_previous_balance,p_hold_balance,p_current_balance, p_available_balance,p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT' limit 1;	  


end if;

return;
end if;

exception
when others then

p_out:='02';
p_msg := 'Error '||sqlerrm;	

end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_dormancy_fee_card(OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
 CURSOR c1 is 
 
 select cd.card_Ref_number,
        cd.hash_card_number,
        cd.card_activated_on,
        p.dorminance_period,
        cd.product_id,
        cd.issuer_id,
        p.allow_negative_balance,
        ce.outlet_id,
		cd.prep_account_number,
		f.fee_amount,
		tt.txn_name  fee_profile_desc
        from card_detail cd
        join cms_card_detail_extention ce on ce.card_Ref_no = cd.card_Ref_number
        join prd_bin_profile p on p.bin = cd.bin and p.product_id  = cd.product_id and p.dorminance_period>0
        join prd_fee_profile f on f.product_id = cd.product_id and f.txn_type = 10110
        join transaction_type tt on tt.txn_type = f.txn_type
        where cd.status = 'A'
      --  and cd.prep_account_number = 'AXD00000000000000003'
   ;

 v_last_fee_applied date;
v_last_txn_date date;
 --x.fee_amount  number;
 --x.fee_profile_desc  varchar2(50);
 v_fee_should_applied varchar2(2);
 v_balance number;
 v_zero_wallet  number;
 v_wallet_id  number;
 p_out  varchar2(500);
 
 v_total_bal     NUMBER := 0;
 v_host_bal      NUMBER := 0;
 v_shadow_bal    NUMBER := 0;
begin
  for x in c1 loop

	   dbms_output.put_line('Start '||x.hash_card_number); 
	  
   v_fee_should_applied := null;
  v_last_txn_date  := null;
--  select fee_amount,fee_profile_desc 
--  into v_fee_amt,v_fee_desc
--  from prd_fee_profile  f 
--  where f.product_id = x.product_id
--  and f.txn_type = 10110;
  

 
  SELECT
            max(DATE_TIME)
        INTO v_last_fee_applied
        FROM
            (
                SELECT
                    DATE_TIME
                FROM
                    cs_fee_temp
                WHERE
                    card_number = x.hash_card_number
                    AND fee_ind  = '10110'
                UNION ALL
                SELECT
                    DATE_TIME
                FROM
                    cs_fee_queue
                WHERE
                    card_number = x.hash_card_number
				  and fee_ind  = '10110'
            );
           
     v_last_txn_date := sf_last_txn_date(x.hash_card_number);
     v_last_txn_date := case when v_last_txn_date > v_last_fee_applied then v_last_txn_date else v_last_fee_applied end ;
  
  
    v_fee_should_applied  := case when floor(MONTHS_BETWEEN(sysdate,coalesce(v_last_txn_date,v_last_fee_applied,x.card_activated_on,sysdate))) >= x.dorminance_period then 'Y' else
                             'N' end ;
  
--    dbms_output.put_line('v_last_txn_date '||v_last_txn_date);  
--  dbms_output.put_line('v_last_fee_applied '||v_last_fee_applied);  
--
--  dbms_output.put_line('v_fee_should_applied '||v_fee_should_applied);  
 
     
  
   IF v_fee_should_applied = 'Y'  then 
   
    sp_get_wallet_id(x.hash_card_number,x.prep_account_number,x.product_id,x.fee_amount,v_wallet_id,p_out);
   
     dbms_output.put_line('v_wallet_id '||v_wallet_id||' '||' p_out'||p_out);  
      
    IF v_wallet_id >= 0 and  p_out = 'Success'  then 
    
     INSERT INTO cs_fee_temp (
                    date_time,
                    fee_description,
                    card_number,
                    fee_amt,
                    rrn,
                    reversal_flag,
                    settle_date,
                    acc_flag,
                    fee_ind,
                    acc_date,
                    seq_id,
                    balance_update_flag,
                    balance_update_date,
                    bal_update_flag_ruk,
                    bal_update_date_ruk,
                    rev_org_seq_id,
                    tid,
                    stan,
                    batch_number,
                    ticket_id,
                    entry_date_time,
                    drcr,
                    bal_update_settl_flag,
                    bal_update_settl_date,
                    wallet_id,
                    prepaid_account_number
                ) VALUES (
                    sysdate,
                    x.fee_profile_desc,
                    x.hash_card_number,
                    x.fee_amount,
                    cs_fee_temp_rrn.NEXTVAL,
                    NULL,
                    NULL,
                    NULL,
                    '10110',
                    NULL,
                    to_char(sysdate, 'DDMONYY')
                    || '.'
                    || lpad(cs_fee_temp_seq.NEXTVAL, 8, '0'),
                    'N',
                    NULL,
                    'N',
                    NULL,
                    NULL,
                    X.outlet_id,
                    NULL,
                    NULL,
                    NULL,
                    sysdate,
                    'Dr',
                    NULL,
                    NULL,
                    v_wallet_id,
                    x.prep_account_number
                );
				
		update account_details
		set available_balance = available_balance - x.fee_amount,
		    current_balance = current_balance - x.fee_amount
       where account_number = x.prep_account_number
	   and wallet_id = v_wallet_id;
     
   else 
   
   INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,
                        settled_total_balance,
                        settled_host_balance,
                        settled_shadow_balance,
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        queue_type
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        x.fee_profile_desc,
                        x.hash_card_number,
                        x.fee_amount,
                        cs_fee_queue_rrn.NEXTVAL,
                        '10110',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        x.outlet_id,
                        sysdate,
                        'Dr',
                        1,
                        v_total_bal,
                        v_host_bal,
                        v_shadow_bal,
                        'N',
                        null,
                        'F'
                    );

   
   end if;  
   
   end if;
  
  dbms_output.put_line('end  ');  
  
  end loop;
  
  p_out := 'Sucess';
 dbms_output.put_line('p_out  '||p_out); 
  
exception
when others then
p_out := 'Failure '||sqlerrm;
dbms_output.put_line(p_out);
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_ems_data_update(OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
begin

update digital_txn_authorization d
set is_send = 'Y'
where d.is_send = 'N'
and exists (select 1 from card_detail cd
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type) = 'CORPORATE'
where cd.hash_card_number = d.card_enc)
and exists (select 1 from transaction_type t where t.txn_type = d.txn_type);

update aswt_switch_txn_authrization d
set is_send = 'Y'
where d.is_send = 'N'
and d.f039 = '00'
and to_number(f004) >0
--and case when d.int_txn_type in ('2102802','2102804') and d.org_drcr  = 'D' then 0 else 1 end  =1
and exists (select 1 from card_detail cd
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type) = 'CORPORATE'
where cd.hash_card_number = d.f002)
and exists (select 1 from transaction_type t where t.txn_type = d.txn_type);

update aswt_switch_txn_offline d
set is_send = 'Y'
where d.is_send = 'N'
and d.f039 = '00'
and to_number(f004) >0
and exists (select 1 from card_detail cd
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type) = 'CORPORATE'
where cd.hash_card_number = d.f002)
and d.txn_type in ('21028','21029')
and exists (select 1 from transaction_type t where t.txn_type = d.txn_type);

update cs_manual_adjustment d
set is_send = 'Y'
where d.is_send = 'N'
and exists (select 1 from card_detail cd
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type) = 'CORPORATE'
where cd.hash_card_number = d.card_number)
and exists (select 1 from transaction_type t where t.txn_type = d.txn_type);


update cs_fee_temp d
set is_send = 'Y'
where d.is_send = 'N'
and exists (select 1 from card_detail cd
 join issuer i on i.id = cd.issuer_id and upper(i.issuer_type)  = 'CORPORATE'
 where cd.hash_card_number = d.card_number)
and exists (select 1 from transaction_type t where t.txn_type  = decode(d.fee_ind,'P','93029','R','30003',d.fee_ind));

p_out := 'Success';
exception
when others then
p_out:='Err!'||sqlerrm;  

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_ems_push_data(p_to_date character varying, p_from_date character varying, OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$
begin

open p_out for

select cd.card_ref_number ,to_char(d.date_time,'DD-MM-YYYY') "Transaction Date",
to_char(d.date_time,'hh24:mi:ss') "Transaction Time",
t.txn_name  "Transaction Type",
d.txn_amount  "Transaction Amount",
'INR' "Transaction Currency",
d.dr_cr_flag  "CrDr Flag",
d.arn_reference  "Transaction ID",
(select name from cms_outlet co where co.outlet_id = d.mid)  "Transaction Description",
null "TID",
'' "Channel type",
(select wm.key_identifier  from wallet_master wm where wm.wallet_id  = d.wallet_id) wallet_name 
from digital_txn_authorization d 
join card_detail cd on cd.hash_card_number = d.card_enc 
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type)  = 'CORPORATE'
join transaction_type t on t.txn_type  = d.txn_type 
where d.is_send = 'N'
union all 
select cd.card_ref_number ,to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "Transaction Date",
to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "Transaction Time",
case when d.int_txn_type ='2102802' and d.org_drcr ='C' then 'Money Add by Cash-Load'
     when d.int_txn_type ='2102802' and d.org_drcr ='D' then 'Money Add by Cash-For Transfer'
 else    
nvl((
SELECT
txn_name
FROM
sub_transaction_type
WHERE
sub_txn_type  = d.int_txn_type
),
(
SELECT
txn_name
FROM
transaction_type
WHERE
txn_type = d.txn_type
)) end "Transaction Type",
d.f004/100  "Transaction Amount",
'INR' "Transaction Currency",
decode(d.drcr,'D','Dr','C','Cr',d.drcr)  "CrDr Flag",
d.f037  "Transaction ID",
d.f043  "Transaction Description",
d.f041 "TID",
case when d.txn_type = '21001' then 'ATM' 
	when d.f022 like '%81%' then 'ECOMM'
     when d.f022 not like '%81%' then 'POS'
      end  "Channel type",
(select wm.key_identifier  from wallet_master wm where wm.wallet_id  = d.wallet_id) wallet_name      
from aswt_switch_txn_authrization d 
join card_detail cd on cd.hash_card_number = d.f002 
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type)  = 'CORPORATE'
--join transaction_type t on t.txn_type  = d.txn_type 
where d.is_send = 'N'
and d.f039 = '00'
and to_number(f004) >0
union all 
select cd.card_ref_number ,to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "Transaction Date",
to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "Transaction Time",
t.txn_name "Transaction Type",
d.f004/100  "Transaction Amount",
'INR' "Transaction Currency",
decode(d.drcr,'D','Dr','C','Cr',d.drcr)  "CrDr Flag",
d.unique_txn_id  "Transaction ID",
d.f043 "Transaction Description",
d.f041 "TID",
'' "Channel type",
 (select key_identifier from wallet_master wm2  where wm2.wallet_id =d.wallet_id) wallet_name
from aswt_switch_txn_offline  d 
join card_detail cd on cd.hash_card_number = d.f002 
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type)  = 'CORPORATE'
join transaction_type t on t.txn_type  = d.txn_type 
where d.is_send = 'N'
and d.f039 = '00'
and txn_type in ('21028','21029')
and to_number(f004) >0
union all 
select cd.card_ref_number ,to_char(d.date_time,'DD-MM-YYYY') "Transaction Date",
to_char(d.date_time,'hh24:mi:ss') "Transaction Time",
t.txn_name  "Transaction Type",
d.fee_amt  "Transaction Amount",
'INR' "Transaction Currency",
decode(d.drcr,'D','Dr','C','Cr',d.drcr)  "CrDr Flag",
d.rrn  "Transaction ID",
'NA'  "Transaction Description",
d.tid "TID",
'' "Channel type",
(select wm.key_identifier  from wallet_master wm where wm.wallet_id  = d.wallet_id) wallet_name
from cs_fee_temp d 
join card_detail cd on cd.hash_card_number = d.card_number 
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type)  = 'CORPORATE'
join transaction_type t on t.txn_type  = decode(d.fee_ind,'P','93029','R','30003',d.fee_ind)
where d.is_send = 'N'
union all 
select cd.card_ref_number ,to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') "Transaction Date",
to_char(d.TRANSACTION_DATE,'hh24:mi:ss') "Transaction Time",
t.txn_name  "Transaction Type",
d.AMOUNT  "Transaction Amount",
'INR' "Transaction Currency",
decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   "CrDr Flag",
d.rrn  "Transaction ID",
'NA' "Transaction Description",
d.tid "TID",
'' "Channel type",
(select wm.key_identifier  from wallet_master wm where wm.wallet_id  = d.wallet_id) wallet_name
from cs_manual_adjustment d 
join card_detail cd on cd.hash_card_number = d.card_number 
join issuer i on i.id = cd.issuer_id and upper(i.issuer_type)  = 'CORPORATE'
join transaction_type t on t.txn_type  = d.txn_type 
where d.is_send = 'N'
;

p_msg := 'Success';

exception
when others then
p_msg := 'Err! '||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_fee_calc(p_hash_card_number character varying, p_amount numeric, p_txn_type character varying, p_mcc character varying, p_src_type character varying, OUT p_out character varying, OUT p_msg character varying, OUT p_fee_amt numeric, OUT p_mark_up_fee numeric, OUT p_vat_fee numeric, OUT p_wallet_id numeric, OUT p_queue_flag character varying, OUT p_fee_ind character varying, OUT p_surcharge_fee numeric, OUT p_sur_type numeric, OUT p_sur_desc character varying)
 SECURITY DEFINER
AS $procedure$
 
v_card_ref_number card_detail.card_ref_number%type;
v_prepaid_account_number account_details.account_number%type;
v_tran_cnt  number;
v_txn_type number;
v_product_id card_detail.product_id%type;
v_fee_amt number;
v_fee_desc varchar2(200);
v_frequency pcs_fee_waiver.frequency%type;
v_txn_waiver_count pcs_fee_waiver.txn_count%type;
v_txn_cnt numeric :=0; 
v_flat_fee_amount numeric:=0;
v_txn_amount numeric:=0;
v_mark_up_fee numeric:=0;
v_vat_fee  numeric :=0;
v_total_mark_up_fee numeric :=0;
v_total_vat_fee numeric :=0;
v_total_fee numeric :=0;
v_group_id varchar(10);
v_markup_cnt number :=0;
v_fee_applicable varchar2(2);
v_queue_flag varchar2(2);
p_out_wallet varchar2(200);
v_org_txn_type number;
v_surcharge_fee number;

begin 
	
	PROC_PROCESSLOG('sp_fee_calc','sp_fee_calc','PROCEDURE','p_hash_card_number ...!!'||p_hash_card_number  
          ||' p_amount '||p_amount 
          ||' p_txn_type '||p_txn_type     
          ||' p_mcc '||p_mcc              
          ,SYSDATE);
	
	select cd.card_ref_number,cust.prepaid_account_number ,cd.product_id
	into v_card_ref_number, v_prepaid_account_number,v_product_id
	 from card_detail cd 
	 join cms_cust_details cust on (cd.prep_account_number=cust.prepaid_account_number) 
	-- join account_details  ad   on (ad.account_number=cust.prepaid_account_number)
	 where cd.hash_Card_number=p_hash_Card_number;
	
	v_org_txn_type := substr(p_txn_type,1,5);

		dbms_output.put_line('p_src_type '|| p_src_type);

    
    if p_src_type = 'CMS' then
    
    select count(1) 
	 into v_markup_cnt 
	 from prd_fee_profile p 
	 where p.product_id = v_product_id 
	 and txn_type =v_org_txn_type;

		dbms_output.put_line('v_markup_cnt '|| v_markup_cnt);
	
if v_markup_cnt > 0 then

select p.markup_fee_perc,case when p.variable_fee_flag = 'Y' then round((p_amount *p.fee_amount::number)/100,2) else p.fee_amount::number end,
tt.txn_name ,upper(fee_app_frequency),p.fee_txn_waiver_cnt,p.is_fee_applicable,nvl(p.queue_flag,'N') 
into v_mark_up_fee,v_fee_amt,v_fee_desc,v_frequency,v_txn_waiver_count,v_fee_applicable,v_queue_flag 
from prd_fee_profile p     
join transaction_type tt on tt.txn_type = p.txn_type 
where p.product_id = v_product_id 
and p.txn_type =v_org_txn_type;
	
	dbms_output.put_line('v_frequency '|| v_frequency);

if v_org_txn_type = '10120' then

if v_frequency in ('DAILY','WEEKLY','MONTHLY','YEARLY') then --'DAILY','WEEKLY','MOTHLY','YEARLY'

select count(1) into v_txn_cnt  from card_activity_process_log asta  where asta.hash_card_number=p_hash_card_number 
and action = 'PIN_SET' and status = 'SUCCESS' and sub_action = 'PIN_SET_ATTEMPT' 
and trunc(asta.created_date) >= decode (v_frequency,'DAILY',trunc(sysdate),'WEEKLY',date_trunc('week', sysdate),'MONTHLY',date_trunc('month', sysdate),'YEARLY',date_trunc('year', sysdate));

if v_txn_cnt < v_txn_waiver_count then
dbms_output.put_line('In waiver subcidy');

p_out:= '00';
p_msg:= v_fee_desc;
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = 'N';
p_surcharge_fee:= 0;

return;
else

v_total_fee:=v_fee_amt;

	dbms_output.put_line('v_total_fee '|| v_total_fee);

sp_get_wallet_id(p_hash_Card_number,v_prepaid_account_number,v_product_id,v_total_fee,p_wallet_id,p_out_wallet);

p_out:=decode(p_out_wallet,'Success','00','01');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = v_queue_flag;
p_surcharge_fee := 0;

return;

end if;

else

v_total_fee:=v_fee_amt;

sp_get_wallet_id(p_hash_Card_number,v_prepaid_account_number,v_product_id,v_total_fee,p_wallet_id,p_out_wallet);

p_out:=decode(p_out_wallet,'Success','00','01');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = v_queue_flag;
p_surcharge_fee := 0;

return;
end if;

else 
----------------------

if v_frequency in ('DAILY','WEEKLY','MONTHLY','YEARLY') then  

  select count(1) 
	  into v_txn_cnt
	  from cs_Fee_temp c where
	  c.card_number in (		  
		  select hash_Card_number from card_Detail cd1 where cd1.prep_account_number =
		  (select cd.prep_account_number
	           from card_detail cd 
	           where cd.hash_Card_number=p_hash_Card_number)					   					   
					   )
	and fee_ind = v_org_txn_type	
   and trunc(c.date_time) >= decode (v_frequency,'DAILY',trunc(sysdate),'WEEKLY',date_trunc('week', sysdate),'MONTHLY',date_trunc('month', sysdate),'YEARLY',date_trunc('year', sysdate))
					   ;

if v_txn_cnt < v_txn_waiver_count then
dbms_output.put_line('In waiver subcidy');

p_out:= '00';
p_msg:= v_fee_desc;
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = 'N';
p_surcharge_fee:= 0;

return;
else

v_total_fee:=v_fee_amt;

	dbms_output.put_line('v_total_fee '|| v_total_fee);

sp_get_wallet_id(p_hash_Card_number,v_prepaid_account_number,v_product_id,v_total_fee,p_wallet_id,p_out_wallet);

p_out:=decode(p_out_wallet,'Success','00','01');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = v_queue_flag;
p_surcharge_fee := 0;

return;

end if;

elsif v_frequency = 'EVENT BASED' then 

 select count(1) 
	  into v_txn_cnt
	  from cs_Fee_temp c where
	  c.card_number in (		  
		  select hash_Card_number from card_Detail cd1 where cd1.prep_account_number =
		  (select cd.prep_account_number
	           from card_detail cd 
	           where cd.hash_Card_number=p_hash_Card_number)					   					   
					   )
	and fee_ind = v_org_txn_type;

  if v_txn_cnt < v_txn_waiver_count then
dbms_output.put_line('In waiver subcidy');

p_out:= '00';
p_msg:= v_fee_desc;
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = 'N';
p_surcharge_fee:= 0;

return;
else

v_total_fee:=v_fee_amt;

	dbms_output.put_line('v_total_fee '|| v_total_fee);

sp_get_wallet_id(p_hash_Card_number,v_prepaid_account_number,v_product_id,v_total_fee,p_wallet_id,p_out_wallet);

p_out:=decode(p_out_wallet,'Success','00','01');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = v_queue_flag;
p_surcharge_fee := 0;

return;

end if;

else 

v_total_fee:=v_fee_amt;

sp_get_wallet_id(p_hash_Card_number,v_prepaid_account_number,v_product_id,v_total_fee,p_wallet_id,p_out_wallet);

p_out:=decode(p_out_wallet,'Success','00','01');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = v_queue_flag;
p_surcharge_fee := 0;

return;
end if;

end if;
------------------------------------------
else

p_out:='01';
p_msg:= 'Fee is not configured.';
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = 'N';
p_surcharge_fee := 0;

return;
end if;
    
    else 

    select txn_name ,txn_type 
    into p_sur_desc,p_sur_type
   from transaction_type tt where tt.txn_type  = 98031; 
	 
		 select count(1) into v_tran_cnt from transaction_type where swt_txn_type = p_txn_type;
		
		if v_tran_cnt = 0  then
				        
		dbms_output.put_line('p_hash_Card_number '|| p_hash_Card_number);
		dbms_output.put_line('v_prepaid_account_number '|| v_prepaid_account_number);
		dbms_output.put_line('v_product_id '|| v_product_id);
		dbms_output.put_line('p_mcc '|| p_mcc);
		dbms_output.put_line('p_amount '|| p_amount);
		dbms_output.put_line('v_org_txn_type '|| v_org_txn_type);
	
--       sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,p_out_wallet);
		sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
       --sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type); 
             
        p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','Restricted Mcc','04','01');
		p_msg:= 'Transaction is not configured.';
		p_fee_amt :=0; 
		p_mark_up_fee:=0;
		p_vat_fee:=0;		
		p_queue_flag = 'N'; 
		p_surcharge_fee:=0;
	

if p_wallet_id >=0 and p_out_wallet ='Success' then
  p_wallet_id:= p_wallet_id;
else

select a.wallet_id 
into p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  

end if;
	
        
        return;
		
		else

	   select txn_type into v_txn_type from transaction_type where swt_txn_type = p_txn_type;
	
	  p_fee_ind:=v_txn_type;
       end  if;
	 	
     select count(1) 
	 into v_markup_cnt 
	 from prd_fee_profile p 
	 where p.product_id = v_product_id 
	 and txn_type =v_txn_type;

if v_markup_cnt > 0 then

select markup_fee_perc,case when variable_fee_flag = 'Y' then round((p_amount *fee_amount::number)/100,2) else fee_amount::number end,
tt.txn_name ,upper(fee_app_frequency),fee_txn_waiver_cnt,is_fee_applicable,nvl(p.queue_flag,'N') 
into v_mark_up_fee,v_fee_amt,v_fee_desc,v_frequency,v_txn_waiver_count,v_fee_applicable,v_queue_flag 
from prd_fee_profile p            
join transaction_type tt on tt.txn_type = p.txn_type 
where p.product_id = v_product_id 
and p.txn_type =v_txn_type;
	

if v_frequency in ('DAILY','WEEKLY','MONTHLY','YEARLY') then --'DAILY','WEEKLY','MOTHLY','YEARLY'

select count(1) into v_txn_cnt  from aswt_switch_txn_authrization asta  where asta.f002=p_hash_card_number 
and asta.f039='00' and asta.txn_type=v_org_txn_type and asta.intl_flag=p_intl_flag
and trunc(asta.sys_txn_date) >= decode (v_frequency,'DAILY',trunc(sysdate),'WEEKLY',date_trunc('week', sysdate),'MONTHLY',date_trunc('month', sysdate),'YEARLY',date_trunc('year', sysdate));

if v_txn_cnt < v_txn_waiver_count then
dbms_output.put_line('In waiver subcidy');

--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,p_out_wallet);
sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type);

p_out:= decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','Restricted Mcc','04','00');
p_msg:= v_fee_desc;
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = 'N';
p_surcharge_fee:= v_surcharge_fee;

if p_wallet_id >=0 and p_out_wallet ='Success' then
  p_wallet_id:= p_wallet_id;
else

select a.wallet_id 
into p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  
end if;

return;
else

if v_mark_up_fee !=0 then

v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;

end if; --mark up fee

--fee_vat_calculation(v_fee_amt,v_vat_fee);

v_total_vat_fee =v_vat_fee;

v_total_fee:=v_fee_amt + nvl(v_total_vat_fee,0);

dbms_output.put_line('v_org_txn_type '|| v_org_txn_type);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type,p_wallet_id,p_out_wallet);
sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type);

p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','Restricted Mcc','04','00');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;
p_queue_flag = v_queue_flag;
p_surcharge_fee := nvl(v_surcharge_fee,0);

if p_wallet_id >=0 and p_out_wallet ='Success' then
  p_wallet_id:= p_wallet_id;
else

select a.wallet_id 
into p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  
end if;

return;

end if;

else

if v_mark_up_fee !=0 then

v_total_mark_up_fee :=p_amount * v_mark_up_fee/100;

end if; --mark up fee

--fee_vat_calculation(v_fee_amt ,  v_vat_fee );

v_total_vat_fee =v_vat_fee;

v_total_fee:=v_fee_amt + nvl(v_total_vat_fee,0);

dbms_output.put_line('v_org_txn_type 2 '|| v_org_txn_type);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type,p_wallet_id,p_out_wallet);
sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount+v_total_fee,v_org_txn_type);

dbms_output.put_line('p_hash_Card_number '|| p_hash_Card_number);
p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','Restricted Mcc','04','00');
p_msg:= v_fee_desc;
p_fee_amt :=v_total_fee; 
p_mark_up_fee:=v_total_mark_up_fee;
p_vat_fee:=v_total_vat_fee;
p_queue_flag = v_queue_flag;
p_surcharge_fee := nvl(v_surcharge_fee,0);
dbms_output.put_line('p_hash_Card_number '|| p_hash_Card_number);

if p_wallet_id >=0 and p_out_wallet ='Success' then
  p_wallet_id:= p_wallet_id;
else

select a.wallet_id 
into p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  
end if;

return;
end if;

else
dbms_output.put_line(' reached');

--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,p_out_wallet);
sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type,p_wallet_id,v_surcharge_fee,p_out_wallet);
--sp_check_wallet(p_hash_Card_number,v_prepaid_account_number,v_product_id,p_mcc,p_amount,v_org_txn_type);

p_out:=decode(p_out_wallet,'Insufficient Fund','03','Invalid Mcc','02','Restricted Mcc','04','01');
p_msg:= 'Fee is not configured.';
p_fee_amt :=0; 
p_mark_up_fee:=0;
p_vat_fee:=0;
p_queue_flag = 'N';
p_surcharge_fee := v_surcharge_fee;

if p_wallet_id >=0 and p_out_wallet ='Success' then
  p_wallet_id:= p_wallet_id;
else

select a.wallet_id 
into p_wallet_id
from account_details a
where account_number = v_prepaid_account_number
and upper(a.wallet_identifier) != 'TRANSIT'
limit 1;	  
end if;

return;
end if;

end if;

exception
when others then

p_out:='02';
p_msg := 'Error '||sqlerrm;	

end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_fetch_card_data(p_cust_seq_id character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

v_seq_cnt number;
v_phl_cnt number;
begin

select count(1) 
into v_seq_cnt
from card_Detail cd 
where cust_Seq_id = p_cust_seq_id;

if v_seq_cnt = 1 then

open p_out for 
select card_ref_number,status,issuer_id 
from card_Detail
where cust_Seq_id = p_cust_seq_id;
else

  select count(1) 
into v_phl_cnt
from card_Detail cd 
where cust_Seq_id = p_cust_seq_id
and status = 'PHL';

IF v_phl_cnt <> v_seq_cnt  then

open p_out for 
select card_ref_number,status,issuer_id 
from card_Detail
where cust_Seq_id = p_cust_seq_id
and status <> 'PHL';

else

  open p_out for 
select card_ref_number,status,issuer_id 
from card_Detail
where cust_Seq_id = p_cust_seq_id
and status = 'PHL'
limit 1;

end if;

end if;
exception
when others then
open p_out for 
select 'err' from dual;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_get_and_verify_otp(p_cust_seq_id character varying, p_mobile_no numeric, p_link_flg character varying, p_action_name character varying, p_issuer_id numeric, p_request_flag character varying, p_otp character varying, p_ref_txn_id character varying, p_service_name character varying, OUT p_status character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

  v_cust_cnt           NUMBER;
  v_row_cnt            NUMBER;
  v_Num_Forget_Attempt NUMBER:=0;
  v_num_reset_attempt  NUMBER:=0;
  v_wrong_num_attempt  Number:=0;
  v_num_otp_attempt    NUMBER:=0;  
  v_forget_date        DATE;
  v_reset_date         DATE;
  v_wrong_num_date     DATE;
  v_otp_date           DATE;
  v_issuer_id          number;
  v_otp_exp_time       number;
  v_otp_attempts   NUMBER;
   v_cnt   NUMBER;
    invalid_otp EXCEPTION;
    invalid_resend_otp EXCEPTION;
    invalid_reference_txn_id EXCEPTION;
    invalid_service_name EXCEPTION;
    invalid_all_input EXCEPTION;
    otp_expired EXCEPTION;
    invalid_otp_service_name EXCEPTION;
    invalid_txn_id_service_name EXCEPTION;
    invalid_otp_txn_id EXCEPTION;

    v_otp                NUMBER;
    v_otp_invalid_time   NUMBER;
    invalid_mobile_no EXCEPTION;
     l_coutn   number;  
pragma autonomous_transaction;
BEGIN

 insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('SP_GET_AND_VERIFY_OTP','SP_GET_AND_VERIFY_OTP start','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'--flag  '||p_link_flg,sysdate);



    select otptrycount ,otpexpirytime
    into v_otp_attempts,v_otp_exp_time
    from issuer 
    where id = p_issuer_id;

  IF p_request_flag = 'G'  then

--    select issuer_id 
--    into v_issuer_id
--    from card_detail cd 
--    where cust_seq_id = p_cust_seq_id;


 --IF p_link_flg ='RO' THEN  --O For OTP

    SELECT COUNT(1)
    INTO v_cust_cnt
    FROM cms_cust_attempt_details
    WHERE mobile_no = p_mobile_no
    AND forget_flag     IS NULL
    and wrong_num_flag is null
    and action_name = p_action_name
    AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
   -- and OTP_LINK_FLAG=p_link_flg
   ;

    dbms_output.put_line(v_cust_cnt);

    IF v_cust_cnt =0 THEN

      INSERT
      INTO cms_cust_attempt_details
        (
          CUST_SEQ_ID,
          mobile_no,
          RESET_FLAG,
          RESET_DATE,
          NUM_RESET_ATTEMPT,
          FORGET_FLAG,
          FORGET_DATE,
          NUM_FORGET_ATTEMPT,
          ENTRY_DATE,
          NUM_WRONG_NUM_ATTEMPT,
          WRONG_NUM_FLAG,
          WRONG_NUM_DATE,
          NUM_OTP_ATTEMPT,
          OTP_FLAG,
          OTP_DATE,
          OTP_LINK_FLAG,
          action_name
        )
        VALUES
        (
          p_cust_seq_id,
          p_mobile_no,
          null,
          null,
          null,
          NULL,
          NULL,
          NULL,
          SYSDATE,
          null,
          null,
          null,
          1,
          'Y',
          sysdate,
          p_link_flg,
          p_action_name
        );
      v_row_cnt:=sql%rowcount;

      COMMIT;

      dbms_output.put_line('v_row_cnt '||sql%rowcount);

      p_status:='0';
      p_msg   :='SUCCESS';

insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('SP_GET_AND_VERIFY_OTP','SP_GET_AND_VERIFY_OTP 0','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'-- '||'v_num_otp_attempt 1',sysdate);
      dbms_output.put_line('p_msg '||p_status);
      return;

    END IF;

    IF v_cust_cnt =1 THEN

     SELECT NUM_RESET_ATTEMPT,
        reset_date,NUM_OTP_ATTEMPT,otp_date,NUM_WRONG_NUM_ATTEMPT
      INTO v_num_reset_attempt,
        v_reset_date,v_num_otp_attempt,v_otp_date,v_WRONG_NUM_ATTEMPT
      FROM cms_cust_attempt_details
      WHERE  
      mobile_no = p_mobile_no
      AND forget_flag       IS NULL
      AND wrong_num_flag    IS NULL
      and action_name = p_action_name
      AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
    --  and OTP_LINK_FLAG=p_link_flg
    ;


   -- if (v_num_otp_attempt >= v_otp_attempts OR v_num_reset_attempt >= v_otp_attempts OR v_WRONG_NUM_ATTEMPT >=3) --AND (24* (sysdate - case when v_otp_date is null then v_reset_date else v_otp_date end)) <= 24
    IF v_num_otp_attempt >= v_otp_attempts   THEN

        dbms_output.put_line('attempt 4 '||sql%rowcount);

        p_status:='1';
        p_msg   :='You have exceeded maximum number of OTP attempts. Please try after '||v_otp_exp_time||' minutes';

    ELSE 

        UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate,
            NUM_OTP_ATTEMPT  =nvl(NUM_OTP_ATTEMPT,0)+1
        WHERE 
        mobile_no = p_mobile_no
        AND forget_flag       IS NULL
        and wrong_num_flag is null
        and action_name = p_action_name
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate
        --and OTP_LINK_FLAG=p_link_flg
        ;

        v_row_cnt           :=sql%rowcount;

        insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('SP_GET_AND_VERIFY_OTP','SP_GET_AND_VERIFY_OTP end','PROCEDURE','p_mobile_no for: '||p_mobile_no ||'--update count '||v_row_cnt||' p_link_flg '||p_link_flg,sysdate);

        COMMIT;
        dbms_output.put_line('attempts '||sql%rowcount);

        p_status:='0';
        p_msg   :='SUCCESS';
        dbms_output.put_line('p_msg '||p_status);

      END IF;
      
    END IF;    
    
   ELSIF  p_request_flag = 'V' then
   
--   select OTP_CARD_EXP 
--    into v_otp_exp_time
--    from cms_issuer_config 
--    where issuer_id = p_issuer_id;
	
	
	SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND
            ref_txn_id = p_ref_txn_id;
--        AND
--            SYSDATE BETWEEN otp_generated_time AND otp_expiry_time;

    IF
        v_cnt = 0
    THEN
        RAISE invalid_reference_txn_id;
    END IF;


    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile_no
            OR
                mobile_number = '91' || p_mobile_no
        );
--        AND
--            otp_expiry_time >= SYSDATE;

    dbms_output.put_line('Mobile No: ' || p_mobile_no);
    dbms_output.put_line('Mobile COUNT: ' || v_cnt);
    IF
        v_cnt = 0
    THEN
        RAISE invalid_mobile_no;
    END IF;
	
	
    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_invalid_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND (
                mobile_number = p_mobile_no
            OR
                mobile_number = '91' || p_mobile_no
        ) AND
            sys_txn_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;

    IF
        v_cnt >= v_otp_attempts
    THEN
        p_msg := 'OTP attempt exceeded.Please try again after '|v_otp_exp_time|' minutes';
         p_status := '12';
        return;
    END IF;



    SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE service_name = p_service_name
        AND ref_txn_id = p_ref_txn_id
		AND (mobile_number = p_mobile_no
            OR mobile_number = '91' || p_mobile_no)
        AND otp = p_otp;
--        AND
--            SYSDATE BETWEEN otp_generated_time AND otp_expiry_time;

    IF
        v_cnt = 0
    THEN
        RAISE invalid_otp;
    END IF;
	
	
	
	SELECT
        COUNT(1)
    INTO
        v_cnt
    FROM
        cms_otp_details
    WHERE
            upper(service_name) = upper(p_service_name)
        AND
            ref_txn_id = p_ref_txn_id
        AND
            otp = p_otp
        AND
            otp_expiry_time >= SYSDATE;

    IF
        v_cnt = 0
    THEN
        RAISE otp_expired;
		
   end if;
   
   SELECT
        otp
    INTO
        v_otp
    FROM
        (
            SELECT
                otp
            FROM
                cms_otp_details
            WHERE  upper(service_name) = upper(p_service_name)
                AND ( mobile_number = p_mobile_no
                    OR mobile_number = '91' || p_mobile_no) 
			    AND otp_expiry_time >= SYSDATE
            ORDER BY otp_generated_time DESC
        )
    WHERE
        ROWNUM = 1;

    IF
        v_otp = p_otp
    THEN
        p_msg := 'SUCCESS';
        p_status := '00';
        dbms_output.put_line(p_msg);

    UPDATE cms_cust_attempt_details
        SET OTP_FLAG       ='Y',
            OTP_DATE         =sysdate,
            NUM_OTP_ATTEMPT  =0
        WHERE  
        mobile_no        =p_mobile_no
        AND forget_flag       IS NULL
        and wrong_num_flag    IS NULL
		and action_name =p_action_name
        AND entry_date BETWEEN sysdate - (v_otp_exp_time/24/60) and sysdate;
        
       
    ELSE
        RAISE invalid_resend_otp;
    END IF;          
   
   END IF;


EXCEPTION

WHEN invalid_otp then

        INSERT INTO cms_invalid_otp_details (
            id,
            mobile_number,
            service_name,
            invalid_otp,
            sys_txn_date
        ) VALUES (
            invalid_otp_seq.NEXTVAL,
            p_mobile_no,
            p_service_name,
            p_otp,
            SYSDATE
        );
        p_msg := 'Invalid OTP';
        p_status := '01';
        dbms_output.put_line(p_msg);
    WHEN invalid_reference_txn_id THEN
        p_msg := 'Invalid Ref Txn Id';
        p_status := '02';
        dbms_output.put_line(p_msg);
    WHEN invalid_service_name THEN
        p_msg := 'Invalid Ref Service Name';
        p_status := '03';
        dbms_output.put_line(p_msg);
    WHEN invalid_otp_service_name THEN
        p_msg := 'Invalid Otp and Ref Service Name';
        p_status := '04';
        dbms_output.put_line(p_msg);
    WHEN invalid_txn_id_service_name THEN
        p_msg := 'Invalid Txn ID and Ref Service Name';
        p_status := '05';
        dbms_output.put_line(p_msg);
    WHEN invalid_otp_txn_id THEN
        p_msg := 'Invalid OTP and Ref Txn ID';
        p_status := '06';
        dbms_output.put_line(p_msg);
    WHEN invalid_all_input THEN
        p_msg := 'Invalid Ref Service Name,Ref Txn ID and OTP';
        p_status := '07';
        dbms_output.put_line(p_msg);
     WHEN invalid_mobile_no THEN
        p_msg := 'Invalid Mobile Number';
        p_status := '08';
        dbms_output.put_line(p_msg);
    WHEN invalid_resend_otp THEN
        INSERT INTO cms_invalid_otp_details (
            id,
            mobile_number,
            service_name,
            invalid_otp,
            sys_txn_date
        ) VALUES (
            invalid_otp_seq.NEXTVAL,
            p_mobile_no,
            p_service_name,
            p_otp,
            SYSDATE
        );

     --  COMMIT;
        p_msg := 'Invalid OTP .please try again with correct otp';
        p_status := '09';
        dbms_output.put_line(p_msg);     
    WHEN otp_expired THEN
        UPDATE cms_otp_details
            SET
                status = 'D'
        WHERE
                otp = p_otp
            AND
                ref_txn_id = p_ref_txn_id
            AND
                service_name = p_service_name
            AND
                status = 'A'
            AND
                SYSDATE >= otp_expiry_time;

        p_msg := 'OTP Expired';
        p_status := '10';
        dbms_output.put_line(p_msg);
		
WHEN OTHERS THEN

  p_status:='01';
  p_msg   :='Exception'||sqlerrm;
  insert into processlog(PROCESS_ID, OBJECT_NAME, OBJECT_TYPE, COMMENTS, ENTRY_DATE) values('SP_GET_AND_VERIFY_OTP','SP_GET_AND_VERIFY_OTP start','PROCEDURE','p_mobile_no for: err '||SQLCODE||sqlerrm,sysdate);
  DBMS_OUTPUT.PUT_LINE('Error Occurred '||SQLCODE||sqlerrm);
					   --||dbms_utility.format_error_backtrace);

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_get_card_detail_by_mob_crn(p_mobile numeric, p_crn character varying, p_count numeric, OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$ 

begin

if p_mobile is not null and p_count is not null then 
   
   open p_out for
   
   select Merchant_name,
          Transaction_Amount, 
          Transaction_Date,
          Transaction_Type,
          DRCR from 
   (select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013||f012,'yymmddhh24miss'),'DD-MM-YYYY hh24:mi:ss') Transaction_Date,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f043  Merchant_name,
                                    sys_txn_date
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                       join card_detail cd on cd.hash_card_number = d.f002
                                   WHERE
                                      cd.mobile_no = p_mobile
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013||f012,'yymmddhh24miss'),'DD-MM-YYYY hh24:mi:ss') Transaction_Date,                                  
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,                                   
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f043  Merchant_name,
                                    sys_txn_date
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( d.txn_type = t.txn_type )
                                  join card_detail cd on cd.hash_card_number = d.f002
                                   WHERE
                                      cd.mobile_no = p_mobile
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY hh24:mi:ss') Transaction_Date,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    d.dr_cr_flag  DRCR,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Merchant_name,
                                    d.date_time
                                      FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                  join card_detail cd on cd.hash_card_number = d.card_enc
                                   WHERE
                                      cd.mobile_no = p_mobile                               
                                   UNION ALL
                                    select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY hh24:mi:ss') Transaction_Date,
                                    t.txn_name  Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = cd.card_ref_number))  Transaction_Description,
                                    TRANSACTION_DATE
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                  join card_detail cd on cd.hash_card_number = d.card_number
                                   WHERE
                                      cd.mobile_no = p_mobile
                                 )   
                                order by sys_txn_date desc limit p_count
                                 ;


elsif p_crn is not null and p_count is not null then


open p_out for
select Merchant_name,
          Transaction_Amount, 
          Transaction_Date,
          Transaction_Type,
          DRCR from 
   (select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013||f012,'yymmddhh24miss'),'DD-MM-YYYY hh24:mi:ss') Transaction_Date,
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f043  Merchant_name,
                                    sys_txn_date
                                   FROM
                                       aswt_switch_txn_authrization   d
                                       JOIN transaction_type   t ON ( d.txn_type = t.txn_type )
                                       join card_detail cd on cd.hash_card_number = d.f002
                                   WHERE
                                      cd.card_ref_number  = p_crn
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013||f012,'yymmddhh24miss'),'DD-MM-YYYY hh24:mi:ss') Transaction_Date,                                  
                                    t.txn_name Transaction_Type,
                                    d.f004/100  Transaction_Amount,                                   
                                    decode(d.drcr,'D','Dr','C','Cr',d.drcr)  DRCR,
                                    d.f043  Merchant_name,
                                    sys_txn_date
                                   FROM
                                       aswt_switch_txn_offline   d
                                       JOIN transaction_type    t ON ( d.txn_type = t.txn_type )
                                  join card_detail cd on cd.hash_card_number = d.f002
                                   WHERE
                                      cd.card_ref_number  = p_crn
                                       AND f039 = '00'
                                       and f004/100 > 0
                                   UNION ALL
                                   select to_char(d.date_time,'DD-MM-YYYY hh24:mi:ss') Transaction_Date,
                                    t.txn_name Transaction_Type,
                                    d.txn_amount  Transaction_Amount,
                                    d.dr_cr_flag  DRCR,
                                    (select name from cms_outlet co where co.outlet_id = d.mid)  Merchant_name,
                                    d.date_time
                                      FROM
                                       digital_txn_authorization   d
                                       JOIN transaction_type       t ON ( d.txn_type = t.txn_type )
                                  join card_detail cd on cd.hash_card_number = d.card_enc
                                   WHERE
                                      cd.card_ref_number  = p_crn                             
                                   UNION ALL
                                    select to_char(d.TRANSACTION_DATE,'DD-MM-YYYY') Transaction_Date,
                                    t.txn_name  Transaction_Type,
                                    d.AMOUNT  Transaction_Amount,
                                    decode(d.DR_CR_IND,'D','Dr','C','Cr',d.DR_CR_IND)   DRCR,
                                    (select co."name" from cms_outlet co 
                                    where co.outlet_id = (select ccde.mo_id from cms_card_detail_extention ccde where ccde.card_ref_no = cd.card_ref_number))  Transaction_Description,
                                    TRANSACTION_DATE
                                   FROM
                                       cs_manual_adjustment   d
                                       JOIN transaction_type  t ON ( d.txn_type = t.txn_type )
                                  join card_detail cd on cd.hash_card_number = d.card_number
                                   WHERE
                                      cd.card_ref_number  = p_crn
                                 )   
                                order by sys_txn_date desc limit p_count
                                 ;


end if;

p_msg := 'Success';

exception
when others then
p_msg := 'Error '||sqlerrm;

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_get_wallet_id(p_hash_card character varying, p_pre_account_nuber character varying, p_product_id numeric, p_amount numeric, OUT p_wallet numeric, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$ 

v_card_count number;
v_product_id number;
v_mcc_cnt  number;
v_wallet_cnt number;
v_zero_wallet  number;
v_zero_bal number;

v_is_multiwallet  varchar2(2);

invalid_card  exception;
invalid_wallet exception;

begin

	
	select  cp.is_multi_wallet 
	into v_is_multiwallet
	from card_detail cd 
	join cms_product cp on cp.id = cd.product_id 
	where cd.hash_card_number  = p_hash_card;


  dbms_output.put_line(' v_is_multiwallet '||v_is_multiwallet);
	
   
    select count(1) 
  into v_zero_wallet
  from account_details ad 
  where account_number = p_pre_account_nuber
  and wallet_id = 0;
 
-- dbms_output.put_line(' v_zero_wallet '||v_zero_wallet);
 
 if v_zero_wallet = 1 then 
 
   p_wallet := 0;
  
  -- dbms_output.put_line(' p_wallet '||p_wallet);
  
   v_zero_bal := balance_check_card(p_hash_card);
   p_msg := case when v_zero_bal> p_amount then 'Success' else '01' end;
   
   dbms_output.put_line(' v_zero_bal '||v_zero_bal);
  
 return;
 end if;

 if v_is_multiwallet = 'Y'  then
 
  FOr x in ( select wm.wallet_id ,
			 wm.key_identifier,
			 wpm.priority_order,
			 balance_check_wallet(p_hash_card,wm.wallet_id)  bal    
	 from  wallet_master wm 
	join wallet_profile_mapping wpm on wpm.wallet_id  = wm.wallet_id 
	join prd_wallet_profile pwp on pwp.wallet_profile_id  = wpm.wallet_profile_id 
	join account_details ad on ad.wallet_id  = wm.wallet_id and ad.account_number  = p_pre_account_nuber
	where pwp.product_id = p_product_id
	and wm.is_general_wallet  = 'Y'
	order by wpm.priority_order) loop
	
	-- dbms_output.put_line(x.bal||' current bal '||p_amount);
	
	 if x.bal >= p_amount  then  
	 
	  p_wallet := x.wallet_id;
	  p_msg := 'Success';
	  return;
	 else
	 continue;
	 null;
	 end if;
	
	end loop;     

else

  FOr x in ( select wm.wallet_id ,
			 wm.key_identifier,
			 wpm.priority_order,
			 balance_check_wallet(p_hash_card,wm.wallet_id)  bal    
	 from  wallet_master wm 
	join wallet_profile_mapping wpm on wpm.wallet_id  = wm.wallet_id 
	join prd_wallet_profile pwp on pwp.wallet_profile_id  = wpm.wallet_profile_id 
	join account_details ad on ad.wallet_id  = wm.wallet_id and ad.account_number  = p_pre_account_nuber
	where pwp.product_id = p_product_id
	order by wpm.priority_order) loop
	
	-- dbms_output.put_line(x.bal||' current bal '||p_amount);
	
	 if x.bal >= p_amount  then  
	 
	  p_wallet := x.wallet_id;
	  p_msg := 'Success';
	  return;
	 else
	 continue;
	 null;
	 end if;
	
	end loop;     

end if;

   dbms_output.put_line(' p_wallet '||p_wallet);
	
	IF p_wallet = null  then
     
	 p_wallet := null;
	 p_msg := '01';
	 
     end if;

exception
when invalid_wallet then
p_msg := 'Wallet Not Found';
when others then 
p_msg := 'Fail'||sqlerrm;
 dbms_output.put_line(' p_msg '||p_msg);

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_harmonization_exception()
 SECURITY DEFINER
AS $procedure$

pragma autonomous_transaction;
begin

update harmonization_Exception_rpt h
set cr_adj = 'Y'
where exists (select 1 from card_Detail cd where cd.old_card_no = h.f002)
and h.cr_adj is null;

commit;

end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_hotlist_thl_card()
 SECURITY DEFINER
AS $procedure$

    v_txn_count          NUMBER := 0;
    v_count              NUMBER := 0;
    cur_rec              SYS_REFCURSOR;
    p_out                VARCHAR2(100);
    p_out2               VARCHAR2(100);
    v_reason_code        cms_hotlisted_reason_code.reason_code%TYPE;
    v_reason_message     cms_hotlisted_reason_code.reason_message%TYPE;
    v_og_last_txn_date   cms_temp_hotlist_log.last_transaction_date%TYPE;
    v_last_txn_type      cms_temp_hotlist_log.last_txn_type%TYPE;
    TYPE t_rec IS RECORD (
        hash_card_number        card_detail.hash_card_number%TYPE,
        customer_name           card_detail.customer_name%TYPE,
        mobile_no               card_detail.mobile_no%TYPE,
        card_ref_number         card_detail.card_ref_number%TYPE,
        issued_date             cms_card_detail_extention.issued_date%TYPE,
        status                  card_detail.status%TYPE,
        card_activated_on       card_detail.card_activated_on%TYPE,
        hotlisted_reason_code   card_detail.hotlisted_reason_code%TYPE,
        last_transaction_date   DATE
    );
    t_type               t_rec;
   
    pragma autonomous_transaction;

    v_query              VARCHAR2(3000) := 'SELECT
                       hash_card_number,
                       customer_name,
                       mobile_no,
                       card_ref_number,
                       issued_date,
                       status,
                       card_activated_on,
                       hotlisted_reason_code,
                       last_transaction_date
            FROM
                (
                    SELECT
                         a.hash_card_number,
                         a.customer_name,
                         a.mobile_no,
                         a.card_ref_number,
                         a.issued_date,
                         a.status,
                         a.card_activated_on,
                         a.hotlisted_reason_code,
                      greatest(a.card_activated_on,NVL(e.max_date,a.card_activated_on),
                                 NVL(a.KYC_UPDATED_ON,a.card_activated_on),nvl(a.reactivation_date,a.card_activated_on)) last_transaction_date   
                    FROM
                        MVWL_HOTLIST_CARD_DETAIL a,
                         (
                          SELECT
                                MAX(txn_date) max_date,
                                f002
                            FROM
                                mvwl_hotlist_thl_card
                                group by f002
                        ) e
                 WHERE a.hash_card_number = e.f002(+)
                )
            WHERE
                trunc(last_transaction_date) < trunc(add_months(SYSDATE,-12))'
    ;
begin
	
	dbms_output.put_line('Start');

    EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW MVWL_HOTLIST_THL_CARD
AS
SELECT  sys_txn_date   txn_date ,f002 ,txn_type
FROM
aswt_switch_txn_offline
WHERE
f039 = ''00''
and txn_type = ''23000''
AND drcr =''D''
UNION ALL
SELECT
sys_txn_date   txn_date,f002 ,txn_type
FROM
aswt_switch_txn_authrization
WHERE
f039 = ''00''
and txn_type in (''21000'',''21028'',''21029'')
AND drcr in(''D'',''C'')
UNION ALL
SELECT
date_time   txn_date ,card_enc ,txn_type
FROM
digital_txn_authorization
where txn_type not in(''91029'',''97029'',''97030'')'
    ;
    
   dbms_output.put_line('created');
   
    EXECUTE IMMEDIATE 'create index idx_MVWL_HOTLIST on MVWL_HOTLIST_THL_CARD(f002) ';
   -- EXECUTE IMMEDIATE 'alter index idx_MVWL_HOTLIST noparallel';
    EXECUTE IMMEDIATE ' create MATERIALIZED view MVWL_HOTLIST_CARD_DETAIL as
                    SELECT
                        hash_card_number,
                        a.customer_name,
                        a.mobile_no,
                        a.card_ref_number,
                        b.issued_date,
                        a.status,
                        a.card_activated_on,
                        a.reactivation_date,
                        a.hotlisted_reason_code,
                        c.kyc_updated_on
                    FROM
                        card_detail a,
                        cms_card_detail_extention b,
                        cms_cust_details_extension c 
                    WHERE
                        a.card_ref_number = b.card_ref_no
                        AND a.cust_seq_id = c.cust_seq_id
                        AND a.status = ''A''
                        AND trunc(add_months(SYSDATE,-12)) >= trunc(a.card_activated_on)  
                        AND b.issued_date IS NOT NULL'
    ;

    dbms_output.put_line('before');
   
    EXECUTE IMMEDIATE 'SELECT
    COUNT(1)
FROM
    (
        SELECT
         greatest(a.card_activated_on,coalesce(e.max_date,a.card_activated_on),
                                 coalesce(a.KYC_UPDATED_ON,a.card_activated_on),coalesce(a.reactivation_date,a.card_activated_on)) last_transaction_date   
        FROM
            MVWL_HOTLIST_CARD_DETAIL a,
            (
            SELECT
                                MAX(txn_date) max_date,
                                f002
                            FROM
                                mvwl_hotlist_thl_card
                                group by f002
            ) e
        WHERE a.hash_card_number = e.f002(+)

    )
WHERE
    trunc(last_transaction_date) < trunc(add_months(sysdate, - 12))'
    INTO v_txn_count;
    
    IF v_txn_count > 0 then
    
      
   dbms_output.put_line('loop');

    --cursor for to make number of card thl
        OPEN cur_rec FOR v_query;

        LOOP
            FETCH cur_rec INTO t_type;
            EXIT WHEN cur_rec%notfound;            
--reason code for thl one year
            SELECT
                reason_code,
                reason_message
            INTO
                v_reason_code,
                v_reason_message
            FROM
                cms_hotlisted_reason_code
            WHERE
                reason_code = '1001';

        -- cms_card_detail history  insert and update card status

            INSERT INTO cms_card_detail_history (
                old_pan,
                new_pan,
                cust_name,
                status_flag,
                serial_no,
                insert_time,
                email_time,
                remark,
                channel_id,
                pin_offset,
                reason_code,
                caf_flag,
                caf_generated_by,
                caf_generation_date,
                caf_eligibility,
                cust_seq,
                old_mask_card_no,
                new_mask_card_no,
                new_card_ref_number,
                old_card_ref_number,
                card_ref_number
            )
                SELECT
                    a.hash_card_number,
                    a.hash_card_number,
                    b.first_name
                    || ' '
                    || b.last_name,
                    'THL',
                    serial_no_seq.NEXTVAL,
                    sysdate,
                    sysdate,
                    NULL,
                    0,
                    NULL,
                    '12' reason_code,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    a.cust_seq_id,
                    c.mask_card_number,
                    c.mask_card_number,
                    a.card_ref_number,
                    a.card_ref_number,
                    a.card_ref_number
                FROM
                    card_detail                 a,
                    cms_cust_details            b,
                    cms_card_detail_extention   c
                WHERE
                    a.card_ref_number = c.card_ref_no
                    AND a.cust_seq_id = b.cust_seq_id
                    AND a.hash_card_number = t_type.hash_card_number;

            UPDATE card_detail
            SET
                status = 'THL',
                hotlisted_reason_code = v_reason_code,
                deactivation_date = sysdate
            WHERE
                hash_card_number = t_type.hash_card_number;

            INSERT INTO cms_temp_hotlist_log (
                id,
                card_ref_number,
                insert_time,
                last_transaction_date,
                previous_card_status,
                current_card_status,
                temp_reason_code,
                temp_reason_desc,
                remarks,
                last_txn_type
            ) VALUES (
                cms_tmp_hotlist_log.NEXTVAL,
                t_type.card_ref_number,
                sysdate,
                v_og_last_txn_date,
                t_type.status,
                'THL',
                v_reason_code,
                v_reason_message,
                'Card has been temporary blocked',
                v_last_txn_type
            );

        END LOOP;

    END IF;

    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW MVWL_HOTLIST_THL_CARD';
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW MVWL_HOTLIST_CARD_DETAIL';
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('ERROR OCCURRED...'||sqlcode|| sqlerrm);
        ROLLBACK;
        EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW MVWL_HOTLIST_THL_CARD';
        EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW MVWL_HOTLIST_CARD_DETAIL';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_interchange_revenue_report(p_issuer_id numeric, OUT p_report_name character varying, OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

begin

open p_out for
SELECT  CDE.MASK_CARD_NUMBER "CARD NUMBER",
                'NA' "ISSUANCE DATE",
             TO_CHAR(TO_DATE(NVL(TO_CHAR(A.TRML_DATE,'YY'),SUBSTR(A.TXN_DATE, 7, 2))||A.F013, 'YYMMDD'),'DD-MON-YY') "TRANSACTION DATE",
             TO_CHAR(TO_DATE(F012,'HH24MISS'),'HH24:MI:SS') "TRANSACTION TIME",
           CASE WHEN A.F022 LIKE '%81%' THEN 'ECOMM'
               WHEN A.F022 NOT LIKE '%81%' THEN 'POS' END   "TRAN_MODE",
NVL((
SELECT
TXN_NAME
FROM
SUB_TRANSACTION_TYPE
WHERE
SUB_TXN_TYPE  = A.INT_TXN_TYPE
)
 ,
(
SELECT
TXN_NAME
FROM
TRANSACTION_TYPE
WHERE
TXN_TYPE = A.TXN_TYPE
)) "TRANSACTION_TYPE",
       A.F004 / 100      "TRANSACTION AMOUNT",
            'DEBIT' "DRCR",
            'NA' "COMMISSION",
            'APPROVED' "STATUS OF TRANSACTION",
            'SETTLE' "SETTLEMENT STATUS",
             A.F041 "TERMINAL ID",
             A.F043 "MERCHANT NAME",
             A.F042 "MERCHANT ID",
             A.F018 "MCC",
            DE043_MERCH_ADDR
           || DE043_MERCH_CITY
           || DE043_MERCH_COUNTRY
           || DE043_MERCH_STATE
           || DE043_MERCH_ZIPCODE "MERCHANT LOCATION",
            A.TICKET_ID "TICKET ID",
            A.F037 "UNIQUE ID",
            A.F038 "AUTHORIZATION CODE",
            CD.CARD_REF_NUMBER "CRN",
            I.ISSUER_NAME "PARTNER NAME",
            CP.NAME "PRODUCT NAME",
            (SELECT KEY_IDENTIFIER  FROM WALLET_MASTER WM WHERE WM.WALLET_ID = A.WALLET_ID) "WALLET ID",
            CASE WHEN A.F022 LIKE '%81%' THEN 'ECOMM'
               WHEN A.F022 NOT LIKE '%81%' THEN 'POS' END "CHANNEL TYPE",
            TO_CHAR(TO_DATE(PDS0159_SETT_DATE, 'YYMMDD'), 'DD MON YY')  "SETTLE_DATE",
            DE004/100 "BILL_AMOUNT",                   
            (SELECT CRN_TYPE  FROM PRD_BIN_PROFILE B WHERE B.PRODUCT_ID  = CP.ID) "CRN_TYPE",
            CP.ID "PROD_ID",
            CS.DE031 "ARN",
            CS.DE032 "ACQUIRING_ID",
            CAST(PDS0146_FEE_AMT_1 / 100 AS FLOAT) "INTERCHANGE_AMOUNT",  
            cast(((de004/100)*0.5)/100 as float) "SWITCHING FEE RECEIVED from NPCI",
            PDS0146_FEE_AMT_1 / 100 -(((de004/100)*0.5)/100) "NET INTERCHANGE",
            (SELECT INS.INSTITUTION_NAME  FROM INSTITUTION INS WHERE INS.ID = I.INST_ID ) "INSTITUTION/ BANK",
            ((PDS0146_FEE_AMT_1 / 100 -(((de004/100)*0.5)/100))*CP.BANK_SHARE)/100  "INTERCHANGE AMOUNT OF INSTITUTION/ BANK",
            ((PDS0146_FEE_AMT_1 / 100 -(((de004/100)*0.5)/100))*CP.PAYCRAFT_SHARE)/100  "INTERCHANGE AMOUNT of  PAYCRAFT",
            I.ISSUER_NAME  "ISSUER / CLIENT",
            ((PDS0146_FEE_AMT_1 / 100 -(((de004/100)*0.5)/100))*CP.ISSUER_SHARE)/100   "INTERCHANGE AMOUNT OF ISSUER / CLIENT",
            ((PDS0146_FEE_AMT_1 / 100 -(((de004/100)*0.5)/100))*CP.OTHERS_SHARE)/100 "ANY OTHER"
         FROM ASWT_SWITCH_TXN_AUTHRIZATION A 
         JOIN CARD_DETAIL CD ON CD.HASH_CARD_NUMBER = A.F002
         JOIN CARD_ENCRYPTION_DETAIL CE ON CE.CARD_REF_NUMBER = CD.CARD_REF_NUMBER
         JOIN CMS_CARD_DETAIL_EXTENTION CDE ON CDE.CARD_REF_NO = CD.CARD_REF_NUMBER
         JOIN CMS_PRODUCT CP ON CP.ID = CD.PRODUCT_ID
         JOIN ISSUER I ON I.ID = CD.ISSUER_ID
         JOIN CS_RUPAY_IN CS ON CS.DE002 = CE.ENRYPTED_CARD_NO AND CS.PROCESS_ID = A.CS_PROCESS_ID
                             AND CS.ID = A.CS_ID
          WHERE A.TXN_TYPE = 21000 AND F039='00'
         AND A.SETTLE_FLAG  = 'Y'
         AND PDS0146_FEE_AMT_1 IS NOT null
         AND TRUNC(TO_DATE(PDS0159_SETT_DATE, 'YYMMDD')) >= trunc(sysdate-1)
         and cd.issuer_id = p_issuer_id
		 ;

p_report_name := 'INTERCHANGE REVENUE DISTRIBUTED REPORT_'||to_char(sysdate-1,'dd-mm-yyyy');
p_msg := 'Success';

exception 
when others then 
p_msg := 'Error'||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_card_statement(p_card_ref_number character varying, p_txn_count character varying, p_from_date character varying, p_to_date character varying, p_txn_type character varying, OUT p_msg character varying, OUT p_msg_code character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

    v_first              NUMBER := 1;
    v_last               NUMBER := p_txn_count;
    v_hash_no   card_detail.hash_card_number%TYPE;
    v_count              NUMBER;
	v_product_id         NUMBER;
	v_offline_stmt_flag  varchar2(2) default 'N';
BEGIN
	
	SELECT
        hash_card_number,product_id
    INTO v_hash_no,v_product_id
    FROM
        card_detail
    WHERE
        card_ref_number = p_card_ref_number;


      
 select offline_statement_flag 
 into v_offline_stmt_flag
 from prd_balance_profile pbp 
 where product_id = v_product_id;	  
	  
  IF v_offline_stmt_flag = 'N'  then	  
    p_msg :='Offline statement is disabled';
	p_msg_code := '01';
 else
 

  IF p_from_date IS NULL AND p_to_date IS NULL AND p_txn_type IS NULL and (p_txn_count IS NOT NULL OR p_txn_count > 0 ) THEN  
     
	  OPEN p_out for
	  
	  select  "Channel type",
	         "crDrFlag",
	         "terminalId",
	         "txnAmount",
	         "txnCurrency",
	         "txnDate",
	         "txnTime",
	         "txnDescription",
	         "txnId",
	         "txnType" from
	  (select case when f022 like '%81%' then 'ECOMM'
           else 'POS' end "Channel type",
            decode(d.drcr,'D','Dr','C','Cr',d.drcr) "crDrFlag",
            f041 "terminalId",
            case when txn_type = '21029' then rfu_7/100
            else f004/100 end "txnAmount",
            (select country_code_alpha  from country_code_map cm where country_code_num =f049) "txnCurrency",
            to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "txnDate",
            to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "txnTime",
            d.f043 "txnDescription",
            d.f037  "txnId",
            case when txn_type = '23000' then 'Offline Debit' 
                when txn_type = '21029' then 'Money Add by Balance Sync' 
	            when rfu_6 = '01' then 'Money add by account'
                when rfu_6 = '02' then 'Money add by cash' end  "txnType",
            sys_txn_date
   from aswt_switch_txn_offline d 
   where f002 = v_hash_no 
   and f039 = '00'
   and txn_type in ('21028','23000','21029')
	  union all
	    select case when f022 like '%81%' then 'ECOMM'
           else 'POS' end "Channel type",
            decode(d.drcr,'D','Dr','C','Cr',d.drcr) "crDrFlag",
            f041 "terminalId",
            case when txn_type = '21029' then csu_amount/100
            else f004/100 end "txnAmount",
            (select country_code_alpha  from country_code_map cm where country_code_num =f049) "txnCurrency",
            to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "txnDate",
            to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "txnTime",
            d.f043  "txnDescription",
            d.f037  "txnId",
            case when txn_type = '21029' then 'Money Add by Balance Sync' 
	            when fund_source = '01' then 'Money add by account'
                when fund_source = '02' then 'Money add by cash' end   "txnType",
            sys_txn_date
   from aswt_switch_txn_authrization d 
   where f002 = v_hash_no 
   and f039 = '00'
   and txn_type in ('21028','21029')
   and fund_source in ('01','02','00')
   )
   order by sys_txn_date desc limit v_last; 
     
	 elsif p_from_date IS not NULL AND p_to_date IS not NULL AND p_txn_type IS NULL and p_txn_count is null THEN  
	 
	 OPEN p_out for
	 
	 select "Channel type",
	         "crDrFlag",
	         "terminalId",
	         "txnAmount",
	         "txnCurrency",
	         "txnDate",
	         "txnTime",
	         "txnDescription",
	         "txnId",
	         "txnType" from
	 (select case when f022 like '%81%' then 'ECOMM'
           else 'POS' end "Channel type",
            decode(d.drcr,'D','Dr','C','Cr',d.drcr) "crDrFlag",
            f041 "terminalId",
            case when txn_type = '21029' then rfu_7/100
            else f004/100 end "txnAmount",
            (select country_code_alpha  from country_code_map cm where country_code_num =f049) "txnCurrency",
            to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "txnDate",
            to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "txnTime",
            d.f043 "txnDescription",
            d.f037  "txnId",
            case when txn_type = '23000' then 'Offline Debit' 
               when txn_type = '21029' then 'Money Add by Balance Sync' 
	            when rfu_6 = '01' then 'Money add by account'
                when rfu_6 = '02' then 'Money add by cash' end   "txnType",
            sys_txn_date
   from aswt_switch_txn_offline d 
   where f002 = v_hash_no 
   and txn_type in ('21028','23000','21029')
   and f039 = '00' 
   AND trunc(d.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
union all	 
	       select case when f022 like '%81%' then 'ECOMM'
           else 'POS' end "Channel type",
            decode(d.drcr,'D','Dr','C','Cr',d.drcr) "crDrFlag",
            f041 "terminalId",
            case when txn_type = '21029' then csu_amount/100
            else f004/100 end "txnAmount",
            (select country_code_alpha  from country_code_map cm where country_code_num =f049) "txnCurrency",
            to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "txnDate",
            to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "txnTime",
            d.f043 "txnDescription",
            d.f037  "txnId",
            case when txn_type = '21029' then 'Money Add by Balance Sync' 
	            when fund_source = '01' then 'Money add by account'
                when fund_source = '02' then 'Money add by cash' end   "txnType",
            sys_txn_date
   from aswt_switch_txn_authrization d 
   where f002 = v_hash_no 
   and txn_type in ('21028','21029')
   and f039 = '00'
   and fund_source in ('01','02','00')
   AND trunc(d.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
   )order by sys_txn_date desc ; 
   
   elsif p_from_date IS not NULL AND p_to_date IS not NULL AND p_txn_type IS NOT NULL THEN  
	 
	 OPEN p_out for
	 
	  select "Channel type",
	         "crDrFlag",
	         "terminalId",
	         "txnAmount",
	         "txnCurrency",
	         "txnDate",
	         "txnTime",
	         "txnDescription",
	         "txnId",
	         "txnType"
	      from
	 (select case when f022 like '%81%' then 'ECOMM'
           else 'POS' end "Channel type",
            decode(d.drcr,'D','Dr','C','Cr',d.drcr) "crDrFlag",
            f041 "terminalId",
            case when txn_type = '21029' then rfu_7/100
            else f004/100 end "txnAmount",
            (select country_code_alpha  from country_code_map cm where country_code_num =f049) "txnCurrency",
            to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "txnDate",
            to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "txnTime",
            d.f043 "txnDescription",
            d.f037  "txnId",
            case when txn_type = '23000' then 'Offline Debit' 
                when txn_type = '21029' then 'Money Add by Balance Sync' 
	            when rfu_6 = '01' then 'Money add by account'
                when rfu_6 = '02' then 'Money add by cash' end   "txnType",
            sys_txn_date
   from aswt_switch_txn_offline d 
   where f002 = v_hash_no 
   and txn_type = p_txn_type
   and f039 = '00'
   AND trunc(d.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')	 
   union all
	       select case when f022 like '%81%' then 'ECOMM'
           else 'POS' end "Channel type",
            decode(d.drcr,'D','Dr','C','Cr',d.drcr) "crDrFlag",
            f041 "terminalId",
            case when txn_type = '21029' then csu_amount/100
            else f004/100 end "txnAmount",
            (select country_code_alpha  from country_code_map cm where country_code_num =f049) "txnCurrency",
            to_char(to_Date(nvl(to_char(trml_date,'YY'),substr(txn_date,7,2))||f013,'yymmdd'),'DD-MM-YYYY') "txnDate",
            to_char(to_date(f012,'hh24miss'),'hh24:mi:ss') "txnTime",
            d.f043 "txnDescription",
            d.f037  "txnId",
            case when txn_type = '21029' then 'Money Add by Balance Sync' 
	            when fund_source = '01' then 'Money add by account'
                when fund_source = '02' then 'Money add by cash' end   "txnType",
            sys_txn_date
   from aswt_switch_txn_authrization d 
   where f002 = v_hash_no 
   and f039 = '00'
   and fund_source in ('01','02','00')
   and txn_type = p_txn_type
   AND trunc(d.sys_txn_date) BETWEEN to_date(p_from_date, 'DD/MM/YYYY') AND to_date(p_to_date, 'dd/mm/yyyy')
   )
  order by sys_txn_date desc ; 
	 
	end if; 
 
 
 
    p_msg :='success';
	p_msg_code := '00';
 end if;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('In Exception '
                             || sqlcode
                             || ' Error Message: '
                             || sqlerrm);
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_debit_recovery_main(OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$
cursor c1 is

   select b.*,
   TO_DATE(NVL(to_char(b.trml_date,'YY'),SUBSTR(b.TXN_DATE,7,2))|| b.f013,'YYMMDD') as txn_auth_date,
   a.status,a.replacement_flag,a.process_id,a.id from  ASWT_SWITCH_TXN_AUTHRIZATION b join
   (SELECT
                        cs.de031,
                        cs.de012,
                        cs.de038,
                        cs.de041,
                        cs.de002,
                        cs.de024,
                        cs.mti,
                        cd.hash_card_number,
                        cs.de004,
                        cs.process_id,
                        cd.status,
                        cd.replacement_flag,
                        cs.id
                    FROM
                        cs_rupay_in cs,
                        card_detail cd,
                        card_encryption_detail ced
                    WHERE
                        cs.de002 = ced.enrypted_card_no
                        AND ced.card_ref_number = cd.card_ref_number
                        and trunc(cs.PROCESS_DATE) = trunc(sysdate)
                      --  and cs.process_id = p_process_id
                )
                a ON (
                    b.f037 = substr(a.de031,11,12)
                    AND substr(b.txn_date,7,2)||b.f013 = substr(a.de012,1,6)
                    AND b.f012 = substr(a.de012,7,6)
                    AND b.f038 = a.de038
                    AND rtrim(b.f041) = a.de041
                    AND b.f002 = a.hash_card_number
                    AND b.txn_type = '21000'
                    AND b.drcr = 'R'
                    AND (b.sub_txn_type is not null AND b.sub_txn_type != '1006')                   
                    AND a.de024 = '200'
                    AND a.mti IN ('1240','0200')
                    and b.settle_flag = 'Y'
                   -- AND (b.settle_flag IS NULL OR b.settle_flag = 'N')
                    and not exists (select 1 from cs_fee_queue auth where auth.card_number = b.f002  and  auth.rrn = b.f037 and auth.tid=b.f041 and auth.fee_ind = '30001')
                    AND NOT EXISTS ( SELECT 1  FROM cs_manual_adjustment cm WHERE cm.CARD_NUMBER = b.f002 AND cm.rrn = b.f037 and b.f041 = cm.tid and cm.dr_cr_ind = 'D' and user_id = 'Debit Recovery')
                    )
                    ;
                   
                   
cursor rupay_no_auth is

   select  substr(cs.de031,11,12) f037,
                        TO_DATE(substr(cs.de012,1,6),'YYMMDD') txn_auth_date,
                        substr(cs.de012,3,4) f013,
                        substr(cs.de012,7,6) f012,
                        to_date(cs.de012,'yymmddhh24miss') trml_date,
                        de043_merch_name||de043_merch_addr||de043_merch_city||de043_merch_state f043,
                        cs.de038 f038,
                        cs.de041 f041,
                        cs.de002 ,
                        cs.de024,
                        cs.de049 f049,
                        cs.mti,
                        cd.hash_card_number f002,
                        cs.de004 f004,
                        cs.process_id,
                        cd.status,
                        cd.replacement_flag,
                        cs.id,
                        to_date(cs.pds0159_sett_date, 'yymmdd') settle_date 
                    FROM
                        cs_rupay_in cs,
                        card_detail cd,
                        card_encryption_detail ced
                    WHERE
                        cs.de002 = ced.enrypted_card_no
                        AND ced.card_ref_number = cd.card_ref_number
                        and trunc(cs.PROCESS_DATE) = trunc(sysdate)
                        and nvl(cs.cs_host_recon_flag, 'N') = 'N' 
						and nvl(already_settle_flag,'N') = 'N'
						AND cs.de024 = '200'
						AND cs.mti IN ('1240','0200')
						and to_number(substr(expiry_date,3,2)||substr(expiry_date,1,2)) >= to_number(to_char(sysdate,'yymm'))
						and not exists (select 1 from ASWT_SWITCH_TXN_AUTHRIZATION b
									    where b.f037 = substr(cs.de031,11,12)
										AND substr(b.txn_date,7,2)||b.f013 = substr(cs.de012,1,6)
										AND b.f012 = substr(cs.de012,7,6)
									   -- AND b.f038 = cs.de038
										AND rtrim(b.f041) = cs.de041
										AND b.f002 = cd.hash_card_number
										AND b.txn_type = '21000'
										and b.f039 <> '00'                   
										)
                        ;                                                  
                   
cursor rupay_decline_auth is

   select b.*,
   TO_DATE(NVL(to_char(b.trml_date,'YY'),SUBSTR(b.TXN_DATE,7,2))|| b.f013,'YYMMDD') as txn_auth_date,
   a.status,a.replacement_flag,a.process_id,a.id from  ASWT_SWITCH_TXN_AUTHRIZATION b join
   (SELECT
                        cs.de031,
                        cs.de012,
                        cs.de038,
                        cs.de041,
                        cs.de002,
                        cs.de024,
                        cs.mti,
                        cd.hash_card_number,
                        cs.de004,
                        cs.process_id,
                        cd.status,
                        cd.replacement_flag,
                        cs.id
                    FROM
                        cs_rupay_in cs,
                        card_detail cd,
                        card_encryption_detail ced
                    WHERE
                        cs.de002 = ced.enrypted_card_no
                        AND ced.card_ref_number = cd.card_ref_number
                        and trunc(cs.PROCESS_DATE) = trunc(sysdate) 
	                    and nvl(cs.cs_host_recon_flag, 'N') = 'N' 
	                    and nvl(cs.already_settle_flag,'N') = 'N'
	                   and to_number(substr(expiry_date,3,2)||substr(expiry_date,1,2)) >= to_number(to_char(sysdate,'yymm'))
                )
                a ON (
                    b.f037 = substr(a.de031,11,12)
                    AND substr(b.txn_date,7,2)||b.f013 = substr(a.de012,1,6)
                    AND b.f012 = substr(a.de012,7,6)
                   -- AND b.f038 = a.de038
                    AND rtrim(b.f041) = a.de041
                    AND b.f002 = a.hash_card_number
                    AND b.txn_type = '21000'
                    and b.f039 <> '00'                   
                    AND a.de024 = '200'
                    AND a.mti IN ('1240','0200')  
                    )
                    ;

cursor rupay_already_exist is

   select  substr(cs.de031,11,12) f037,
                        TO_DATE(substr(cs.de012,1,6),'YYMMDD') txn_auth_date,
                        substr(cs.de012,3,4) f013,
                        substr(cs.de012,7,6) f012,
                        to_date(cs.de012,'yymmddhh24miss') trml_date,
                        de043_merch_name||de043_merch_addr||de043_merch_city||de043_merch_state f043,
                        cs.de038 f038,
                        cs.de041 f041,
                        cs.de002 ,
                        cs.de024,
                        cs.de049 f049,
                        cs.mti,
                        cd.hash_card_number f002,
                        cs.de004 f004,
                        cs.process_id,
                        cd.status,
                        cd.replacement_flag,
                        cs.id,
                        to_date(cs.pds0159_sett_date, 'yymmdd') settle_date 
                    FROM
                        cs_rupay_in cs,
                        card_detail cd,
                        card_encryption_detail ced
                    WHERE
                        cs.de002 = ced.enrypted_card_no
                        AND ced.card_ref_number = cd.card_ref_number
                        and trunc(cs.PROCESS_DATE) = trunc(sysdate)
                        and cs.already_settle_flag = 'Y' 
						AND cs.de024 = '200'
						AND cs.mti IN ('1240','0200') 
						and to_number(substr(expiry_date,3,2)||substr(expiry_date,1,2)) >= to_number(to_char(sysdate,'yymm'))
                        ;          
                                          
  v_host_and_shadow_bal     VARCHAR2(30);
    v_total_bal               NUMBER := 0;
    v_host_bal                NUMBER := 0;
    v_shadow_bal              NUMBER := 0;
  v_flag        varchar2(10) := 'true';
  v_old_card varchar2(100);
  v_replaced_card varchar2(100);
  v_card_status   varchar2(5);
  v_new_old_Card varchar2(100);
   E_count   number:=0;

begin

   for x in c1 loop

   v_host_bal := 0;
   IF x.status in ('A','THL') then
      
   SELECT
            balance_calc(x.f002)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(x.f004/100) then

   INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            x.txn_auth_date ,
            x.f012,
            x.f002,
            x.id,
            'Proactive Late Settlement Debit',
            cast(x.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Debit Recovery',
            SYSDATE,
            x.f037,
            x.f038,
            x.f041,
            x.process_id,
            '30001',
            x.settle_date,
            null,
            'Proactive Late Settlement Debit',
           to_char(x.txn_auth_date,'YYMMDD'),
           'Retail Sale'
        );

   update harmonization_Exception_rpt h
   set DR_ADJ = 'Y',
       PRESENTMENT_FLAG = 'Y'
   where h.f002 = x.f002
     AND h.f037 = x.f037
     AND h.f004 = x.f004
     AND h.f013 = x.f013
     AND h.f012 = x.f012
     AND h.f041 = x.f041
     and h.txn_type = x.txn_type
    ;

   else

    INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Debit Recovery',
                        x.f002,
                        cast(x.f004/100 as float),
                        x.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        x.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        x.process_id,
                        x.settle_date,
                        x.id,
                        x.f038,
                        'Retail Sale',
                        'Proactive Late Settlement Debit'
                    );

   end if;

   elsif x.status = 'PHL' and x.replacement_flag = 'Y' then

   v_new_old_Card := x.f002;

    while  v_flag = 'true'
    loop

       select cd.status,cd.hash_card_number
      into v_card_status ,v_replaced_card 
      from card_detail cd where cd.OLD_CARD_NO = v_new_old_Card;         

    IF v_card_status in ('A','THL','INA') then

    v_replaced_card := v_replaced_card;
    v_flag := 'false';
    else
    v_new_old_Card := v_replaced_card;
    v_flag := 'true';
    end if;

    end loop;

   IF v_flag = 'false' then

      SELECT
            balance_calc(v_replaced_card)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(x.f004/100) then

  INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            x.txn_auth_date ,
            x.f012,
            v_replaced_card,
            x.f037,
            'Proactive Late Settlement Debit',
            cast(x.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Debit Recovery',
            SYSDATE,
            x.f037,
            x.f038,
            x.f041,
            x.process_id,
            '30001',
            x.settle_date,
            x.f002,
            'Proactive Late Settlement Debit',
            to_char(x.txn_auth_date,'YYMMDD'),
            'Retail Sale'
        );

   update harmonization_Exception_rpt h
   set DR_ADJ = 'Y',
       PRESENTMENT_FLAG = 'Y'
   where h.f002 = x.f002
     AND h.f037 = x.f037
     AND h.f004 = x.f004
     AND h.f013 = x.f013
     AND h.f012 = x.f012
     AND h.f041 = x.f041
     and h.txn_type = x.txn_type
    ;

   else 

  INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        old_card_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Debit Recovery',
                        v_replaced_card,
                        cast(x.f004/100 as float),
                        x.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        x.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        x.process_id,
                        x.settle_date,
                        x.id,
                        v_new_old_Card,
                        x.f038,
                        'Retail Sale',
                        'Proactive Late Settlement Debit'
                    );
     

   end if;
   end if;
 --  end if;

   elsif x.status = 'PHL' and x.replacement_flag = 'N' then

            SELECT
                 COUNT(1)
                 INTO E_count
             FROM
                 harmonization_exception_rpt h
             WHERE
                 h.f002 = X.f002
                 AND h.f037 = X.f037
                 AND h.f004 = X.f004
                 AND h.f013 = X.f013
                 AND h.f012 = X.f012
                 AND h.f041 = X.f041;

            IF E_count = 0 then
            insert into harmonization_Exception_rpt
            (F002,
            F004,
            F011,
            F012,
            F013,
            F037,
            F038,
            F039,
            F041,
            f042,
            f043,
            f049,
            DRCR,
            TXN_TYPE,
            TRML_DATE,
            TXN_AUTH_DATE,
            NUM_OF_DAYS,
            STATUS,
            REPLACEMENT_FLAG,
            SYS_TXN_DATE,
            REASON_CODE,
            PRESENTMENT_FLAG)
            values
            (x.F002,
            x.F004,
            x.F011,
            x.F012,
            x.F013,
            x.F037,
            x.F038,
            x.F039,
            x.F041,
            x.f042,
            x.f043,
            x.f049,
            x.DRCR,
            x.TXN_TYPE,
            x.TRML_DATE,
            x.TXN_AUTH_DATE,
            null,
            x.STATUS,
            x.REPLACEMENT_FLAG,
            sysdate,
            '1006',
            'Y');

            elsif e_count = 1 then

             update harmonization_Exception_rpt h
            set PRESENTMENT_FLAG = 'Y'
               where h.f002 = x.f002
                 AND h.f037 = x.f037
                 AND h.f004 = x.f004
                 AND h.f013 = x.f013
                 AND h.f012 = x.f012
                 AND h.f041 = x.f041
                 and h.txn_type = x.txn_type; 

            end if;

   end if;

   end loop;
  
  -------------------------Rupay  Claim against No Authorization---------------------------------
  
   for z in rupay_no_auth loop

   v_host_bal := 0;
   IF z.status in ('A','THL') then
      
   SELECT
            balance_calc(z.f002)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(z.f004/100) then

   INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            z.txn_auth_date ,
            z.f012,
            z.f002,
            z.id,
            'Claim against No Authorization',
            cast(z.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Claim against No Authorization',
            SYSDATE,
            z.f037,
            z.f038,
            z.f041,
            z.process_id,
            '30001',
            z.settle_date,
            null,
            'Claim against No Authorization',
           to_char(z.txn_auth_date,'YYMMDD'),
           'Claim against No Authorization'
        );

   update harmonization_Exception_rpt h
   set DR_ADJ = 'Y',
       PRESENTMENT_FLAG = 'Y'
   where h.f002 = z.f002
     AND h.f037 = z.f037
     AND h.f004 = z.f004
     AND h.f013 = z.f013
     AND h.f012 = z.f012
     AND h.f041 = z.f041
  --   and h.txn_type = z.txn_type
    ;

   else

    INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Claim against No Authorization',
                        z.f002,
                        cast(z.f004/100 as float),
                        z.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        z.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        z.process_id,
                        z.settle_date,
                        z.id,
                        z.f038,
                        'Claim against No Authorization',
                        'Claim against No Authorization'
                    );

   end if;

   elsif z.status = 'PHL' and z.replacement_flag = 'Y' then

   v_new_old_Card := z.f002;

    while  v_flag = 'true'
    loop

       select cd.status,cd.hash_card_number
      into v_card_status ,v_replaced_card 
      from card_detail cd where cd.OLD_CARD_NO = v_new_old_Card;         

    IF v_card_status in ('A','THL','INA') then

    v_replaced_card := v_replaced_card;
    v_flag := 'false';
    else
    v_new_old_Card := v_replaced_card;
    v_flag := 'true';
    end if;

    end loop;

   IF v_flag = 'false' then

      SELECT
            balance_calc(v_replaced_card)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(z.f004/100) then

  INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            z.txn_auth_date ,
            z.f012,
            v_replaced_card,
            z.f037,
            'Claim against No Authorization',
            cast(z.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Claim against No Authorization',
            SYSDATE,
            z.f037,
            z.f038,
            z.f041,
            z.process_id,
            '30001',
            z.settle_date,
            z.f002,
            'Claim against No Authorization',
            to_char(z.txn_auth_date,'YYMMDD'),
            'Claim against No Authorization'
        );

 
   else 

  INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        old_card_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Claim against No Authorization',
                        v_replaced_card,
                        cast(z.f004/100 as float),
                        z.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        z.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        z.process_id,
                        z.settle_date,
                        z.id,
                        v_new_old_Card,
                        z.f038,
                        'Claim against No Authorization',
                        'Claim against No Authorization'
                    );
     

   end if;
   end if;
 --  end if;

   elsif z.status = 'PHL' and z.replacement_flag = 'N' then
             
            insert into harmonization_Exception_rpt
            (F002,
            F004,
           -- F011,
            F012,
            F013,
            F037,
            F038,
            F039,
            F041,
            f042,
            f043,
            f049,
            DRCR,
            TXN_TYPE,
            TRML_DATE,
            TXN_AUTH_DATE,
            NUM_OF_DAYS,
            STATUS,
            REPLACEMENT_FLAG,
            SYS_TXN_DATE,
            REASON_CODE,
            PRESENTMENT_FLAG)
            values
           (z.F002,
            z.F004,
          --  z.F011,
            z.F012,
            z.F013,
            z.F037,
            z.F038,
            '00',
            z.F041,
            z.f042,
            z.f043,
            z.f049,
            'D',
            '21000',
            z.TRML_DATE,
            z.TXN_AUTH_DATE,
            null,
            z.STATUS,
            z.REPLACEMENT_FLAG,
            sysdate,
            '1006',
            'Y');

   end if;

   end loop;
   
 ----------------------------Rupay duplicate ---------------------------------------
 
 for z in rupay_already_exist loop

   v_host_bal := 0;
   IF z.status in ('A','THL') then
      
   SELECT
            balance_calc(z.f002)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(z.f004/100) then

   INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            z.txn_auth_date ,
            z.f012,
            z.f002,
            z.id,
            'Duplicate Processsing Claim',
            cast(z.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Duplicate Processsing Claim',
            SYSDATE,
            z.f037,
            z.f038,
            z.f041,
            z.process_id,
            '30001',
            z.settle_date,
            null,
            'Duplicate Processsing Claim',
           to_char(z.txn_auth_date,'YYMMDD'),
           'Duplicate Processsing Claim'
        );

   update harmonization_Exception_rpt h
   set DR_ADJ = 'Y',
       PRESENTMENT_FLAG = 'Y'
   where h.f002 = z.f002
     AND h.f037 = z.f037
     AND h.f004 = z.f004
     AND h.f013 = z.f013
     AND h.f012 = z.f012
     AND h.f041 = z.f041
  --   and h.txn_type = z.txn_type
    ;

   else

    INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Duplicate Processsing Claim',
                        z.f002,
                        cast(z.f004/100 as float),
                        z.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        z.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        z.process_id,
                        z.settle_date,
                        z.id,
                        z.f038,
                        'Duplicate Processsing Claim',
                        'Duplicate Processsing Claim'
                    );

   end if;

   elsif z.status = 'PHL' and z.replacement_flag = 'Y' then

   v_new_old_Card := z.f002;

    while  v_flag = 'true'
    loop

       select cd.status,cd.hash_card_number
      into v_card_status ,v_replaced_card 
      from card_detail cd where cd.OLD_CARD_NO = v_new_old_Card;         

    IF v_card_status in ('A','THL','INA') then

    v_replaced_card := v_replaced_card;
    v_flag := 'false';
    else
    v_new_old_Card := v_replaced_card;
    v_flag := 'true';
    end if;

    end loop;

   IF v_flag = 'false' then

      SELECT
            balance_calc(v_replaced_card)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(z.f004/100) then

  INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            z.txn_auth_date ,
            z.f012,
            v_replaced_card,
            z.f037,
            'Duplicate Processsing Claim',
            cast(z.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Duplicate Processsing Claim',
            SYSDATE,
            z.f037,
            z.f038,
            z.f041,
            z.process_id,
            '30001',
            z.settle_date,
            z.f002,
            'Duplicate Processsing Claim',
            to_char(z.txn_auth_date,'YYMMDD'),
            'Duplicate Processsing Claim'
        );

 
   else 

  INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        old_card_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Duplicate Processsing Claim',
                        v_replaced_card,
                        cast(z.f004/100 as float),
                        z.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        z.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        z.process_id,
                        z.settle_date,
                        z.id,
                        v_new_old_Card,
                        z.f038,
                        'Duplicate Processsing Claim',
                        'Duplicate Processsing Claim'
                    );
     

   end if;
   end if;
 --  end if;

   elsif z.status = 'PHL' and z.replacement_flag = 'N' then
             
            insert into harmonization_Exception_rpt
            (F002,
            F004,
           -- F011,
            F012,
            F013,
            F037,
            F038,
            F039,
            F041,
            f042,
            f043,
            f049,
            DRCR,
            TXN_TYPE,
            TRML_DATE,
            TXN_AUTH_DATE,
            NUM_OF_DAYS,
            STATUS,
            REPLACEMENT_FLAG,
            SYS_TXN_DATE,
            REASON_CODE,
            PRESENTMENT_FLAG)
            values
           (z.F002,
            z.F004,
          --  z.F011,
            z.F012,
            z.F013,
            z.F037,
            z.F038,
            '00',
            z.F041,
            z.f042,
            z.f043,
            z.f049,
            'D',
            '21000',
            z.TRML_DATE,
            z.TXN_AUTH_DATE,
            null,
            z.STATUS,
            z.REPLACEMENT_FLAG,
            sysdate,
            '1006',
            'Y');

   end if;

   end loop; 
  
  -------------------------Rupay  Claim against decline Authorization---------------------------------
  
   for z in rupay_decline_auth loop

   v_host_bal := 0;
   IF z.status in ('A','THL') then
      
   SELECT
            balance_calc(z.f002)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(z.f004/100) then

   INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            z.txn_auth_date ,
            z.f012,
            z.f002,
            z.id,
            'Claim against Declined Authorization',
            cast(z.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Claim against Declined Authorization',
            SYSDATE,
            z.f037,
            z.f038,
            z.f041,
            z.process_id,
            '30001',
            z.settle_date,
            null,
            'Claim against Declined Authorization',
           to_char(z.txn_auth_date,'YYMMDD'),
           'Claim against Declined Authorization'
        );

   update harmonization_Exception_rpt h
   set DR_ADJ = 'Y',
       PRESENTMENT_FLAG = 'Y'
   where h.f002 = z.f002
     AND h.f037 = z.f037
     AND h.f004 = z.f004
     AND h.f013 = z.f013
     AND h.f012 = z.f012
     AND h.f041 = z.f041
  --   and h.txn_type = z.txn_type
    ;

   else

    INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Claim against Declined Authorization',
                        z.f002,
                        cast(z.f004/100 as float),
                        z.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        z.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        z.process_id,
                        z.settle_date,
                        z.id,
                        z.f038,
                        'Claim against Declined Authorization',
                        'Claim against Declined Authorization'
                    );

   end if;

   elsif z.status = 'PHL' and z.replacement_flag = 'Y' then

   v_new_old_Card := z.f002;

    while  v_flag = 'true'
    loop

       select cd.status,cd.hash_card_number
      into v_card_status ,v_replaced_card 
      from card_detail cd where cd.OLD_CARD_NO = v_new_old_Card;         

    IF v_card_status in ('A','THL','INA') then

    v_replaced_card := v_replaced_card;
    v_flag := 'false';
    else
    v_new_old_Card := v_replaced_card;
    v_flag := 'true';
    end if;

    end loop;

   IF v_flag = 'false' then

      SELECT
            balance_calc(v_replaced_card)
        INTO v_host_and_shadow_bal
        FROM
            dual;

        SELECT
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 1),
            regexp_substr(v_host_and_shadow_bal, '[^#]+', 1, 2)
        INTO
            v_total_bal,
            v_shadow_bal
        FROM
            dual;

        v_host_bal := v_total_bal - v_shadow_bal;

   IF v_host_bal >= to_number(z.f004/100) then

  INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE,
            adjustment_related_to
        ) VALUES (
            z.txn_auth_date ,
            z.f012,
            v_replaced_card,
            z.f037,
            'Claim against Declined Authorization',
            cast(z.f004/100 as float),
            'D',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'Claim against Declined Authorization',
            SYSDATE,
            z.f037,
            z.f038,
            z.f041,
            z.process_id,
            '30001',
            z.settle_date,
            z.f002,
            'Claim against Declined Authorization',
            to_char(z.txn_auth_date,'YYMMDD'),
            'Claim against Declined Authorization'
        );

 
   else 

  INSERT INTO cs_fee_queue (
                        id,
                        date_time,
                        fee_description,
                        card_number,
                        fee_amt,
                        rrn,
                        fee_ind,
                        seq_id,
                        tid,
                        entry_date_time,
                        drcr,
                        attempts,                        
                        QUEUE_RELEASED_FLAG,
                        QUEUE_RELEASED_DATE,
                        cs_process_id,
                        settlement_date,
                        reference_number,
                        old_card_number,
                        f038,
                        adjustment_related_to,
                        remarks
                    ) VALUES (
                        CS_FEE_QUEUE_ID_SEQ.nextval,
                        sysdate,
                        'Claim against Declined Authorization',
                        v_replaced_card,
                        cast(z.f004/100 as float),
                        z.f037,
                        '30001',
                        to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0'),
                        z.f041,
                        sysdate,
                        'D',
                        1,                        
                        'N',
                        NULL,
                        z.process_id,
                        z.settle_date,
                        z.id,
                        v_new_old_Card,
                        z.f038,
                        'Claim against Declined Authorization',
                        'Claim against Declined Authorization'
                    );
     

   end if;
   end if;
 --  end if;

   elsif z.status = 'PHL' and z.replacement_flag = 'N' then
             
            insert into harmonization_Exception_rpt
            (F002,
            F004,
           -- F011,
            F012,
            F013,
            F037,
            F038,
            F039,
            F041,
            f042,
            f043,
            f049,
            DRCR,
            TXN_TYPE,
            TRML_DATE,
            TXN_AUTH_DATE,
            NUM_OF_DAYS,
            STATUS,
            REPLACEMENT_FLAG,
            SYS_TXN_DATE,
            REASON_CODE,
            PRESENTMENT_FLAG)
            values
           (z.F002,
            z.F004,
          --  z.F011,
            z.F012,
            z.F013,
            z.F037,
            z.F038,
            '00',
            z.F041,
            z.f042,
            z.f043,
            z.f049,
            'D',
            '21000',
            z.TRML_DATE,
            z.TXN_AUTH_DATE,
            null,
            z.STATUS,
            z.REPLACEMENT_FLAG,
            sysdate,
            '1006',
            'Y');

   end if;

   end loop;
  
  
 
   p_out := 'Success';

 exception
 when others then
 raise;
end
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_decline_reversal(p_process_id character varying, p_user_id character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$

v_reversal_check_cnt number:=0;
v_reason_code aswt_reversal_reason_code.reason_code%type;
v_reason_abbr aswt_reversal_reason_code.reason_abbr%type;
p_out_response varchar2(100);
v_error VARCHAR2(500);
E_count   number;

cursor cur_dec_reversal is SELECT
b.*
FROM
    aswt_switch_txn_authrization b,
    (
        SELECT
            cs.de002,
            cs.actual_de013,
            cs.de004,
            cs.actual_de012,
            cs.de041,
            cs.de037,
            cs.de038,
            cd.hash_card_number,
            cs.ide009,
            cs.process_id
        FROM
            cs_rupay_netswitchd cs,
            card_detail cd,
            card_encryption_detail ced
        WHERE
            cs.de002 = ced.enrypted_card_no
            AND ced.card_ref_number = cd.card_ref_number
            AND cd.status IN ('A','PHL','THL')
            AND  NOT EXISTS (SELECT 1 from cs_rupay_in rpy where rpy.de002=cs.de002 and rpy.de004=cs.de038
and  substr(rpy.de012,1,6)= substr(cs.actual_de013,2,6) and substr(rpy.de012,7,6)=cs.actual_de012 and rpy.de038 =cs.de038 and rpy.de041=cs.de041
and substr(rpy.de031,11,12)=cs.de037
and rpy.de024 = '200'
AND rpy.mti IN ( '1240', '0200' ))
    ) a
WHERE
    b.f002 = a.hash_card_number
    AND b.f037 = a.de037
    AND b.f038 = a.de038    
    AND nvl(TO_CHAR(b.trml_date,'YY'),substr(b.txn_date,7,2))
        || b.f013 = substr(actual_de013, 2, 6)
    AND b.f012 = a.actual_de012
    AND rtrim(b.f041) = a.de041
    AND to_number(b.f004) = to_number(a.de004)
    AND a.ide009 in (select response_code from cs_config_declined_resp_code)
    and length(nvl(to_char(b.trml_date,'YY'),substr(b.txn_date,7,2))|| b.f013) = 6
--    and trunc(to_date(nvl(substr(b.trml_date,10,2),substr(b.txn_date,7,2))
--        || b.f013,'yymmdd')) >='15-OCT-2019'
    and trunc(to_date(nvl(to_char(b.trml_date,'YY'),substr(b.txn_date,7,2))
        || b.f013,'yymmdd')) >='15-OCT-2019'
    AND a.process_id=p_process_id
    AND b.f039 = '00'
    and b.drcr = 'D'
    and b.txn_type = '21000'
  --  and b.int_txn_type = '2100005'
    AND ( b.settle_flag IS NULL
          OR b.settle_flag = 'N' ) 
   and not exists (select 1 from harmonization_Exception_rpt h where h.f002 = b.f002 and h.f037 = b.f037 and h.f004 = b.f004 and h.f013 = b.f013 and h.f012=b.f012
                    and h.f041 = b.f041 and h.presentment_flag = 'Y')            ;

type t_dec_reversal is table of cur_dec_reversal%rowtype;

v_dec_reversal t_dec_reversal;

cursor cur_dec_reversal_1 is SELECT
    b.f012,
    b.f013,
    b.f002,
    b.f004,
    b.f037,
    b.f038,
    b.f041,
    b.f042,
    b.trml_date,
    b.drcr,
    TO_DATE(NVL(to_char(b.trml_date,'YY'),SUBSTR(b.TXN_DATE,7,2))|| b.f013,'YYMMDD') as txn_auth_date,
    a.status,
    a.replacement_flag,
    b.TXN_TYPE,
    b.f043,
    b.f039,
    b.f049,
    b.f011
FROM
    aswt_switch_txn_authrization b,
    (
        SELECT
            cs.de002,
            cs.actual_de013,
            cs.de004,
            cs.actual_de012,
            cs.de041,
            cs.de037,
            cs.de038,
            cd.hash_card_number,
            cs.ide009,
            cs.process_id,
            cd.status,
            cd.replacement_flag
        FROM
            cs_rupay_netswitchd cs,
            card_detail cd,
            card_encryption_detail ced
        WHERE
            cs.de002 = ced.enrypted_card_no
            AND ced.card_ref_number = cd.card_ref_number
            AND cd.status IN ('A','PHL','THL')
            AND  NOT EXISTS (SELECT 1 from cs_rupay_in rpy where rpy.de002=cs.de002 and rpy.de004=cs.de038
and  substr(rpy.de012,1,6)= substr(cs.actual_de013,2,6) and substr(rpy.de012,7,6)=cs.actual_de012 and rpy.de038 =cs.de038 and rpy.de041=cs.de041
and substr(rpy.de031,11,12)=cs.de037
and rpy.de024 = '200'
AND rpy.mti IN ( '1240', '0200' ))
    ) a
WHERE
    b.f002 = a.hash_card_number
    AND b.f037 = a.de037
    AND b.f038 = a.de038    
    AND nvl(TO_CHAR(b.trml_date,'YY'),substr(b.txn_date,7,2))
        || b.f013 = substr(actual_de013, 2, 6)
    AND b.f012 = a.actual_de012
    AND rtrim(b.f041) = a.de041
    AND to_number(b.f004) = to_number(a.de004)
    AND a.ide009 not in(select response_code from cs_config_declined_resp_code)
    AND a.process_id=p_process_id
    and length(nvl(to_char(b.trml_date,'YY'),substr(b.txn_date,7,2))|| b.f013) = 6
 --   and trunc(to_date(nvl(substr(b.trml_date,9,2),substr(b.txn_date,7,2))
    --    || b.f013,'yymmdd')) >='15-OCT-2019'
   and trunc(to_date(nvl(to_char(b.trml_date,'YY'),substr(b.txn_date,7,2))
        || b.f013,'yymmdd')) >='15-OCT-2019'
    AND b.f039 = '00'
    and b.drcr = 'D'
    and b.txn_type = '21000'
  --  and b.int_txn_type = '2100005'
    AND ( b.settle_flag IS NULL
          OR b.settle_flag = 'N' ) 
     and not exists (select 1 from harmonization_Exception_rpt h where h.f002 = b.f002 and h.f037 = b.f037 and h.f004 = b.f004 and h.f013 = b.f013 and h.f012=b.f012
                    and h.f041 = b.f041 and h.presentment_flag = 'Y')       ;

 v_dec_reversal_1 cur_dec_reversal_1%rowtype;

--v_dec_reversal_1 t_dec_reversal_1;
pragma autonomous_transaction;

begin

DBMS_OUTPUT.PUT_LINE('start');

INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            p_process_id,
            'cs_offline_decline_reversal',
            'Reach 7',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );        

open cur_dec_reversal;

INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            p_process_id,
            'cs_offline_decline_reversal',
            'Reach 11',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

fetch cur_dec_reversal bulk collect into v_dec_reversal;

DBMS_OUTPUT.PUT_LINE('INSIDE FIRST DECLINE REVERSAL CURSOR');

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            p_process_id,
            'cs_offline_decline_reversal',
            'Reach 5',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

forall i in v_dec_reversal.first..v_dec_reversal.last

insert into aswt_raw_decline_queue(SETTLE_FLAG,
TXN_ISSUER,
TXN_FWD_INST_1,
TXN_FWD_INST_2,
TXN_AUTH_SOURCE,
TXN_CHANNEL,
TXN_TYPE,
TXN_CODE,
TXN_DATE,
TXN_TIME,
FP_MASKED,
FP_TYPE,
INT_MTI,
INT_REF_NO,
TXN_BATCH_NO,
TXN_BATCH_STATUS,
DRCR,
FP_FORM_FACTOR,
INT_SEQ_NO,
INT_RC,
SCHEME,
INT_RRN,
INT_PROC_CODE,
INT_AMT,
INT_ADJ_AMT1,
INT_ADJ_AMT2,
INT_TXN_FEES1,
INT_TXN_FEES2,
INT_POS_ENTRY_MODE,
INT_VOID_FLAG,
MTI,
F002,
F003,
F004,
F005,
F006,
F007,
F008,
F009,
F010,
F011,
F012,
F013,
F014,
F015,
F016,
F017,
F018,
F019,
F020,
F021,
F022,
F023,
F024,
F025,
F026,
F027,
F028,
F029,
F030,
F031,
F032,
F033,
F034,
F035,
F036,
F037,
F038,
F039,
F040,
F041,
F042,
F043,
F044,
F045,
F046,
F047,
F048,
F049,
F050,
F051,
F052,
F053,
F054,
F055,
F056,
F057,
F058,
F059,
F060,
F061,
F062,
F063,
F064,
F065,
F066,
F067,
F068,
F069,
F070,
F071,
F072,
F073,
F074,
F075,
F076,
F077,
F078,
F079,
F080,
F081,
F082,
F083,
F084,
F085,
F086,
F087,
F088,
F089,
F090,
F091,
F092,
F093,
F094,
F095,
F096,
F097,
F098,
F099,
F100,
F101,
F102,
F103,
F104,
F105,
F106,
F107,
F108,
F109,
F110,
F111,
F112,
F113,
F114,
F115,
F116,
F117,
F118,
F119,
F120,
F121,
F122,
F123,
F124,
F125,
F126,
F127,
F128,
REVERSAL_FLAG,
TXN_ACQUIRER,
SYS_TXN_DATE,
PROGRAM_ID,
BANK_ID,
SETTLE_DATE,
BALANCE_UPDATE_FLAG,
BALANCE_UPDATE_DATE,
SUB_BATCH_NO,
ACC_FLAG,
BATCH_NO,
BATCH_UPLOAD_FLAG,
CS_ID,
ATC,
BATCH_UPLOAD_DATE,
--SUBBATCH_SETTLE_FLAG,
--SUBBATCH_SETTLE_DATE,
BAL_UPDATE_FLAG_RUK,
BAL_UPDATE_DATE_RUK,
TICKET_ID,
MANUAL_SETTLE_FLAG,
MANUAL_SETTLE_DATE,
UNIQUE_TXN_ID,
CS_PROCESS_ID,
SERVER_CODE,
STATIONNAME,
STATIONID,
TRANSACDESC,
TRML_DATE,
TOTAL_BAL,
HOST_BAL,
SHADOW_BAL,
fund_source,
int_txn_type,
PROCESS_ID,
insert_date) 
values
(v_dec_reversal(i).SETTLE_FLAG,
v_dec_reversal(i).TXN_ISSUER,
v_dec_reversal(i).TXN_FWD_INST_1,
v_dec_reversal(i).TXN_FWD_INST_2,
v_dec_reversal(i).TXN_AUTH_SOURCE,
v_dec_reversal(i).TXN_CHANNEL,
v_dec_reversal(i).TXN_TYPE,
v_dec_reversal(i).TXN_CODE,
v_dec_reversal(i).TXN_DATE,
v_dec_reversal(i).TXN_TIME,
v_dec_reversal(i).FP_MASKED,
v_dec_reversal(i).FP_TYPE,
v_dec_reversal(i).INT_MTI,
v_dec_reversal(i).INT_REF_NO,
v_dec_reversal(i).TXN_BATCH_NO,
v_dec_reversal(i).TXN_BATCH_STATUS,
v_dec_reversal(i).DRCR,
v_dec_reversal(i).FP_FORM_FACTOR,
v_dec_reversal(i).INT_SEQ_NO,
v_dec_reversal(i).INT_RC,
v_dec_reversal(i).SCHEME,
v_dec_reversal(i).INT_RRN,
v_dec_reversal(i).INT_PROC_CODE,
v_dec_reversal(i).INT_AMT,
v_dec_reversal(i).INT_ADJ_AMT1,
v_dec_reversal(i).INT_ADJ_AMT2,
v_dec_reversal(i).INT_TXN_FEES1,
v_dec_reversal(i).INT_TXN_FEES2,
v_dec_reversal(i).INT_POS_ENTRY_MODE,
v_dec_reversal(i).INT_VOID_FLAG,
v_dec_reversal(i).MTI,
v_dec_reversal(i).F002,
v_dec_reversal(i).F003,
v_dec_reversal(i).F004,
v_dec_reversal(i).F005,
v_dec_reversal(i).F006,
v_dec_reversal(i).F007,
v_dec_reversal(i).F008,
v_dec_reversal(i).F009,
v_dec_reversal(i).F010,
v_dec_reversal(i).F011,
v_dec_reversal(i).F012,
v_dec_reversal(i).F013,
v_dec_reversal(i).F014,
v_dec_reversal(i).F015,
v_dec_reversal(i).F016,
v_dec_reversal(i).F017,
v_dec_reversal(i).F018,
v_dec_reversal(i).F019,
v_dec_reversal(i).F020,
v_dec_reversal(i).F021,
v_dec_reversal(i).F022,
v_dec_reversal(i).F023,
v_dec_reversal(i).F024,
v_dec_reversal(i).F025,
v_dec_reversal(i).F026,
v_dec_reversal(i).F027,
v_dec_reversal(i).F028,
v_dec_reversal(i).F029,
v_dec_reversal(i).F030,
v_dec_reversal(i).F031,
v_dec_reversal(i).F032,
v_dec_reversal(i).F033,
v_dec_reversal(i).F034,
v_dec_reversal(i).F035,
v_dec_reversal(i).F036,
v_dec_reversal(i).F037,
v_dec_reversal(i).F038,
v_dec_reversal(i).F039,
v_dec_reversal(i).F040,
v_dec_reversal(i).F041,
v_dec_reversal(i).F042,
v_dec_reversal(i).F043,
v_dec_reversal(i).F044,
v_dec_reversal(i).F045,
v_dec_reversal(i).F046,
v_dec_reversal(i).F047,
v_dec_reversal(i).F048,
v_dec_reversal(i).F049,
v_dec_reversal(i).F050,
v_dec_reversal(i).F051,
v_dec_reversal(i).F052,
v_dec_reversal(i).F053,
v_dec_reversal(i).F054,
v_dec_reversal(i).F055,
v_dec_reversal(i).F056,
v_dec_reversal(i).F057,
v_dec_reversal(i).F058,
v_dec_reversal(i).F059,
v_dec_reversal(i).F060,
v_dec_reversal(i).F061,
v_dec_reversal(i).F062,
v_dec_reversal(i).F063,
v_dec_reversal(i).F064,
v_dec_reversal(i).F065,
v_dec_reversal(i).F066,
v_dec_reversal(i).F067,
v_dec_reversal(i).F068,
v_dec_reversal(i).F069,
v_dec_reversal(i).F070,
v_dec_reversal(i).F071,
v_dec_reversal(i).F072,
v_dec_reversal(i).F073,
v_dec_reversal(i).F074,
v_dec_reversal(i).F075,
v_dec_reversal(i).F076,
v_dec_reversal(i).F077,
v_dec_reversal(i).F078,
v_dec_reversal(i).F079,
v_dec_reversal(i).F080,
v_dec_reversal(i).F081,
v_dec_reversal(i).F082,
v_dec_reversal(i).F083,
v_dec_reversal(i).F084,
v_dec_reversal(i).F085,
v_dec_reversal(i).F086,
v_dec_reversal(i).F087,
v_dec_reversal(i).F088,
v_dec_reversal(i).F089,
v_dec_reversal(i).F090,
v_dec_reversal(i).F091,
v_dec_reversal(i).F092,
v_dec_reversal(i).F093,
v_dec_reversal(i).F094,
v_dec_reversal(i).F095,
v_dec_reversal(i).F096,
v_dec_reversal(i).F097,
v_dec_reversal(i).F098,
v_dec_reversal(i).F099,
v_dec_reversal(i).F100,
v_dec_reversal(i).F101,
v_dec_reversal(i).F102,
v_dec_reversal(i).F103,
v_dec_reversal(i).F104,
v_dec_reversal(i).F105,
v_dec_reversal(i).F106,
v_dec_reversal(i).F107,
v_dec_reversal(i).F108,
v_dec_reversal(i).F109,
v_dec_reversal(i).F110,
v_dec_reversal(i).F111,
v_dec_reversal(i).F112,
v_dec_reversal(i).F113,
v_dec_reversal(i).F114,
v_dec_reversal(i).F115,
v_dec_reversal(i).F116,
v_dec_reversal(i).F117,
v_dec_reversal(i).F118,
v_dec_reversal(i).F119,
v_dec_reversal(i).F120,
v_dec_reversal(i).F121,
v_dec_reversal(i).F122,
v_dec_reversal(i).F123,
v_dec_reversal(i).F124,
v_dec_reversal(i).F125,
v_dec_reversal(i).F126,
v_dec_reversal(i).F127,
v_dec_reversal(i).F128,
v_dec_reversal(i).REVERSAL_FLAG,
v_dec_reversal(i).TXN_ACQUIRER,
v_dec_reversal(i).SYS_TXN_DATE,
v_dec_reversal(i).PROGRAM_ID,
v_dec_reversal(i).BANK_ID,
v_dec_reversal(i).SETTLE_DATE,
v_dec_reversal(i).BALANCE_UPDATE_FLAG,
v_dec_reversal(i).BALANCE_UPDATE_DATE,
v_dec_reversal(i).SUB_BATCH_NO,
v_dec_reversal(i).ACC_FLAG,
v_dec_reversal(i).BATCH_NO,
v_dec_reversal(i).BATCH_UPLOAD_FLAG,
v_dec_reversal(i).CS_ID,
v_dec_reversal(i).ATC,
v_dec_reversal(i).BATCH_UPLOAD_DATE,
--v_dec_reversal(i).SUBBATCH_SETTLE_FLAG,
--v_dec_reversal(i).SUBBATCH_SETTLE_DATE,
v_dec_reversal(i).BAL_UPDATE_FLAG_RUK,
v_dec_reversal(i).BAL_UPDATE_DATE_RUK,
v_dec_reversal(i).TICKET_ID,
v_dec_reversal(i).MANUAL_SETTLE_FLAG,
v_dec_reversal(i).MANUAL_SETTLE_DATE,
v_dec_reversal(i).UNIQUE_TXN_ID,
v_dec_reversal(i).CS_PROCESS_ID,
v_dec_reversal(i).SERVER_CODE,
v_dec_reversal(i).STATIONNAME,
v_dec_reversal(i).STATIONID,
v_dec_reversal(i).TRANSACDESC,
v_dec_reversal(i).TRML_DATE,
v_dec_reversal(i).TOTAL_BAL,
v_dec_reversal(i).HOST_BAL,
v_dec_reversal(i).SHADOW_BAL,
v_dec_reversal(i).fund_source,
v_dec_reversal(i).int_txn_type,
P_PROCESS_ID,
sysdate);

DBMS_OUTPUT.PUT_LINE('BULK DECLINE WAITINT COUNT '||SQL%ROWCOUNT);

close cur_dec_reversal;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

open cur_dec_reversal_1 ;

loop

fetch cur_dec_reversal_1 into v_dec_reversal_1;
exit when cur_dec_reversal_1%notfound;

DBMS_OUTPUT.PUT_LINE('INSEIDE NOT WAITING CURSOR '||cur_dec_reversal_1%ROWCOUNT);

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            p_process_id,
            'cs_offline_decline_reversal',
            'Reach 6',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

select count(1) into v_reversal_check_cnt from aswt_switch_txn_authrization aswt
where aswt.f002=v_dec_reversal_1.f002 and aswt.f004=v_dec_reversal_1.f004
and   aswt.f013=v_dec_reversal_1.f013 and aswt.f012=v_dec_reversal_1.f012 and aswt.f038=v_dec_reversal_1.f038 and aswt.f041=v_dec_reversal_1.f041
and aswt.f037=v_dec_reversal_1.f037
and aswt.f039='00'
and aswt.drcr='R'
and aswt.txn_type='42000'
 AND ( aswt.settle_flag = 'N'
          OR aswt.settle_flag IS NULL) ;

if v_reversal_check_cnt = 0 then

select reason_code , reason_abbr into v_reason_code, v_reason_abbr  from aswt_reversal_reason_code where reason_code='1003';

IF v_dec_reversal_1.status='A' then

sp_OFFLINE_SALE_REVERSAL(
    P_REVERSAL_TYPE => v_reason_abbr,
    P_CARD_NUMBER => v_dec_reversal_1.f002,
    P_TXN_AMOUNT => v_dec_reversal_1.f004,
    P_TXN_DATE => v_dec_reversal_1.f013,
    P_TXN_TIME => v_dec_reversal_1.f012,
    P_APPROVAL_CODE => v_dec_reversal_1.f038,
    P_TERMINAL_ID => v_dec_reversal_1.f041,
    P_RRN => v_dec_reversal_1.f037,
    P_DRCR => 'R',
    P_SUB_TXN_TYPE => v_reason_code,
    P_REPLACED_CARD=>null,
    P_OUT => p_out_response
  );

DBMS_OUTPUT.PUT_LINE('p_out_response '||p_out_response);
elsif v_dec_reversal_1.status='PHL' and v_dec_reversal_1.replacement_flag='Y' then

sp_OFFLINE_SALE_REVERSAL(
    P_REVERSAL_TYPE => v_reason_abbr,
    P_CARD_NUMBER => v_dec_reversal_1.f002,
    P_TXN_AMOUNT => v_dec_reversal_1.f004,
    P_TXN_DATE => v_dec_reversal_1.f013,
    P_TXN_TIME => v_dec_reversal_1.f012,
    P_APPROVAL_CODE => v_dec_reversal_1.f038,
    P_TERMINAL_ID => v_dec_reversal_1.f041,
    P_RRN => v_dec_reversal_1.f037,
    P_DRCR => 'R',
    P_SUB_TXN_TYPE => v_reason_code,
    P_REPLACED_CARD=>'Y',
    P_OUT => p_out_response
  );

elsif v_dec_reversal_1.status='PHL' and v_dec_reversal_1.replacement_flag='N' then

SELECT
     COUNT(1)
     INTO E_count
 FROM
     harmonization_exception_rpt h
 WHERE
     h.f002 = v_dec_reversal_1.f002
     AND h.f037 = v_dec_reversal_1.f037
     AND h.f004 = v_dec_reversal_1.f004
     AND h.f013 = v_dec_reversal_1.f013
     AND h.f012 = v_dec_reversal_1.f012
     AND h.f041 = v_dec_reversal_1.f041;

IF E_count > 0 then

insert into harmonization_Exception_rpt
(F002,
F004,
F011,
F012,
F013,
F037,
F038,
F039,
F041,
f042,
f043,
f049,
DRCR,
TXN_TYPE,
TRML_DATE,
TXN_AUTH_DATE,
STATUS,
REPLACEMENT_FLAG,
SYS_TXN_DATE,
REASON_CODE)
values
(v_dec_reversal_1.F002,
v_dec_reversal_1.F004,
v_dec_reversal_1.F011,
v_dec_reversal_1.F012,
v_dec_reversal_1.F013,
v_dec_reversal_1.F037,
v_dec_reversal_1.F038,
v_dec_reversal_1.F039,
v_dec_reversal_1.F041,
v_dec_reversal_1.f042,
v_dec_reversal_1.f043,
v_dec_reversal_1.f049,
v_dec_reversal_1.DRCR,
v_dec_reversal_1.TXN_TYPE,
v_dec_reversal_1.TRML_DATE,
v_dec_reversal_1.TXN_AUTH_DATE,
v_dec_reversal_1.STATUS,
v_dec_reversal_1.REPLACEMENT_FLAG,
sysdate,
v_reason_code);
end if;

end if;

end if;

end loop;

close cur_dec_reversal_1;

p_out :='00';

exception

when others then

p_out:='01';

v_error:= sqlcode||sqlerrm;

dbms_output.put_LINE('Error occurredd....!!!'||sqlcode||sqlerrm);

INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            p_process_id,
            'cs_offline_decline_reversal',
            v_error,
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

raise;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_replaced_reversal()
 SECURITY DEFINER
AS $procedure$


begin

for cur_rec in(select ctid rw , a.* from aswt_replaced_card_reversal a where a.is_reverse is null)

loop

INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            approval_code,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            OLD_CARD_NUMBER,
            REMARKS,
            ORG_TXN_DATE
        ) VALUES (
            TO_DATE(NVL(to_char(cur_rec.trml_date,'YY'),SUBSTR(cur_rec.TXN_DATE,7,2))|| cur_rec.f013,'YYMMDD') ,
            cur_rec.f012,
            cur_rec.new_f002,
            cur_rec.f037,
            'Proactive unsettle reversal',
            cur_rec.f004/100,
            'C',
            'MANUAL_ADJ',
            SYSDATE,
            'A',
            'SP_OFFLINE_REPLACED_REVERSAL',
            SYSDATE,
            CUR_REC.F037,
            CUR_REC.F038,
            CUR_REC.F041,
            CUR_REC.process_id,
            '30002',
            SYSDATE,
            CUR_REC.OLD_F002,
            'Proactive unsettle reversal',
            NVL(to_char(cur_rec.trml_date,'YY'),SUBSTR(cur_rec.TXN_DATE,7,2))|| cur_rec.f013
        );

        update aswt_replaced_card_reversal r set  IS_REVERSE ='Y',
IS_REVERSE_DATE=sysdate
where ctid=cur_rec.rw
and r.f002  = cur_rec.f002;


end loop;


exception 
when others then

dbms_output.put_line('SQLCODE :'||SQLCODE||sqlerrm);

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_sale_reversal(p_reversal_type character varying, p_card_number character varying, p_txn_amount character varying, p_txn_date character varying, p_txn_time character varying, p_approval_code character varying, p_terminal_id character varying, p_rrn character varying, p_drcr character varying, p_sub_txn_type character varying, p_replaced_card character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$ 
v_presenment_cnt number;
v_count number;
p_out_csu varchar2(100);
v_sub_txn_type varchar2(4):=p_sub_txn_type;
v_new_card_number card_detail.hash_Card_number%type;

v_error VARCHAR2(500);
pragma autonomous_transaction;
begin

DBMS_OUTPUT.PUT_LINE('p_reversal_type '||p_reversal_type );
DBMS_OUTPUT.PUT_LINE('p_card_number '||p_card_number );
DBMS_OUTPUT.PUT_LINE('p_txn_amount '||p_txn_amount  );
DBMS_OUTPUT.PUT_LINE('P_txn_date '||P_txn_date );
DBMS_OUTPUT.PUT_LINE('p_txn_time '||p_txn_time );
DBMS_OUTPUT.PUT_LINE('p_approval_code '||p_approval_code );
DBMS_OUTPUT.PUT_LINE('p_terminal_id '||p_terminal_id);
DBMS_OUTPUT.PUT_LINE('p_rrn '||p_rrn );
DBMS_OUTPUT.PUT_LINE('p_drcr '||p_drcr );
DBMS_OUTPUT.PUT_LINE('p_sub_txn_type '||p_sub_txn_type );
DBMS_OUTPUT.PUT_LINE('p_replaced_card '||p_replaced_card );

IF p_replaced_card is null then

if p_reversal_type='FILE' then

--offline csu update 

  sp_OFFLINE_CSU_REVERSAL(
    P_CARD_NUMBER => P_CARD_NUMBER,
    P_TXN_AMOUNT => P_TXN_AMOUNT,
    P_APPROVAL_CODE => P_APPROVAL_CODE,
    P_TERMINAL_ID => P_TERMINAL_ID,
    P_RRN => P_RRN,
    P_DRCR => P_DRCR,
    P_SUB_TXN_TYPE=>v_sub_txn_type,
    P_OUT => P_OUT_CSU

  );

  DBMS_OUTPUT.PUT_LINE('CSU OUTPUT : '||P_OUT_CSU );

  INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            'Reach 1',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

  if P_out_csu='00' then

--Reversal insert into auth table 
dbms_output.put_line('Inside reversal csu file 00');

DBMS_output.put_line('p_card_number :'||p_card_number||'p_approval_code :'||p_approval_code||'p_rrn :'||p_rrn||'p_terminal_id :'||p_terminal_id||'p_txn_amount :'||p_txn_amount||'p_txn_time:'||p_txn_time
||'p_txn_date :'||p_txn_date);
    INSERT INTO aswt_switch_txn_authrization (
    settle_flag,
    txn_issuer,
    txn_fwd_inst_1,
    txn_fwd_inst_2,
    txn_auth_source,
    txn_channel,
    txn_type,
    txn_code,
    txn_date,
    txn_time,
    fp_masked,
    fp_type,
    int_mti,
    int_ref_no,
    txn_batch_no,
    txn_batch_status,
    drcr,
    fp_form_factor,
    int_seq_no,
    int_rc,
    scheme,
    int_rrn,
    int_proc_code,
    int_amt,
    int_adj_amt1,
    int_adj_amt2,
    int_txn_fees1,
    int_txn_fees2,
    int_pos_entry_mode,
    int_void_flag,
    mti,
    f002,
    f003,
    f004,
    f005,
    f006,
    f007,
    f008,
    f009,
    f010,
    f011,
    f012,
    f013,
    f014,
    f015,
    f016,
    f017,
    f018,
    f019,
    f020,
    f021,
    f022,
    f023,
    f024,
    f025,
    f026,
    f027,
    f028,
    f029,
    f030,
    f031,
    f032,
    f033,
    f034,
    f035,
    f036,
    f037,
    f038,
    f039,
    f040,
    f041,
    f042,
    f043,
    f044,
    f045,
    f046,
    f047,
    f048,
    f049,
    f050,
    f051,
    f052,
    f053,
    f054,
    f055,
    f056,
    f057,
    f058,
    f059,
    f060,
    f061,
    f062,
    f063,
    f064,
    f065,
    f066,
    f067,
    f068,
    f069,
    f070,
    f071,
    f072,
    f073,
    f074,
    f075,
    f076,
    f077,
    f078,
    f079,
    f080,
    f081,
    f082,
    f083,
    f084,
    f085,
    f086,
    f087,
    f088,
    f089,
    f090,
    f091,
    f092,
    f093,
    f094,
    f095,
    f096,
    f097,
    f098,
    f099,
    f100,
    f101,
    f102,
    f103,
    f104,
    f105,
    f106,
    f107,
    f108,
    f109,
    f110,
    f111,
    f112,
    f113,
    f114,
    f115,
    f116,
    f117,
    f118,
    f119,
    f120,
    f121,
    f122,
    f123,
    f124,
    f125,
    f126,
    f127,
    f128,
    reversal_flag,
    txn_acquirer,
    sys_txn_date,
    program_id,
    bank_id,
    settle_date,
    balance_update_flag,
    balance_update_date,
    sub_batch_no,
    acc_flag,
    batch_no,
    batch_upload_flag,
    cs_id,
    atc,
    batch_upload_date,
    bal_update_flag_ruk,
    bal_update_date_ruk,
    ticket_id,
--    subbatch_settle_date,
--    subbatch_settle_flag,
    stationname,
    stationid,
    transacdesc,
    manual_settle_flag,
    manual_settle_date,
    unique_txn_id,
    cs_process_id,
  --  total_bal,
    host_bal,
    shadow_bal,
    server_code,
    trml_date,
sub_txn_type,
  fund_source,
  int_txn_type 
    ) SELECT
   'N' settle_flag,
    txn_issuer,
    txn_fwd_inst_1,
    txn_fwd_inst_2,
    txn_auth_source,
    txn_channel,
    '41000' txn_type,
    txn_code,
    txn_date,
    txn_time,
    fp_masked,
    fp_type,
   '0420', 
    int_ref_no,
    txn_batch_no,
    txn_batch_status,
    p_drcr,  --drcr
    fp_form_factor,
    int_seq_no,
    int_rc,
    scheme,
    p_rrn,
    int_proc_code,
    p_txn_amount,
    int_adj_amt1,
    int_adj_amt2,
    int_txn_fees1,
    int_txn_fees2,
    int_pos_entry_mode,
    int_void_flag,
    mti,
    p_card_number,
    f003,
    p_txn_amount,
    f005,
    f006,
    f007,
    f008,
    f009,
    f010,
    f011,
    f012,
    f013,
    f014,
    f015,
    f016,
    f017,
    f018,
    f019,
    f020,
    f021,
    f022,
    f023,
    f024,
    f025,
    f026,
    f027,
    f028,
    f029,
    f030,
    f031,
    f032,
    f033,
    f034,
    f035,
    f036,
    p_rrn,
    p_approval_code,
    '00',
    f040,
    p_terminal_id,
    f042,
    f043,
    f044,
    f045,
    f046,
    f047,
    f048,
    f049,
    f050,
    f051,
    f052,
    f053,
    f054,
    f055,
    f056,
    f057,
    f058,
    f059,
    f060,
    f061,
    f062,
    f063,
    f064,
    f065,
    f066,
    f067,
    f068,
    f069,
    f070,
    f071,
    f072,
    f073,
    f074,
    f075,
    f076,
    f077,
    f078,
    f079,
    f080,
    f081,
    f082,
    f083,
    f084,
    f085,
    f086,
    f087,
    f088,
    f089,
    f090,
    f091,
    f092,
    f093,
    f094,
    f095,
    f096,
    f097,
    f098,
    f099,
    f100,
    f101,
    f102,
    f103,
    f104,
    f105,
    f106,
    f107,
    f108,
    f109,
    f110,
    f111,
    f112,
    f113,
    f114,
    f115,
    f116,
    f117,
    f118,
    f119,
    f120,
    f121,
    f122,
    f123,
    f124,
    f125,
    f126,
    f127,
    f128,
    reversal_flag,
    txn_acquirer,
   sysdate,
    program_id,
    bank_id,
    null settle_date,
    balance_update_flag,
    balance_update_date,
    sub_batch_no,
    acc_flag,
    batch_no,
    batch_upload_flag,
    cs_id,
    atc,
    batch_upload_date,
    bal_update_flag_ruk,
    bal_update_date_ruk,
    ticket_id,
--    subbatch_settle_date,
--    subbatch_settle_flag,
    stationname,
    stationid,
    transacdesc,
    manual_settle_flag,
    manual_settle_date,
    uuid_generate_v4() UNIQUE_TXN_ID,
    cs_process_id,
  --  total_bal,
    host_bal,
    shadow_bal,
    server_code,
    trml_date,
p_sub_txn_type,
fund_source ,
  '4100000'
from aswt_switch_txn_authrization WHERE f002=p_card_number  and  F038=p_approval_code AND F037=p_rrn AND rtrim(F041)=p_terminal_id
and f004=p_txn_amount and f012=p_txn_time and  f013=p_txn_date
and txn_type='21000' and f039='00' and drcr='R' and (settle_flag='N' or settle_flag is null);

DBMS_OUTPUT.PUT_LINE('AUTH INSERT FILE  '||SQL%ROWCOUNT );

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            'Reach 2',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

v_count :=Sql%rowcount;

if v_count> 0 THEN

commit;
p_out :='00';

else 

rollback;
p_out :='01';

end if;

end if;

else

 DBMS_OUTPUT.PUT_LINE('Here'); 

    INSERT INTO aswt_switch_txn_authrization (
    settle_flag,
    txn_issuer,
    txn_fwd_inst_1,
    txn_fwd_inst_2,
    txn_auth_source,
    txn_channel,
    txn_type,
    txn_code,
    txn_date,
    txn_time,
    fp_masked,
    fp_type,
    int_mti,
    int_ref_no,
    txn_batch_no,
    txn_batch_status,
    drcr,
    fp_form_factor,
    int_seq_no,
    int_rc,
    scheme,
    int_rrn,
    int_proc_code,
    int_amt,
    int_adj_amt1,
    int_adj_amt2,
    int_txn_fees1,
    int_txn_fees2,
    int_pos_entry_mode,
    int_void_flag,
    mti,
    f002,
    f003,
    f004,
    f005,
    f006,
    f007,
    f008,
    f009,
    f010,
    f011,
    f012,
    f013,
    f014,
    f015,
    f016,
    f017,
    f018,
    f019,
    f020,
    f021,
    f022,
    f023,
    f024,
    f025,
    f026,
    f027,
    f028,
    f029,
    f030,
    f031,
    f032,
    f033,
    f034,
    f035,
    f036,
    f037,
    f038,
    f039,
    f040,
    f041,
    f042,
    f043,
    f044,
    f045,
    f046,
    f047,
    f048,
    f049,
    f050,
    f051,
    f052,
    f053,
    f054,
    f055,
    f056,
    f057,
    f058,
    f059,
    f060,
    f061,
    f062,
    f063,
    f064,
    f065,
    f066,
    f067,
    f068,
    f069,
    f070,
    f071,
    f072,
    f073,
    f074,
    f075,
    f076,
    f077,
    f078,
    f079,
    f080,
    f081,
    f082,
    f083,
    f084,
    f085,
    f086,
    f087,
    f088,
    f089,
    f090,
    f091,
    f092,
    f093,
    f094,
    f095,
    f096,
    f097,
    f098,
    f099,
    f100,
    f101,
    f102,
    f103,
    f104,
    f105,
    f106,
    f107,
    f108,
    f109,
    f110,
    f111,
    f112,
    f113,
    f114,
    f115,
    f116,
    f117,
    f118,
    f119,
    f120,
    f121,
    f122,
    f123,
    f124,
    f125,
    f126,
    f127,
    f128,
    reversal_flag,
    txn_acquirer,
    sys_txn_date,
    program_id,
    bank_id,
    settle_date,
    balance_update_flag,
    balance_update_date,
    sub_batch_no,
    acc_flag,
    batch_no,
    batch_upload_flag,
    cs_id,
    atc,
    batch_upload_date,
    bal_update_flag_ruk,
    bal_update_date_ruk,
    ticket_id,
--    subbatch_settle_date,
--    subbatch_settle_flag,
    stationname,
    stationid,
    transacdesc,
    manual_settle_flag,
    manual_settle_date,
    unique_txn_id,
    cs_process_id,
    --total_bal,
    host_bal,
    shadow_bal,
    server_code,
    trml_date,
sub_txn_type,
  fund_source ,
  int_txn_type 
    ) SELECT
   'N' settle_flag,
    txn_issuer,
    txn_fwd_inst_1,
    txn_fwd_inst_2,
    txn_auth_source,
    txn_channel,
    '41000' txn_type,
    txn_code,
    txn_date,
    txn_time,
    fp_masked,
    fp_type,
   '0420', 
    int_ref_no,
    txn_batch_no,
    txn_batch_status,
    p_drcr,  --drcr
    fp_form_factor,
    int_seq_no,
    int_rc,
    scheme,
    p_rrn,
    int_proc_code,
    p_txn_amount,
    int_adj_amt1,
    int_adj_amt2,
    int_txn_fees1,
    int_txn_fees2,
    int_pos_entry_mode,
    int_void_flag,
    mti,
    p_card_number,
    f003,
    p_txn_amount,
    f005,
    f006,
    f007,
    f008,
    f009,
    f010,
    f011,
    f012,
    f013,
    f014,
    f015,
    f016,
    f017,
    f018,
    f019,
    f020,
    f021,
    f022,
    f023,
    f024,
    f025,
    f026,
    f027,
    f028,
    f029,
    f030,
    f031,
    f032,
    f033,
    f034,
    f035,
    f036,
    p_rrn,
    p_approval_code,
    '00',
    f040,
    p_terminal_id,
    f042,
    f043,
    f044,
    f045,
    f046,
    f047,
    f048,
    f049,
    f050,
    f051,
    f052,
    f053,
    f054,
    f055,
    f056,
    f057,
    f058,
    f059,
    f060,
    f061,
    f062,
    f063,
    f064,
    f065,
    f066,
    f067,
    f068,
    f069,
    f070,
    f071,
    f072,
    f073,
    f074,
    f075,
    f076,
    f077,
    f078,
    f079,
    f080,
    f081,
    f082,
    f083,
    f084,
    f085,
    f086,
    f087,
    f088,
    f089,
    f090,
    f091,
    f092,
    f093,
    f094,
    f095,
    f096,
    f097,
    f098,
    f099,
    f100,
    f101,
    f102,
    f103,
    f104,
    f105,
    f106,
    f107,
    f108,
    f109,
    f110,
    f111,
    f112,
    f113,
    f114,
    f115,
    f116,
    f117,
    f118,
    f119,
    f120,
    f121,
    f122,
    f123,
    f124,
    f125,
    f126,
    f127,
    f128,
    reversal_flag,
    txn_acquirer,
   sysdate,
    program_id,
    bank_id,
    null settle_date,
    balance_update_flag,
    balance_update_date,
    sub_batch_no,
    acc_flag,
    batch_no,
    batch_upload_flag,
    cs_id,
    atc,
    batch_upload_date,
    bal_update_flag_ruk,
    bal_update_date_ruk,
    ticket_id,
--    subbatch_settle_date,
--    subbatch_settle_flag,
    stationname,
    stationid,
    transacdesc,
    manual_settle_flag,
    manual_settle_date,
    uuid_generate_v4() UNIQUE_TXN_ID,
    cs_process_id,
   -- total_bal,
    host_bal,
    shadow_bal,
    server_code,
    trml_date,
p_sub_txn_type,
  fund_source,
  '4100000'
from aswt_switch_txn_authrization WHERE f002=p_card_number  and  F038=p_approval_code AND F037=p_rrn AND rtrim(F041)=rtrim(p_terminal_id)
and f004=p_txn_amount and f012=p_txn_time and nvl(to_char(trml_date,'YY'),substr(txn_date,7,2) )|| f013=p_txn_date
and txn_type='21000' and f039='00' and drcr='D' and (settle_flag='N' or settle_flag is null);

dbms_output.put_line('OTHER FILE INSERT '||Sql%rowcount);
dbms_output.put_line('Reach 3 '||p_card_number||' '||p_approval_code||' '||p_rrn||' '||rtrim(p_terminal_id)||' '||p_txn_amount||' '||p_txn_time||' '||p_txn_date);

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            'Reach 3'||p_card_number||' '||p_approval_code||' '||p_rrn||p_terminal_id||' '||p_txn_amount||' '||p_txn_time||' '||p_txn_date,
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );
         
         

--UPDATE ASWT_SWITCH_TXN_AUTHRIZATION@MYFINITYTOBSR SET DRCR='R' WHERE f002=p_card_number and F038=p_approval_code AND F037=p_rrn AND F041=p_terminal_id
--and f004=p_txn_amount
--and txn_type='21000' and f039='00' and drcr='D' and (settle_flag='N' or settle_flag is null);

UPDATE ASWT_SWITCH_TXN_AUTHRIZATION SET DRCR=p_drcr,sub_txn_type=p_sub_txn_type WHERE f002=p_card_number and F038=p_approval_code AND F037=p_rrn AND rtrim(F041)=rtrim(p_terminal_id)
and f004=p_txn_amount  and f012=p_txn_time and nvl(to_char(trml_date,'YY'),substr(txn_date,7,2) )|| f013=p_txn_date
and txn_type='21000' and f039='00' and drcr='D' and (settle_flag='N' or settle_flag is null);

dbms_output.put_line('OTHER FILE UPDATE '||Sql%rowcount);

v_count :=Sql%rowcount;

if v_count> 0 THEN

commit;
p_out :='00';

else 

rollback;
p_out :='01';

end if;

end if;

elsif p_replaced_card='Y' then

select hash_card_number into v_new_card_number from card_detail where old_card_no=p_card_number;

insert into ASWT_REPLACED_CARD_REVERSAL
(
F002
,F004
,F012
,F013
,F037
,F041
,F042
,F038
,DRCR
,F039
,SETTLE_FLAG
,SYS_TXN_DATE
,NEW_F002
,MTI
,TXN_TYPE
,SUB_TXN_TYPE
,OLD_F002,
trml_date,
txn_date,
fund_source,
int_txn_type
)
select 
F002
,F004
,F012
,F013
,F037
,F041
,F042
,F038
,DRCR
,F039
,SETTLE_FLAG
,SYS_TXN_DATE
,v_new_card_number
,INT_MTI
,TXN_TYPE
,SUB_TXN_TYPE
,P_CARD_NUMBER,
trml_date,
txn_date,
fund_source,
int_txn_type
from  aswt_switch_txn_authrization WHERE f002=p_card_number and F038=p_approval_code AND F037=p_rrn AND rtrim(F041)=p_terminal_id
and f004=p_txn_amount  and f012=p_txn_time and nvl(to_char(trml_date,'YY'),substr(txn_date,7,2) )|| f013=p_txn_date
and txn_type='21000' and f039='00' and drcr='D' and (settle_flag='N' or settle_flag is null);

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            'Reach 4',
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

update aswt_switch_txn_authrization set DRCR='R' WHERE f002=p_card_number and F038=p_approval_code AND F037=p_rrn AND rtrim(F041)=p_terminal_id
and f004=p_txn_amount  and f012=p_txn_time and nvl(to_char(trml_date,'YY'),substr(txn_date,7,2) )|| f013=p_txn_date
and txn_type='21000' and f039='00' and drcr='D' and (settle_flag='N' or settle_flag is null);

end if;

exception 

when others then

p_out:='01'||sqlcode||sqlerrm;

v_error:=01;
-- dbms_utility.format_error_backtrace;

dbms_output.put_LINE('Error occurredd....!!!'||sqlcode||sqlerrm);

INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
              'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            v_error,
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

raise;

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_sale_reversal_main()
 SECURITY DEFINER
AS $procedure$

    v_exist_count          NUMBER := 0;
    v_num_days             NUMBER := 0;
    v_wait_days            NUMBER := 5;  --number of days to wait 
    v_reversal_check_cnt   NUMBER := 0;
	v_reason_code          varchar2(4);
	v_reason_abbr          varchar2(4);
--     v_reason_code          aswt_reversal_reason_code.reason_code%TYPE;
--     v_reason_abbr          aswt_reversal_reason_code.reason_abbr%TYPE;
    p_out                  VARCHAR2(1000);
	v_encrypted_card_no    varchar2(70);
--     v_encrypted_card_no    card_encryption_detail.enrypted_card_no%TYPE;
    e_count                NUMBER;
    TYPE t_type_rec IS RECORD (
        f013               VARCHAR2(6),
        actual_f013        VARCHAR2(6),
        f012               VARCHAR2(6),
        f038               VARCHAR2(6),
        f041               VARCHAR2(16),
        f037               VARCHAR2(12),
        f004               VARCHAR2(12),
        f002               varchar2(64),
        drcr               VARCHAR2(2),
        trml_date          date,
        txn_auth_date      DATE,
        num_of_days        NUMBER,
        status             varchar2(20),
        replacement_flag   VARCHAR2(20),
        txn_type           varchar2(8),
        f042               VARCHAR2(15),
        f043               VARCHAR2(40),
        f049               VARCHAR2(4),
        f039               VARCHAR2(3),
        f011               VARCHAR2(11)
    );
    v_type                 t_type_rec;
      
    CURSOR c1 IS
    SELECT
        *
    FROM
        (
            SELECT
                nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))
                || f013 AS f013,
                f013 AS actual_f013,
                f012,
                f038,
                f041,
                f037,
                f004,
                f002,
                drcr,
                trml_date,
                to_date(nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))
                        || f013, 'YYMMDD') AS txn_auth_date,
                Date_part('DAY',sysdate - to_date(nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))|| f013, 'YYMMDD')) AS num_of_days,
                cd.status,
                cd.replacement_flag,
                aswt.txn_type,
                aswt.f042,
                aswt.f043,
                aswt.f049,
                aswt.f039,
                aswt.f011
            FROM
                aswt_switch_txn_authrization   aswt
                JOIN card_detail                    cd ON ( aswt.f002 = cd.hash_card_number )
                JOIN card_encryption_detail         enc ON ( cd.card_ref_number = enc.card_ref_number )
            WHERE
                cd.status IN (
                    'A',
                    'PHL',
                    'THL'
                )
             --   AND aswt.f037 = '214112000138'
                AND f039 = '00'
                AND drcr = 'D'
                AND txn_type = '21000'
               -- and int_txn_type = '2100005'
                and f013 is not null
                AND ( settle_flag = 'N'
                      OR settle_flag IS NULL )
                --AND trunc(to_date(nvl(to_char(aswt.trml_date, 'YY'), substr(aswt.txn_date, 7, 2))
                --                  || aswt.f013, 'yymmdd')) >= TO_DATE('15-OCT-2019','DD-MON-YYYY')
                AND f037 NOT IN (
                    SELECT
                        f037
                    FROM
                        aswt_raw_decline_queue
                    WHERE
                        drcr = 'D'
                        AND f039 = '00'
                        AND txn_type = '21000'
                )
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        cs_rupay_in rpy
                    WHERE
                        rpy.de002 = enc.enrypted_card_no
                        AND rpy.de004 = to_number(aswt.f004)
                        AND substr(rpy.de012, 1, 6) = nvl(to_char(aswt.trml_date, 'YY'), substr(aswt.txn_date, 7, 2))|| aswt.f013
                        AND substr(rpy.de012, 7, 6) = aswt.f012
                        AND rpy.de038 = aswt.f038
                        AND rpy.de041 = rtrim(aswt.f041)
                        AND substr(rpy.de031, 11, 12) = aswt.f037
                        AND rpy.de024 = '200'
                        AND rpy.mti IN (
                            '1240',
                            '0200'
                        )
                )
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        harmonization_exception_rpt h
                    WHERE
                        h.f002 = aswt.f002
                        AND h.f037 = aswt.f037
                        AND h.f004 = aswt.f004
                        AND h.f013 = aswt.f013
                        AND h.f012 = aswt.f012
                        AND h.f041 = aswt.f041
                        AND h.presentment_flag = 'Y'
                )
--and rownum=1
        )
    WHERE
        num_of_days >= v_wait_days;

    CURSOR cur_queue IS
    SELECT   
    --nvl(TO_CHAR(trml_date,'YY'),substr(txn_date,7,2) )|| f013 as f013,
        f013,
        f013 AS actual_f013,
        f012,
        f038,
        f041,
        f037,
        f004,
        f002,
        drcr,
        trml_date,
        to_date(nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))
                || f013, 'YYMMDD') AS txn_auth_date,
        Date_part('DAY',sysdate - to_date(nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))|| f013, 'YYMMDD')) AS num_of_days,
        cd.status,
        cd.replacement_flag,
        que.txn_type,
        que.f042,
        que.f043,
        que.f049,
        que.f039,
        que.f011
    FROM
        aswt_raw_decline_queue   que
        JOIN card_detail              cd ON ( que.f002 = cd.hash_card_number )
        JOIN card_encryption_detail   enc ON ( cd.card_ref_number = enc.card_ref_number )
    WHERE
        cd.status IN (
            'A',
            'PHL',
            'THL'
        )
        AND que.drcr = 'D'
        AND que.f039 = '00'
        AND que.txn_type = '21000'
        AND ( que.settle_flag = 'N'
              OR que.settle_flag IS NULL )
       -- AND trunc(to_date(nvl(to_char(que.trml_date, 'YY'), substr(que.txn_date, 7, 2))|| que.f013, 'yymmdd')) >= TO_DATE('15-OCT-2019','DD-MON-YYYY')
        AND NOT EXISTS (
            SELECT
                1
            FROM
                cs_rupay_in rpy
            WHERE
                rpy.de002 = enc.enrypted_card_no
                AND rpy.de004 = to_number(que.f004)
                AND substr(rpy.de012, 1, 6) = nvl(to_char(que.trml_date, 'YY'), substr(que.txn_date, 7, 2))|| que.f013
                AND substr(rpy.de012, 7, 6) = que.f012
                AND rpy.de038 = que.f038
                AND rpy.de041 = rtrim(que.f041)
                AND substr(rpy.de031, 11, 12) = que.f037
                AND rpy.de024 = '200'
                AND rpy.mti IN (
                    '1240',
                    '0200'
                )
        )
        AND NOT EXISTS (
            SELECT
                1
            FROM
                harmonization_exception_rpt h
            WHERE
                h.f002 = que.f002
                AND h.f037 = que.f037
                AND h.f004 = que.f004
                AND h.f013 = que.f013
                AND h.f012 = que.f012
                AND h.f041 = que.f041
                AND h.presentment_flag = 'Y'
        );

    v_cur_queue            cur_queue%rowtype;
BEGIN
DBMS_OUTPUT.PUT_LINE('A1');
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--Unsettled transaction report
    OPEN c1;
    LOOP
        FETCH c1 INTO v_type;
        EXIT WHEN c1%notfound;
        DBMS_OUTPUT.PUT_LINE('A2');
--write code
--DBMS_OUTPUT.pUT_LINE('CUR 1STARTED');

--check if already reversal present but reversal not updated for original transaction
        SELECT
            COUNT(1)
        INTO v_reversal_check_cnt
        FROM
            aswt_switch_txn_authrization aswt
        WHERE
            aswt.f002 = v_type.f002
            AND to_number(aswt.f004) = v_type.f004
            AND nvl(to_char(aswt.trml_date, 'YY'), substr(aswt.txn_date, 7, 2))
                || aswt.f013 = v_type.f013
            AND aswt.f012 = v_type.f012
            AND aswt.f038 = v_type.f038
            AND aswt.f041 = v_type.f041
            AND aswt.f037 = v_type.f037
            AND aswt.f039 = '00'
            AND aswt.drcr = 'R'
            AND aswt.txn_type = '42000'
            AND ( aswt.settle_flag = 'N'
                  OR aswt.settle_flag IS NULL );

        IF v_reversal_check_cnt = 0 THEN

--check num of days to be reverse
            IF v_type.num_of_days >= v_wait_days THEN
                SELECT
                    reason_code,
                    reason_abbr
                INTO
                    v_reason_code,
                    v_reason_abbr
                FROM
                    aswt_reversal_reason_code
                WHERE
                    reason_code = '1004';

                dbms_output.put_line('v_reason_abbr '
                                     || v_reason_abbr
                                     || 'v_type.status '
                                     || v_type.status
                                     || 'v_type.replacement_flag '
                                     || v_type.replacement_flag
                                     || ' --- '
                                     || v_type.f037);

                IF v_type.status IN (
                    'A',
                    'THL'
                ) THEN
                    sp_offline_sale_reversal(p_reversal_type => v_reason_abbr, p_card_number => v_type.f002, p_txn_amount => v_type
                    .f004, p_txn_date => v_type.f013, p_txn_time => v_type.f012,
                                             p_approval_code => v_type.f038, p_terminal_id => v_type.f041, p_rrn => v_type.f037, p_drcr
                                             => 'R', p_sub_txn_type => v_reason_code,
                                             p_replaced_card => NULL, p_out => p_out);

--dbms_output.put_line('CUR 1 P_OUT...'||P_OUT);

                    UPDATE aswt_raw_decline_queue
                    SET
                        drcr = 'R'
                    WHERE
                        f002 = v_type.f002
                        AND f038 = v_type.f038
                        AND f037 = v_type.f037
                        AND f041 = v_type.f041
                        AND f004 = v_type.f004
                        AND f012 = v_type.f012
                        AND nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))
                            || f013 = v_type.f013
                        AND txn_type = '21000'
                        AND f039 = '00'
                        AND drcr = 'D'
                        AND ( settle_flag = 'N'
                              OR settle_flag IS NULL );

--DBMS_OUTPUT.PUT_LINE('QUEUE UPDATE FILE  '||SQL%ROWCOUNT );

                ELSIF v_type.status = 'PHL' AND v_type.replacement_flag = 'Y' THEN
                    sp_offline_sale_reversal(p_reversal_type => v_reason_abbr, p_card_number => v_type.f002, p_txn_amount => v_type
                    .f004, p_txn_date => v_type.f013, p_txn_time => v_type.f012,
                                             p_approval_code => v_type.f038, p_terminal_id => v_type.f041, p_rrn => v_type.f037, p_drcr
                                             => 'R', p_sub_txn_type => v_reason_code,
                                             p_replaced_card => 'Y', p_out => p_out);

--dbms_output.put_line('CUR 1 P_OUT...'||P_OUT);

                    UPDATE aswt_raw_decline_queue
                    SET
                        drcr = 'R'
                    WHERE
                        f002 = v_type.f002
                        AND f038 = v_type.f038
                        AND f037 = v_type.f037
                        AND f041 = v_type.f041
                        AND f004 = v_type.f004
                        AND f012 = v_type.f012
                        AND nvl(to_char(trml_date, 'YY'), substr(txn_date, 7, 2))
                            || f013 = v_type.f013
                        AND txn_type = '21000'
                        AND f039 = '00'
                        AND drcr = 'D'
                        AND ( settle_flag = 'N'
                              OR settle_flag IS NULL );

                    dbms_output.put_line('QUEUE UPDATE FILE  ' || SQL%rowcount);
                ELSIF v_type.status = 'PHL' AND v_type.replacement_flag = 'N' THEN
                    dbms_output.put_line('CUR PPP' || v_type.f037);
                    SELECT
                        COUNT(1)
                    INTO e_count
                    FROM
                        harmonization_exception_rpt h
                    WHERE
                        h.f002 = v_type.f002
                        AND h.f037 = v_type.f037
                        AND h.f004 = v_type.f004
                        AND h.f013 = v_type.actual_f013
                        AND h.f012 = v_type.f012
                        AND h.f041 = v_type.f041;

                    dbms_output.put_line('E_count...' || e_count);
                    IF e_count = 0 THEN
                        INSERT INTO harmonization_exception_rpt (
                            f002,
                            f004,
                            f011,
                            f012,
                            f013,
                            f037,
                            f038,
                            f039,
                            f041,
                            f042,
                            f043,
                            f049,
                            drcr,
                            txn_type,
                            trml_date,
                            txn_auth_date,
                            num_of_days,
                            status,
                            replacement_flag,
                            sys_txn_date,
                            reason_code
                        ) VALUES (
                            v_type.f002,
                            v_type.f004,
                            v_type.f011,
                            v_type.f012,
                            v_type.actual_f013,
                            v_type.f037,
                            v_type.f038,
                            v_type.f039,
                            v_type.f041,
                            v_type.f042,
                            v_type.f043,
                            v_type.f049,
                            v_type.drcr,
                            v_type.txn_type,
                            v_type.trml_date,
                            v_type.txn_auth_date,
                            v_type.num_of_days,
                            v_type.status,
                            v_type.replacement_flag,
                            sysdate,
                            v_reason_code
                        );

                    END IF;

                END IF;

            END IF;
        ELSE
            UPDATE aswt_switch_txn_authrization
            SET
                drcr = 'R'
            WHERE
                f002 = v_type.f002
                AND f038 = v_type.f038
                AND f037 = v_type.f037
                AND f041 = v_type.f041
                AND to_number(f004) = v_type.f004
                AND txn_type = '21000'
                AND f039 = '00'
                AND drcr = 'D'
                AND ( settle_flag = 'N'
                      OR settle_flag IS NULL );

        END IF;

    END LOOP;

    e_count := 0;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--T+5 waiting reversal transaction
    OPEN cur_queue;
    LOOP
        FETCH cur_queue INTO v_cur_queue;
        EXIT WHEN cur_queue%notfound;
--    DBMS_OUTPUT.pUT_LINE('CUR QUEUE STARTED');
        SELECT
            COUNT(1)
        INTO v_reversal_check_cnt
        FROM
            aswt_switch_txn_authrization aswt
        WHERE
            aswt.f002 = v_cur_queue.f002
            AND to_number(aswt.f004) = v_cur_queue.f004
            AND nvl(to_char(aswt.trml_date, 'YY'), substr(aswt.txn_date, 7, 2))
                || aswt.f013 = v_cur_queue.f013
            AND aswt.f012 = v_cur_queue.f012
            AND aswt.f038 = v_cur_queue.f038
            AND aswt.f041 = v_cur_queue.f041
            AND aswt.f037 = v_cur_queue.f037
            AND aswt.f039 = '00'
            AND aswt.drcr = 'R'
            AND aswt.txn_type = '42000'
            AND ( aswt.settle_flag = 'N'
                  OR aswt.settle_flag IS NULL );

        IF v_reversal_check_cnt = 0 THEN

--check num of days to be reverse
            IF v_cur_queue.num_of_days >= v_wait_days THEN
                SELECT
                    reason_code,
                    reason_abbr
                INTO
                    v_reason_code,
                    v_reason_abbr
                FROM
                    aswt_reversal_reason_code
                WHERE
                    reason_code = '1004';

                IF v_cur_queue.status IN (
                    'A',
                    'THL'
                ) THEN

--DBMS_OUTPUT.pUT_LINE('CUR QUEUE v_reason_code '||v_reason_code||'  v_reason_abbr '||v_reason_abbr);
                    sp_offline_sale_reversal(p_reversal_type => v_reason_abbr, p_card_number => v_cur_queue.f002, p_txn_amount =>
                    v_cur_queue.f004, p_txn_date => v_cur_queue.f013, p_txn_time => v_cur_queue.f012,
                                             p_approval_code => v_cur_queue.f038, p_terminal_id => v_cur_queue.f041, p_rrn => v_cur_queue
                                             .f037, p_drcr => 'R', p_sub_txn_type => v_reason_code,
                                             p_replaced_card => NULL, p_out => p_out);

                    dbms_output.put_line('P_OUT...' || p_out);
                ELSIF v_cur_queue.status = 'PHL' AND v_cur_queue.status = 'Y' THEN
                    sp_offline_sale_reversal(p_reversal_type => v_reason_abbr, p_card_number => v_cur_queue.f002, p_txn_amount =>
                    v_cur_queue.f004, p_txn_date => v_cur_queue.f013, p_txn_time => v_cur_queue.f012,
                                             p_approval_code => v_cur_queue.f038, p_terminal_id => v_cur_queue.f041, p_rrn => v_cur_queue
                                             .f037, p_drcr => 'R', p_sub_txn_type => v_reason_code,
                                             p_replaced_card => 'Y', p_out => p_out);
                ELSIF v_cur_queue.status = 'PHL' AND v_cur_queue.replacement_flag = 'N' THEN
                    SELECT
                        COUNT(1)
                    INTO e_count
                    FROM
                        harmonization_exception_rpt h
                    WHERE
                        h.f002 = v_type.f002
                        AND h.f037 = v_type.f037
                        AND h.f004 = v_type.f004
                        AND h.f013 = v_type.actual_f013
                        AND h.f012 = v_type.f012
                        AND h.f041 = v_type.f041;

                    IF e_count = 0 THEN
                        INSERT INTO harmonization_exception_rpt (
                            f002,
                            f004,
                            f011,
                            f012,
                            f013,
                            f037,
                            f038,
                            f039,
                            f041,
                            f042,
                            f043,
                            f049,
                            drcr,
                            txn_type,
                            trml_date,
                            txn_auth_date,
                            num_of_days,
                            status,
                            replacement_flag,
                            sys_txn_date,
                            reason_code
                        ) VALUES (
                            v_cur_queue.f002,
                            v_cur_queue.f004,
                            v_cur_queue.f011,
                            v_cur_queue.f012,
                            v_cur_queue.actual_f013,
                            v_cur_queue.f037,
                            v_cur_queue.f038,
                            v_cur_queue.f039,
                            v_cur_queue.f041,
                            v_cur_queue.f042,
                            v_cur_queue.f043,
                            v_cur_queue.f049,
                            v_cur_queue.drcr,
                            v_cur_queue.txn_type,
                            v_cur_queue.trml_date,
                            v_cur_queue.txn_auth_date,
                            v_cur_queue.num_of_days,
                            v_cur_queue.status,
                            v_cur_queue.replacement_flag,
                            sysdate,
                            v_reason_code
                        );

                    END IF;

                END IF;

            END IF;
        ELSE
            UPDATE aswt_switch_txn_authrization
            SET
                drcr = 'R'
            WHERE
                f002 = v_cur_queue.f002
                AND f038 = v_cur_queue.f038
                AND f037 = v_cur_queue.f037
                AND f041 = v_cur_queue.f041
                AND to_number(f004) = v_cur_queue.f004
                AND txn_type = '21000'
                AND f039 = '00'
                AND drcr = 'D'
                AND ( settle_flag = 'N'
                      OR settle_flag IS NULL );

        END IF;

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Errror occurred....'
                             || sqlcode
                             || sqlerrm);
                            -- || dbms_utility.format_error_backtrace);
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_offline_void_reversal(p_process_id character varying, p_user_id character varying, p_out character varying)
 SECURITY DEFINER
AS $procedure$ 

v_count number:=0;
v_reversal_check_cnt number;
v_reason_code aswt_reversal_reason_code.reason_code%type;
v_reason_abbr aswt_reversal_reason_code.reason_abbr%type;
p_out_response varchar2(100);
E_count   number;

cursor cur_void is SELECT
   substr(de012,1,6) de013,
    substr(de012,7,12) de012,
    de038,
    de041,
    substr(rpy.de031,11,12) as de037,
    lpad(de004,12,'0') de004 ,
    cd.hash_Card_number de002,
    cd.status,
    cd.replacement_flag,
    substr(de012,3,4) actaul_f013,
    aswt.f041,
    aswt.f042,
    aswt.f043,
    TO_DATE(NVL(to_char(aswt.trml_date,'YY'),SUBSTR(aswt.TXN_DATE,7,2))|| aswt.f013,'YYMMDD') as txn_auth_date,
    aswt.trml_date,
    aswt.drcr,
    aswt.TXN_TYPE,
    aswt.f039,
    aswt.f049,
    aswt.f011
    FROM cs_rupay_intemp rpy  join card_encryption_detail enc 
on(rpy.de002=enc.enrypted_card_no)
join card_detail cd on(enc.card_ref_number=cd.card_ref_number)
join aswt_switch_txn_authrization aswt
on(cd.hash_card_number=aswt.f002 and substr(rpy.de031,11,12) = aswt.f037)
where cd.status in('A','PHL','THL') and aswt.f039='00' and aswt.txn_type='21000' and aswt.drcr='D' and (aswt.settle_flag ='N' or aswt.settle_flag is null) and  rpy.process_id=p_process_id and rpy.de024='266' and rpy.mti='8144'
and not exists (select 1 from harmonization_Exception_rpt h where h.f002 = aswt.f002 and h.f037 = aswt.f037 and h.f004 = aswt.f004 and h.f013 = aswt.f013 and h.f012=aswt.f012
                    and h.f041 = aswt.f041 and h.presentment_flag = 'Y')
;

v_void_type cur_void%ROWTYPE;
--

Begin

DBMS_OUTPUT.PUT_LINE('P_PROCESS_ID '||P_PROCESS_ID||'P_USER_ID'||P_USER_ID);

select count(1) into v_count from cs_rupay_intemp where process_id =p_process_id and de024='266' and mti='8144';

DBMS_OUTPUT.PUT_LINE('v_count '||v_count);

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            'Reach void 1 '||v_count,
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

--check in file void transaction count
if v_count> 0 then

DBMS_OUTPUT.pUT_LINE('CUR VOID 1');
open cur_void ;
loop

fetch cur_void into v_void_type;

exit when cur_void%notfound;

DBMS_OUTPUT.pUT_LINE('CUR VOID 2');

-- check reversal count 
select count(1) into v_reversal_check_cnt from aswt_switch_txn_authrization aswt
where aswt.f002=v_void_type.de002 and to_number(aswt.f004)=v_void_type.de004
and  nvl(TO_CHAR(aswt.trml_date,'YY'),substr(aswt.txn_date,7,2) )|| aswt.f013=v_void_type.de013 and aswt.f012=v_void_type.de012 and aswt.f038=v_void_type.de038 and rtrim(aswt.f041)=v_void_type.de041
and aswt.f037=v_void_type.de037
and aswt.f039='00'
and aswt.drcr='R'
and aswt.txn_type='42000'
 AND ( aswt.settle_flag = 'N'
          OR aswt.settle_flag IS NULL) ;


--v_reversal_check_cnt := 0;
if v_reversal_check_cnt = 0 then

select reason_code , reason_abbr into v_reason_code, v_reason_abbr  from aswt_reversal_reason_code where reason_code='1005';

DBMS_OUTPUT.pUT_LINE('CUR VOID  v_reason_code '||v_reason_code||'  v_reason_abbr '||v_reason_abbr);

--card status check 
if v_void_type.status IN('A','THL')  then


sp_OFFLINE_SALE_REVERSAL(
    P_REVERSAL_TYPE => v_reason_abbr,
    P_CARD_NUMBER => v_void_type.de002,
    P_TXN_AMOUNT => v_void_type.de004,
    P_TXN_DATE => v_void_type.de013,
    P_TXN_TIME => v_void_type.de012,
    P_APPROVAL_CODE => v_void_type.de038,
    P_TERMINAL_ID => v_void_type.de041,
    P_RRN => v_void_type.de037,
    P_DRCR => 'R',
    P_SUB_TXN_TYPE => v_reason_code,
    p_replaced_card=>null,
    P_OUT => p_out_response
  );

elsif v_void_type.status='PHL' and v_void_type.replacement_flag='Y' then

DBMS_OUTPUT.PUT_LINE('PHL CARDS ');
sp_OFFLINE_SALE_REVERSAL(
    P_REVERSAL_TYPE => v_reason_abbr,
    P_CARD_NUMBER => v_void_type.de002,
    P_TXN_AMOUNT => v_void_type.de004,
    P_TXN_DATE => v_void_type.de013,
    P_TXN_TIME => v_void_type.de012,
    P_APPROVAL_CODE => v_void_type.de038,
    P_TERMINAL_ID => v_void_type.de041,
    P_RRN => v_void_type.de037,
    P_DRCR => 'R',
    P_SUB_TXN_TYPE => v_reason_code,
    p_replaced_card=>'Y',
    P_OUT => p_out_response
  );


elsif v_void_type.status='PHL' and v_void_type.replacement_flag='N' then

SELECT
     COUNT(1)
     INTO E_count
 FROM
     harmonization_exception_rpt h
 WHERE
     h.f002 = v_void_type.de002
     AND h.f037 = v_void_type.de037
     AND h.f004 = v_void_type.de004
     AND h.f013 = v_void_type.de013
     AND h.f012 = v_void_type.de012
     AND h.f041 = v_void_type.de041;


IF E_count > 0 then

insert into harmonization_Exception_rpt
(F002,
F004,
F011,
F012,
F013,
F037,
F038,
F039,
F041,
f042,
f043,
f049,
DRCR,
TXN_TYPE,
TRML_DATE,
TXN_AUTH_DATE,
STATUS,
REPLACEMENT_FLAG,
SYS_TXN_DATE,
REASON_CODE)
values
(v_void_type.de002,
v_void_type.de004,
v_void_type.f011,
v_void_type.de012,
v_void_type.actaul_f013,
v_void_type.de037,
v_void_type.de038,
v_void_type.F039,
v_void_type.F041,
v_void_type.f042,
v_void_type.f043,
v_void_type.f049,
v_void_type.DRCR,
v_void_type.TXN_TYPE,
v_void_type.TRML_DATE,
v_void_type.TXN_AUTH_DATE,
v_void_type.STATUS,
v_void_type.REPLACEMENT_FLAG,
sysdate,
v_reason_code);
end if;

end if;
--card status end;
end if;
--end if reversal count check


end loop;
--loop ended

 INSERT INTO cs_processlogmaster (
            process_id,
            main_activity_name,
            activity_log,
            start_date_time,
            end_date_time,
            complete_status,
            user_id,
            main_activity_id,
            file_name
        ) VALUES (
            'cs_offline_decline_reversal',
            'cs_offline_decline_reversal',
            'Reach void 2 '||v_count,
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
             TO_CHAR(SYSDATE,'DDMMYYYY HH24:MI:SS'),
            null,
            null,
            null,
            null
        );

end if;
--end if void txn count check
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_outlet_approved(OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

begin

open p_out for
select um.created_date ,user_name ,um.mobile_number ,ug.name as "user group name" , r.role_name  ,um.email_id ,i.institution_name  ,
partner_name ,issuer_name,z.name as "zone name " ,b.name as "Branch Name" 
from outlet_user_master um ,user_group ug , role r ,institution i ,partner p ,issuer s,"zone" z ,branch b 
where um.user_group_id =ug.id
and r.id=um.role_id
and um.institution_id =i.id
and um.partner_id =p.id
and um.issuer_id =s.id
and z.id=um.zone_id
and b.id=branch_id and upper(um.status) = 'A';

p_msg := 'Success';

exception 
when others then 
p_msg := 'Error'||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_outlet_approved(p_branch_id numeric, OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

begin

open p_out for
select to_char(um.created_date,'dd/mm/yyyy hh24:mi:ss') as "CREATED DATE" ,user_name as "OUTLET USER NAME" ,
case  when length(outlet_id)=8 then 'child outlet' else  'master outlet' end as "OUTLET TYPE",um.mobile_number  as "MOBILE NUMBER",
ug.name as "USER GROUP NAME" , r.role_name  as "ROLE NAME" ,um.email_id as "EMAIL ID",i.institution_name as "INSTITUTION NAME" ,
partner_name  as "PARTNER NAME",issuer_name as "ISSUER NAME",z.name as "ZONE NAME " ,b.name as "BRANCH NAME" 
from outlet_user_master um ,user_group ug , role r ,institution i ,partner p ,issuer s,"zone" z ,branch b 
where um.user_group_id =ug.id
and r.id=um.role_id
and um.institution_id =i.id
and um.partner_id =p.id
and um.issuer_id =s.id
and z.id=um.zone_id
and b.id=branch_id and upper(um.status) = 'A' and  um.branch_id =P_BRANCH_ID;

p_msg := 'Success';

exception 
when others then 
p_msg := 'Error'||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_pan_d_dup(p_pan character varying, p_product_id numeric, p_req_type character varying, OUT p_msg_code character varying, OUT p_msg character varying)
 SECURITY DEFINER
AS $procedure$

v_cnt  number:=0;

begin

 if p_req_type = 'RS' then
 	
   SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_cust_details c
    join card_detail cd on cd.cust_seq_id  = c.cust_seq_id and cd.status <> 'PHL'
    join prd_bin_profile p on p.bin = cd.bin and upper(p.is_gift_card) = 'N' and p.product_id = cd.product_id
    WHERE upper(pan_number) != 'INSTANT'
    AND cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
    AND upper(data_decryption_text(pan_number)) = upper(nvl(p_pan, '0'));
       
   
   if v_cnt > 0  then
   
   p_msg_code := '01';
   p_msg      := 'Given PAN already exist, only one full kyc card can be issued against a PAN';
   
   else
   
   p_msg_code := '00';
   p_msg      := 'Success';
   
   end if;
   
   
   return;    
  elsif p_req_type = 'L' then
  
   SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_cust_details c
    join card_detail cd on cd.cust_seq_id  = c.cust_seq_id and cd.status <> 'PHL'
    join prd_bin_profile p on p.bin = cd.bin and upper(p.is_gift_card) = 'N' and p.product_id = cd.product_id
    WHERE upper(pan_number) != 'INSTANT'
    AND cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
    AND upper(data_decryption_text(pan_number)) = upper(nvl(p_pan, '0'));
       
   
   if v_cnt > 0  then
   
   p_msg_code := '01';
   p_msg      := 'Given PAN already exist, only one full kyc card can be issued against a PAN';
   
   else
   
   p_msg_code := '00';
   p_msg      := 'Success';
   
   end if;
   
   
  
  return;
 
 elsif p_req_type = 'RA' then
  
   SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_cust_details c
    join card_detail cd on cd.cust_seq_id  = c.cust_seq_id and cd.status <> 'PHL'
    join prd_bin_profile p on p.bin = cd.bin and upper(p.is_gift_card) = 'N' and p.product_id = cd.product_id
    WHERE upper(pan_number) != 'INSTANT'
    AND cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
    AND upper(data_decryption_text(pan_number)) = upper(nvl(p_pan, '0'));
       
   
   if v_cnt > 1  then
   
   p_msg_code := '01';
   p_msg      := 'Given PAN already exist, only one full kyc card can be issued against a PAN';
   
   else
   
   p_msg_code := '00';
   p_msg      := 'Success';
   
   end if;
   
   
  
  return;
 
 elsif p_req_type = 'RB' then
  
   SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_cust_details c
    join card_detail cd on cd.cust_seq_id  = c.cust_seq_id and cd.status <> 'PHL'
    join prd_bin_profile p on p.bin = cd.bin and upper(p.is_gift_card) = 'N' and p.product_id = cd.product_id
    WHERE upper(pan_number) != 'INSTANT'
    AND cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
    AND upper(data_decryption_text(pan_number)) = upper(nvl(p_pan, '0'));
       
   
   if v_cnt = 1  then
   
   p_msg_code := '01';
   p_msg      := 'Given PAN already exist, only one full kyc card can be issued against a PAN';
   
   else
   
   p_msg_code := '00';
   p_msg      := 'Success';
   
   end if;
   
   
  
  return;

 
  elsif p_req_type = 'U' then
 
   SELECT
        COUNT(1)
    INTO v_cnt
    FROM
        cms_cust_details c
    join card_detail cd on cd.cust_seq_id  = c.cust_seq_id and cd.status <> 'PHL'
    join prd_bin_profile p on p.bin = cd.bin and upper(p.is_gift_card) = 'N' and p.product_id = cd.product_id
    WHERE upper(pan_number) != 'INSTANT'
    AND cd.product_id not in (select id from cms_product cp where cp.base_product_id is not null)
    AND upper(data_decryption_text(pan_number)) = upper(nvl(p_pan, '0'));
       
   
   if v_cnt > 0  then
   
   p_msg_code := '01';
   p_msg      := 'Given PAN already exist, only one full kyc card can be issued against a PAN';
   
   else
   
   p_msg_code := '00';
   p_msg      := 'Success';
   
   end if;
   
   

  return;
 end if;
 
	
exception 
when others then
p_msg_code := '01';
p_msg := ' Error!'||sqlerrm;

end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_replacement_fee_waiver(p_hash_card_number character varying, OUT p_out character varying, OUT p_waiver_flag character varying)
 SECURITY DEFINER
AS $procedure$

v_waiver_flag varchar2(2);
v_card_cnt  number;

v_markup_cnt number;
v_txn_waiver_count number;
v_fee_cnt number;

begin

	select count(1) 
	into v_card_cnt
	 from card_detail cd 
	 where cd.hash_Card_number=p_hash_Card_number;
	 
	 IF v_card_cnt =1 then
	 
	   select count(1) 
	 into v_markup_cnt 
	 from prd_fee_profile p 
	 where p.product_id = (select cd.product_id from card_detail cd where cd.hash_Card_number=p_hash_Card_number) 
	 and txn_type ='30003';
	 
	 if v_markup_cnt = 1  then 
	 
	 select  fee_txn_waiver_cnt
	into v_txn_waiver_count
	from prd_fee_profile p            
	join transaction_type tt on tt.txn_type = p.txn_type 
	where p.product_id = (select cd.product_id from card_detail cd where cd.hash_Card_number=p_hash_Card_number) 
	and p.txn_type ='30003';
	 
--	  select count(1) 
--	  into v_fee_cnt
--	  from cs_Fee_temp c where
--	  c.card_number in (		  
--		  select hash_Card_number from card_Detail cd1 where cd1.prep_account_number =
--		  (select cd.prep_account_number
--	           from card_detail cd 
--	           where cd.hash_Card_number=p_hash_Card_number)					   					   
--					   )
--	and fee_ind = '30003'				   
--					   ;

     select count(1) 
	into v_fee_cnt
	from cms_card_detail_history ccdh 
    join card_detail cd on cd.hash_card_number =  ccdh.old_pan 
    where ccdh.status_flag  = 'REPLACEMENT'
    and cd.prep_account_number = (select prep_account_number 
    								from card_detail c 
    								where c.hash_card_number = p_hash_Card_number)
     ;
					   
	if v_txn_waiver_count < v_fee_cnt then				   

     p_waiver_flag := 'N';
    else
	p_waiver_flag := 'Y';
	end if;

    else 
	p_out :='Card not Found';
	
	return;
	end if;
	
	else
	p_out :='Fee is not configured';
	
	return;
	end if;

p_out :='Success';
exception
when others then 
p_out := 'Error '||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_rupay_tip_surcharge()
 SECURITY DEFINER
AS $procedure$

    v_bank_approval_flag    VARCHAR2(10);
    v_action_flag           VARCHAR2(10);
    v_card_ref_number       VARCHAR2(64);
    v_existing_hash_card    VARCHAR2(64);
    v_replacement_flag      VARCHAR2(5);
    v_replaced_hash_card    VARCHAR2(64);
    v_card_number           VARCHAR2(64);
    v_tip_amount number;
    v_tip_fee_amt number;
    v_tip_fee_cnt number;
   v_tip_fee_diff_amt number;
  
BEGIN

    FOR i IN (
       SELECT
            de002,
            de012,
            cs.id,
            cs_host_mcc,
            cs_host_recon_diff,
--            pds0390,
            de031,
            de041,
            process_id,
                CASE
                    WHEN ( cs_host_recon_diff / 100 ) > 0 THEN 'D'
                    WHEN ( cs_host_recon_diff / 100 ) < 0 THEN 'C'
                END
            dr_cr_ind,
            de038,
            pds0159_sett_date,
            cd.hash_card_number,
            cd.replacement_flag,
            a.wallet_id,
            cd.prep_account_number,
            cd.outlet_id,
            a.f037,
            a.f002,
            a.f041,
            a.f013,
            a.f012,
            case when cd.replacement_flag = 'Y' then 
            (select cd2.hash_card_number from card_detail cd2 where cd2.old_card_no = cd.hash_card_number)
            end new_card
        FROM
            cs_rupay_in cs
            join card_encryption_detail ce on ce.enrypted_card_no = cs.de002
            join card_detail cd on cd.card_ref_number = ce.card_ref_number            
            join aswt_switch_txn_authrization a on a.f002 = cd.hash_card_number and a.cs_process_id = cs.process_id
                                                   and a.cs_id = cs.id
        WHERE cs_host_recon_diff != 0
            AND ( ttum_gen_date IS NULL
                OR ttum_gen_flag IS NULL
                )
    ) LOOP
     	 
       
       v_card_number := nvl(i.new_card,i.hash_card_number);
           
       v_tip_amount := abs(i.cs_host_recon_diff / 100);
      
      
       select count(1) 
       into v_tip_fee_cnt
       from cs_fee_temp c 
       where c.card_number  = v_card_number       
       and c.rrn = i.f037
       and c.reversal_flag is null
       and c.fee_ind = (select a.txn_type from transaction_type a where upper(a.TXN_NAME)='SURCHARGE FEE');
      
       if v_tip_fee_cnt =0 then 
       
          null;
       elsif v_tip_fee_cnt =1 then
       
           select c.fee_amt
       into v_tip_fee_amt
       from cs_fee_temp c 
       where c.card_number  = v_card_number
       and c.rrn = i.f037
       and c.reversal_flag is null
       and c.fee_ind = (select a.txn_type from transaction_type a where upper(a.TXN_NAME)='SURCHARGE FEE');
      
       if i.dr_cr_ind = 'D' then 
       
        v_tip_fee_diff_amt := v_tip_fee_amt - v_tip_amount;
       
        
       if v_tip_fee_diff_amt <= 0 then
       v_tip_amount := abs(v_tip_fee_diff_amt);
       end if;
       
       end if;
       
       
       end if;
      
        INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            prepaid_account_number,
            wallet_id,
            seq_id
        ) VALUES (
            TO_DATE(
                substr(
                    i.de012,
                    1,
                    6
                ),
                'YYMMDD'
            ),
            substr(
                i.de012,
                7,
                12
            ),
            v_card_number,
            i.id,
            i.cs_host_mcc,
            v_tip_amount,
            i.dr_cr_ind,
            'TIP_SURCHARGE',
            SYSDATE,
            'A',
            'CS_RUPAY_TIP_SURCHARGE',
            SYSDATE,
            substr(
                i.de031,
                11,
                12
            ),
            i.de041,
            i.process_id,
            (select a.txn_type from transaction_type a where upper(a.TXN_NAME)='SURCHARGE FEE'),
            to_date(i.pds0159_sett_date,'yymmdd'),
            i.prep_account_number,
            i.wallet_id,
             to_char(sysdate, 'DDMONYY')
                        || '.'
                        || lpad(cs_fee_queue_seq.NEXTVAL, 8, '0')
        );
       

   update harmonization_Exception_rpt h
   set DR_ADJ = 'Y',
       PRESENTMENT_FLAG = 'Y'
   where h.f002 = i.f002
     AND h.f037 = i.f037
     AND h.f013 = i.f013
     AND h.f012 = i.f012
     AND h.f041 = i.f041
     and h.txn_type =  (select a.txn_type from transaction_type a where upper(a.TXN_NAME)='SURCHARGE FEE');  
    
    
        UPDATE cs_rupay_in
            SET
                ttum_file_name = 'TIP_SURCHARGE' || '.' || pds0159_sett_date,
                ttum_gen_date = SYSDATE,
                ttum_gen_flag = 'Y'
        WHERE
                de002 = i.de002
            AND
                cs_host_recon_diff != 0
            AND (
                    ttum_gen_date IS NULL
                OR
                    ttum_gen_flag IS NULL
            );

    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error Occurred...!!'
         || sqlcode
         || sqlerrm);
     --   ROLLBACK;
        RAISE;
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_stolen_rpt(p_date character varying, p_date2 character varying, p_outlet_id character varying, p_issuer_id character varying)
 SECURITY DEFINER
AS $procedure$

v_cnt number :=0;
v_card_ref_no varchar2(20):=0;
--v_last_Date date := TO_DATE(p_date ,'DD-MM-YYYY')-1;
v_rcd_exist number := 0;
v_rcd_exist_loop number := 0;


begin
	
	INSERT INTO processlog (
        process_id,
        object_name,
        object_type,
        comments,
        entry_date
    ) VALUES (
        'REPORT',
        'sp_stolen_rpt',
        'Proc',
        'p_date: '||p_date||' p_date2 :'||p_date2||' p_outlet_id:'||p_outlet_id||' p_issuer_id:'||p_issuer_id,
        sysdate
    );

	execute immediate 'truncate table cms_stolen_rpt';


	
for x in (SELECT  f002,
     TO_DATE(NVL(TO_CHAR(TRML_DATE,'YY'),SUBSTR(ASWT.TXN_DATE , 7,2)) 
     ||ASWT.F013||f012,'YYMMDDHH24MISS') dd,
    F037 "UNIQUE ID",
    CD.CARD_REF_NUMBER   
            FROM ASWT_SWITCH_TXN_AUTHRIZATION ASWT   
        JOIN CARD_DETAIL CD ON(ASWT.F002=CD.HASH_CARD_NUMBER)
        JOIN CMS_CARD_DETAIL_EXTENTION CCDE ON CCDE.CARD_REF_NO =CD.CARD_REF_NUMBER 
        join cms_cust_details_extension ccde2  on ccde2.cust_seq_id =CD.CUST_SEQ_ID 
        JOIN CMS_PRODUCT CP ON CP.ID = CD.PRODUCT_ID 
        JOIN ISSUER I ON I.ID = CD.ISSUER_ID 
        join prd_bin_profile pbp on cd.product_id=pbp.product_id
         where drcr = 'D'
         and ASWT.TXN_TYPE = '21000'
         and f022 not like '%81%'
          and f039 ='00'
 		AND CD.ISSUER_ID in (select regexp_split_to_table(p_issuer_id,E','))
           and TRUNC(TO_DATE(NVL(TO_CHAR(TRML_DATE,'YY'),SUBSTR(TXN_DATE , 7,2))||NVL(F013,TO_CHAR(TO_DATE(txn_date,'DDMMYYYY'),'MMDD')) , 'YYMMDD')) 
           BETWEEN TO_DATE(p_date ,'DD-MM-YYYY') AND  TO_DATE(p_date2 ,'DD-MM-YYYY')
        order by card_Ref_number,TO_DATE(NVL(TO_CHAR(TRML_DATE,'YY'),SUBSTR(TXN_DATE , 7,2))||F013||f012 , 'YYMMDDhh24miss') 
		 ) loop
			 
	v_cnt := 0;	
    v_rcd_exist := 0; 
    
    if v_card_ref_no != x.card_ref_number then 
       v_card_ref_no := x.card_ref_number;
      -- v_last_Date := TO_DATE(p_date ,'DD-MM-YYYY')-1;
    end if; 
   
  -- dbms_output.put_line('v_card_ref_no '||v_card_ref_no);
      dbms_output.put_line('RRN '||x."UNIQUE ID");
--     dbms_output.put_line(' foo2 '||x.f002);


    select count(1) 
    into v_rcd_exist
    from cms_stolen_rpt r 
    where r.f037 = x."UNIQUE ID";
   
   if v_rcd_exist = 0  then 
    
   for y in ( select a.*,
             TO_DATE(NVL(TO_CHAR(TRML_DATE,'YY'),SUBSTR(TXN_DATE , 7,2))||F013||f012 , 'YYMMDDhh24miss') txn_Date 
             from ASWT_SWITCH_TXN_AUTHRIZATION a 
             where a.f002 = x.f002 
             and drcr = 'D'
         	 and TXN_TYPE = '21000'
         	 and f022 not like '%81%'
          	 and f039 ='00'
         	 and EXTRACT(EPOCH from (TO_DATE(NVL(TO_CHAR(a.TRML_DATE,'YY'),SUBSTR(a.TXN_DATE , 7,2))||a.F013||a.f012 , 'YYMMDDhh24miss') -x.dd ))/60 <=5 
             and TO_DATE(NVL(TO_CHAR(a.TRML_DATE,'YY'),SUBSTR(a.TXN_DATE , 7,2))||a.F013||a.f012 , 'YYMMDDhh24miss')>x.dd
             and TRUNC(TO_DATE(NVL(TO_CHAR(TRML_DATE,'YY'),SUBSTR(TXN_DATE , 7,2))||F013 , 'YYMMDD')) 
             BETWEEN TO_DATE(p_date ,'DD-MM-YYYY') AND  TO_DATE(p_date2 ,'DD-MM-YYYY')
             order by TO_DATE(NVL(TO_CHAR(TRML_DATE,'YY'),SUBSTR(TXN_DATE , 7,2))||F013||f012 , 'YYMMDDhh24miss') 
             ) loop 
	         
	        v_rcd_exist_loop := 0;     
	    
	        select count(1) 
    		into v_rcd_exist_loop
		    from cms_stolen_rpt r 
    		where r.f037 = y.f037;
   
   
      if v_rcd_exist_loop = 0 then
      
	       v_cnt := v_cnt+1;
	    insert into cms_stolen_rpt(f002,f037,txn_Date,cnt,org_f037,org_time)
	    values (y.f002,y.f037,TO_DATE(NVL(TO_CHAR(y.TRML_DATE,'YY'),SUBSTR(y.TXN_DATE , 7,2))||y.F013||y.f012 , 'YYMMDDhh24miss'),v_cnt,x."UNIQUE ID",x.dd);
	    
	  end if;
	 
	    v_card_ref_no := x.card_ref_number;
	   -- v_last_Date := TO_DATE(NVL(TO_CHAR(y.TRML_DATE,'YY'),SUBSTR(y.TXN_DATE , 7,2))||y.F013||y.f012 , 'YYMMDDhh24miss');
	             
   end loop;
  
  end if;
   			 
end loop;


delete from cms_stolen_rpt r 
where (org_f037) in (select org_f037 from cms_stolen_rpt group by org_f037 having count(1)<2);

--p_out := 'success';
exception
when others then
--p_out := 'Failed at proc '||sqlerrm;
raise;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_topup_cooling_release(OUT p_out character varying, INOUT p_out1 refcursor)
 SECURITY DEFINER
AS $procedure$



    v_host_and_shadow_bal     VARCHAR2(30);
    v_total_bal               NUMBER := 0;
    v_host_bal                NUMBER := 0;
    v_shadow_bal              NUMBER := 0;
    v_queue_cnt               NUMBER := 0;
    v_issuer_id               card_detail.issuer_id%TYPE;
    v_instrument_profile_id   NUMBER;
    v_product_id              NUMBER;
    v_instant                 card_detail.is_instant%TYPE;
    v_fee_annual_fee_amt      NUMBER := 0;
    v_annual_fee_cnt          NUMBER := 0;
    v_man_adj_cnt             NUMBER := 0;
    v_man_adj_amt             NUMBER := 0;
    v_queue_flag          varchar2(10);
    v_prep_account_no  varchar2(50);


begin


   for x in (select d.* from 
                 digital_txn_authorization_queue d 
                 join card_detail cd on cd.hash_card_number = d.card_enc
                 join issuer i on i.id = cd.issuer_id
                 join institution ins on ins.id = i.inst_id
                 where d.release_flag = 'N'
                 and EXTRACT(EPOCH from (sysdate - d.date_time))/60 > ins.load_to_spend_interval
                -- limit 1
                  )
   loop
          
	   
     begin
      
	      INSERT INTO digital_txn_authorization
       (id, arn, branch_id, card_enc, card_token, channel_id, channel_type, 
       date_time, dr_cr_flag, error_msg, last_settle_date, msg_type, response_code, 
       bal_update_settl_flag, bal_update_settl_date, rsu_3, rsu_4, rsu_5, settlement_flag, 
       source_req_id, topup_pay_mode, topup_txn_refno, txn_amount, mid, acc_flag, arn_reference, 
       balance_update_date, balance_update_flag, bal_update_flag_ruk, bal_update_date_ruk, 
       narration, txn_type, pg_mid, pg_mname, mcc, txn_id, ref_tid, total_bal, host_bal, shadow_bal, 
       rsu_1, rsu_2, current_balance, previous_balance, hold_balance, available_balance, settle_flag, 
       settle_date, prepaid_account_number, utility_reversal_flag, file_name, batch_no, remarks, wallet_id, is_send)
VALUES(x.id, x.arn, x.branch_id, x.card_enc, x.card_token, x.channel_id, x.channel_type, x.date_time, x.dr_cr_flag, 
      x.error_msg, x.last_settle_date, x.msg_type, x.response_code, x.bal_update_settl_flag, x.bal_update_settl_date, 
      x.rsu_3, x.rsu_4, x.rsu_5, x.settlement_flag, x.source_req_id, x.topup_pay_mode, x.topup_txn_refno, x.txn_amount, 
      x.mid, x.acc_flag, x.arn_reference, x.balance_update_date, x.balance_update_flag, x.bal_update_flag_ruk, 
      x.bal_update_date_ruk, x.narration, x.txn_type, x.pg_mid, x.pg_mname, x.mcc, x.txn_id, x.ref_tid, x.total_bal, 
      x.host_bal, x.shadow_bal, x.rsu_1, x.rsu_2, x.current_balance, x.previous_balance, x.hold_balance, x.available_balance,
      x.settle_flag, x.settle_date, x.prepaid_account_number, x.utility_reversal_flag, x.file_name, x.batch_no, x.remarks, 
      x.wallet_id, 'N');
     
     dbms_output.put_line('digital txn');
     
     update digital_txn_authorization_queue
     set release_flag = 'Y',
         release_date = sysdate
     where id = x.id
    and release_flag  = 'N';
   
    dbms_output.put_line('digital queue txn');

    
    update account_details
      set available_balance = available_balance + x.txn_amount,
         current_balance = current_balance + x.txn_amount
    where account_number  = x.prepaid_account_number
    and wallet_id = x.wallet_id
    ;
    
   dbms_output.put_line('account auth'||x.wallet_id);
    
    for y in (select * from cs_fee_queue where card_number = x.card_enc
        AND queue_released_flag = 'N'  and drcr in ('Dr','D') order by entry_date_time) loop
   dbms_output.put_line(' inside loop');

        SELECT
            cd.product_id,
            cd.issuer_id,
            cd.is_instant,
            cp.queue_flag,
            cd.prep_account_number
        INTO
            v_product_id,
            v_issuer_id,
            v_instant,
            v_queue_flag,
            v_prep_account_no
        FROM
            card_detail cd
        join prd_fee_profile cp on (cp.product_id = cd.product_id)    
        WHERE
            hash_card_number = y.card_number
           and cp.txn_type  = y.fee_ind;



        SELECT
            balance_check_wallet(y.card_number,x.wallet_id)
        INTO v_host_bal
        FROM
            dual;

        dbms_output.put_line('v_host_bal' || v_host_bal);
       
       insert into processlog (process_id,object_name,object_type,comments,entry_date)
	values('prc_queue_release','prc_queue_release',null,'v_host_bal and total and txn type'||v_host_bal||'--'||v_total_bal||''||y.fee_ind,sysdate);

        
        IF y.queue_type = 'F' then 
        
        IF nvl(v_queue_flag,'N') = 'N' then 
        
        dbms_output.put_line(' inside fee');
        
        INSERT INTO cs_fee_temp (
                date_time,
                fee_description,
                card_number,
                fee_amt,
                rrn,
                reversal_flag,
                settle_date,
                acc_flag,
                fee_ind,
                acc_date,
                seq_id,
                balance_update_flag,
                balance_update_date,
                bal_update_flag_ruk,
                bal_update_date_ruk,
                rev_org_seq_id,
                tid,
                stan,
                batch_number,
                ticket_id,
                entry_date_time,
                drcr,
                bal_update_settl_flag,
                bal_update_settl_date,               
                wallet_id,
                prepaid_account_number
            )values(                
                    sysdate,--x.date_time,
                    y.fee_description,
                    y.card_number,
                    y.fee_amt,
                    y.rrn,
                    NULL,
                    NULL,
                    NULL,
                    y.fee_ind,
                    NULL,
                    y.seq_id,
                    'N',
                    NULL,
                    'N',
                    NULL,
                    NULL,
                    y.tid,
                    NULL,
                    NULL,
                    NULL,
                    sysdate,
                    y.drcr,
                    NULL,
                    NULL,
                    x.wallet_id,
                    v_prep_account_no
                );

            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = y.card_number
                and rrn = y.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id=y.id;
          
        update account_details a     
         set available_balance  = available_balance - y.fee_amt,
            current_balance = current_balance - y.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =x.wallet_id;
        
        
        else
        
        IF v_host_bal >= y.fee_amt THEN
            dbms_output.put_line('feee insert 2');             
                
        INSERT INTO cs_fee_temp (
                date_time,
                fee_description,
                card_number,
                fee_amt,
                rrn,
                reversal_flag,
                settle_date,
                acc_flag,
                fee_ind,
                acc_date,
                seq_id,
                balance_update_flag,
                balance_update_date,
                bal_update_flag_ruk,
                bal_update_date_ruk,
                rev_org_seq_id,
                tid,
                stan,
                batch_number,
                ticket_id,
                entry_date_time,
                drcr,
                bal_update_settl_flag,
                bal_update_settl_date,
                wallet_id,
                prepaid_account_number
            )values(                
                    sysdate,--x.date_time,
                    y.fee_description,
                    y.card_number,
                    y.fee_amt,
                    y.rrn,
                    NULL,
                    NULL,
                    NULL,
                    y.fee_ind,
                    NULL,
                    y.seq_id,
                    'N',
                    NULL,
                    'N',
                    NULL,
                    NULL,
                    y.tid,
                    NULL,
                    NULL,
                    NULL,
                    sysdate,
                    y.drcr,
                    NULL,
                    NULL,
                    x.wallet_id,
                    v_prep_account_no
                );
                
            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = y.card_number
                and rrn = y.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id = y.id;
            
           update account_details a     
         set available_balance  = available_balance - y.fee_amt,
            current_balance = current_balance - y.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =x.wallet_id; 

        END IF;

    END IF;

   
   else
   
     IF nvl(v_queue_flag,'N') = 'N' then 
        
        INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            seq_id,
            adjustment_related_to,
            approval_code,
            remarks,
            wallet_id,
            maker_id,
            checker_id,
            prepaid_account_number 
        ) VALUES (
            sysdate,--x.date_time,
            to_char(sysdate, 'hh24mmss'),
            y.card_number,
            y.reference_number,
            case when y.remarks = 'Proactive Late Settlement Debit' then 'Proactive Late Settlement Debit' else y.mcc end,
            y.fee_amt,
            'D',
            y.source,
            SYSDATE,
            'A',
            case when y.remarks = 'Proactive Late Settlement Debit' then 'Debit Recovery' else null end,
            SYSDATE,
            y.rrn,
            y.tid,
            y.cs_process_id,
            y.fee_ind,
            y.settlement_date,
            y.seq_id,
            y.adjustment_related_to,
            y.f038,
            y.remarks,
            x.wallet_id,
            y.maker_id,
            y.checker_id,
            v_prep_account_no
        )  
       ;              
            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = y.card_number
                and rrn = y.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id = y.id;
              
       update account_details a     
         set available_balance  = available_balance - y.fee_amt,
            current_balance = current_balance - y.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =x.wallet_id;        
          
        
        else
        
        IF v_host_bal >= y.fee_amt THEN
            dbms_output.put_line('feee insert ');
             
                
       INSERT INTO cs_manual_adjustment (
            transaction_date,
            transaction_time,
            card_number,
            reference_number,
            description,
            amount,
            dr_cr_ind,
            source,
            entry_date,
            action_flag,
            user_id,
            action_date,
            rrn,
            tid,
            cs_process_id,
            txn_type,
            settlement_date,
            seq_id,
            adjustment_related_to,
            approval_code,
            remarks,
            wallet_id,
            maker_id,
            checker_id,
            prepaid_account_number
        ) VALUES (
            sysdate,--x.date_time,
            to_char(sysdate, 'hh24mmss'),
            y.card_number,
            y.reference_number,
            case when y.remarks = 'Proactive Late Settlement Debit' then 'Proactive Late Settlement Debit' else y.mcc end,
            y.fee_amt,
            'D',
            y.source,
            SYSDATE,
            'A',
            case when y.remarks = 'Proactive Late Settlement Debit' then 'Debit Recovery' else null end,
            SYSDATE,
            y.rrn,
            y.tid,
            y.cs_process_id,
            y.fee_ind,
            y.settlement_date,
            y.seq_id,
            y.adjustment_related_to,
            y.f038,
            y.remarks,
            x.wallet_id,
            y.maker_id,
            y.checker_id,
            v_prep_account_no
        )  
        ;
            UPDATE cs_fee_queue
            SET
                queue_released_flag = 'Y',
                queue_released_date = sysdate
            WHERE
                card_number = y.card_number
                and rrn = y.rrn                
                AND queue_released_flag = 'N'
                AND queue_released_date IS null
               and id = y.id;
            
        update account_details a     
         set available_balance  = available_balance - y.fee_amt,
            current_balance = current_balance - y.fee_amt
         where a.account_number  =  v_prep_account_no
        and a.wallet_id =x.wallet_id;      
              

        END IF;

    END IF;
   
   end if;
 end loop;

   
   
   exception 
  when others then
    dbms_output.put_line('error'|| sqlerrm);
      end;
   end loop;
  
  open p_out1 for 
   select  'INR' "Currency",
           f.fee_amt "Amount",
           cp.display_name  "Product_name",
           substr(ce.mask_card_number,-4) last_4,
           cccd.contact_center_no  contact_centre,
           nvl(cd.communication_number,cd.mobile_no) mobile_no,
           tt.txn_name fee_type,
           cd.issuer_id
  from cs_fee_temp f 
  join card_detail cd on cd.hash_card_number = f.card_number
  join cms_card_detail_extention ce on ce.card_ref_no = cd.card_ref_number
  join cms_product cp on cp.id = cd.product_id
  join cms_contact_center_dtl cccd on cccd.id = cp.contact_center_id
  join transaction_type tt on tt.txn_type = f.fee_ind
  where f.date_time >= sysdate - 2/24/60
  --and f.fee_ind in ('10110','93133','10122')
 and exists (select 1 from digital_txn_authorization_queue dq where dq.card_enc = f.card_number and dq.release_flag = 'Y'
          and dq.release_date between sysdate - 2/24/60 and sysdate);
  
p_out := 'Success';
exception 
when others then
p_out := 'Error '||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_update_kyc_status(OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$ 

pragma autonomous_transaction;
begin

update cms_card_detail_extention
set kyc_process_status = 'N'
where kyc_process_status = 'IN-PROGRESS'
and kyc_process_date+2 < sysdate;

commit;

p_out := 'Success';

exception
when others then
p_out := sqlerrm;
raise ;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_user_approved(OUT p_msg character varying, INOUT p_out refcursor)
 SECURITY DEFINER
AS $procedure$

begin

open p_out for
select to_char(um.created_date,'DD/MM/YYYY HH24:MI:SS') as "CREATED DATE",user_name as "USER NAME",um.mobile_number as "MOBILE NUMBER" 
,ug.name as "USER GROUP NAME" , r.role_name as "ROLE NAME" ,um.email_id as "EMAIL ID",i.institution_name  as "INSTITUTION NAME" ,
partner_name as  "PARTNER NAME",issuer_name as "ISSUER NAME",z.name as "ZONE NAME " ,b.name as "BRANCH NAME" ,um.is_admin as "IS ADMIN"
from user_master um ,user_group ug , role r ,institution i ,partner p ,issuer s,"zone" z ,branch b 
where um.user_group_id =ug.id
and r.id=um.role_id
and um.institution_id =i.id
and um.partner_id =p.id
and um.issuer_id =s.id
and z.id=um.zone_id
and b.id=branch_id and upper(um.approved_status) like 'AP%';

p_msg := 'Success';

exception 
when others then 
p_msg := 'Error'||sqlerrm;
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE sp_validate_mcc(p_hash_card character varying, p_mcc character varying, OUT p_msg character varying, OUT p_code character varying)
 SECURITY DEFINER
AS $procedure$ 

l_count     number;
v_product_id number;
v_mcc_cnt  number;
v_rest_cnt number;
v_wallet_cnt number;
v_zero_wallet  number;
v_surcharge_flag varchar2(2);
v_surcharge_type varchar2(50);
v_surcharge_value number:=0;
v_transit_count  number := 0;

invalid_card  exception;
invalid_mcc   exception;
invalid_wallet exception;
restricted_mcc exception;
mcc_not_mapped exception;

begin

	 --  dbms_output.put_line('start');

	 select count(1) into 
	 l_count
	 from card_detail cd where hash_card_number = p_hash_card;
	
	--dbms_output.put_line('l_count:'||l_count);

	
	if l_count = 0  then	
	raise invalid_card;
	end if;
	

   select product_id into 
   v_product_id
   from card_detail cd where hash_card_number = p_hash_card;
  
    select count(1)
   into v_mcc_cnt
   from mcc_master mcc where mcc.mcc_code = p_mcc;      
    
   if v_mcc_cnt = 0 then   
      raise invalid_mcc;
   end if;
  
  --dbms_output.put_line('invalid_mcc:'||v_mcc_cnt);
    
  select count(1)
   into v_rest_cnt
   from mcc_master mcc where mcc.mcc_code = p_mcc   
    and not exists (select 1 from cms_product cp 
                   join mcc_group_mapping m on cp.mcc_restrict_grp_id=m.mcc_grp_id
                   where cp.id = v_product_id
                   and m.mcc_code = mcc.mcc_code); 
                  
    if v_rest_cnt = 0 then   
      raise restricted_mcc;
   end if;               
  
  
  
  select count(1)
   into v_rest_cnt
   from mcc_master mcc 
   join mcc_group_mapping mgm on mgm.mcc_code = mcc.mcc_code
   join mcc_groups mg  on mg.mcc_grp_id = mgm.mcc_grp_id
   where mg.product_id  = v_product_id
   and mcc.mcc_code = p_mcc;
   
    if v_rest_cnt = 0 then   
      raise mcc_not_mapped;
   end if;    
  
  
 --  dbms_output.put_line('Success');
 
  
   p_code := '00';
  p_msg := 'Success';
   
exception
when invalid_mcc then
p_code := '01';
p_msg := 'Invalid Mcc';
when restricted_mcc then
p_code := '02';
p_msg := 'Restricted Mcc';
when invalid_card then
p_code := '03';
p_msg := 'Card not found';
when mcc_not_mapped then
p_code := '05';
p_msg := 'MCC Not Mapped';
when others then 
dbms_output.put_line('p_msg :' ||p_msg);
p_code := '04';
p_msg := 'Fail'||sqlerrm;
 dbms_output.put_line('p_msg :' ||p_msg);
end$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION trig_card_status_change_card_detail()
 RETURNS trigger
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
    begin	   
insert
    into
    card_status_change (id,
    card_ref_number,
    old_card_status,
    new_card_status,
    reason,
    created_date)
values (seq_status.NEXTVAL,
:old.card_ref_number,
:old.status,
:new.status,
:new.reason_code,
sysdate);

END$function$
;

CREATE OR REPLACE FUNCTION trig_card_status_change_card_detail()
 RETURNS trigger
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
    begin	   
insert
    into
    card_status_change (id,
    card_ref_number,
    old_card_status,
    new_card_status,
    reason,
    created_date)
values (seq_status.NEXTVAL,
:old.card_ref_number,
:old.status,
:new.status,
:new.reason_code,
sysdate);

END$function$
;

CREATE OR REPLACE PROCEDURE validate_auto_top_up(p_hash_card_number character varying, p_intl_flag numeric, OUT p_allow_auto_top_up character varying, OUT p_mechanism character varying, OUT p_min_threshhold numeric, OUT p_max_offline_limit numeric, OUT p_auto_top_up_value numeric)
 SECURITY DEFINER
AS $procedure$

    v_card_cnt                    NUMBER := 0;
    v_card_ref_number             VARCHAR2(50);
    v_instrument_profile_id       NUMBER := 0;
    v_balance_profile_cnt         NUMBER := 0;
    v_minimum_threshhold          NUMBER := 0;
    v_maximum_offline_limit       NUMBER := 0;
    v_auto_top_up_level           VARCHAR2(50);
    v_off_update_on_host_active   VARCHAR2(50);
    v_mechanism                   VARCHAR2(50);
    v_auto_top_up_value           NUMBER := 0;
    v_cust_bal_cnt                NUMBER := 0;
    v_product_id                  NUMBER := 0;
    v_cust_seq_id 				  VARCHAR2(50);
    v_cust_bal_cnt_limit		  NUMBER := 0;	
BEGIN
    SELECT
        COUNT(1)
    INTO v_card_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_hash_card_number;

    IF
        v_card_cnt = 0
    THEN
        dbms_output.put_line('Card Not present');
        p_allow_auto_top_up := 'N';
        return;
    END IF;

    SELECT
        product_id,
        card_ref_number,
        cust_seq_id
    INTO
        v_product_id,
        v_card_ref_number,
        v_cust_seq_id
    FROM
        card_detail
    WHERE
        hash_card_number = p_hash_card_number;

    SELECT
        COUNT(1)
    INTO v_balance_profile_cnt
    FROM
        prd_balance_profile
    WHERE
        product_id = v_product_id;

    IF
        v_balance_profile_cnt > 0
    THEN
        SELECT
            offline_update_on_host_active,
           -- auto_top_up_level,
            auto_top_up_mechanism,
            auto_top_up_value,
            minimum_threshhold,
            maximum_offline_limit
        INTO
            v_off_update_on_host_active,
           -- v_auto_top_up_level,
            v_mechanism,
            v_auto_top_up_value,
            v_minimum_threshhold,
            v_maximum_offline_limit
        FROM
            prd_balance_profile
        WHERE
            product_id = v_product_id
            AND ROWNUM = 1;

        p_mechanism := v_mechanism;
		v_auto_top_up_level := 'CUSTOMER';
        IF
            v_off_update_on_host_active = 'N'
        THEN
            p_allow_auto_top_up := 'N';
            p_min_threshhold := v_minimum_threshhold;
            p_max_offline_limit := v_maximum_offline_limit;
            dbms_output.put_line('Product Balance Transfer N');
            return;
        ELSE
            IF
                v_auto_top_up_level = 'PRODUCT'
            THEN
                p_allow_auto_top_up := 'Y';
                p_min_threshhold := v_minimum_threshhold;
                p_max_offline_limit := v_maximum_offline_limit;
                p_auto_top_up_value := v_auto_top_up_value;
                dbms_output.put_line('Product Balance Transfer Y'); 
                return;
            ELSIF v_auto_top_up_level = 'CUSTOMER' THEN
                SELECT
                    COUNT(1)
                INTO v_cust_bal_cnt
                FROM
                    cms_customer_limit
                WHERE
                    nvl(txn_enabled,'N') = 'Y'
                    and txn_mode = '01'  -- taken from mmopl
                    AND cust_seq_id = v_cust_seq_id;
                   
                IF
                    v_cust_bal_cnt = 0
                THEN
                p_allow_auto_top_up := 'Y';--'N'
                p_min_threshhold := v_minimum_threshhold;
                p_max_offline_limit := v_maximum_offline_limit;
				p_auto_top_up_value := v_auto_top_up_value;
               dbms_output.put_line('customer Balance Transfer T');
                    return;
                else
                   
                    SELECT
                    COUNT(1)
                INTO v_cust_bal_cnt_limit
                FROM
                    cms_customer_limit
                WHERE
                    nvl(txn_enabled,'N') = 'Y'
                    and nvl(max_chip_limit,0) = 0
                    and txn_mode = '01'
                    AND cust_seq_id = v_cust_seq_id;
                   
                 IF
                    v_cust_bal_cnt_limit = 1
                THEN
                p_allow_auto_top_up := 'Y';
                p_min_threshhold := v_minimum_threshhold;
                p_max_offline_limit := v_maximum_offline_limit;
                p_auto_top_up_value := v_auto_top_up_value;
               dbms_output.put_line('customer Balance Transfer L');
                    return;
                else   
                  
                    SELECT
                        max_chip_limit
                        --minimum_threshhold,
                        --maximum_offline_limit
                    INTO
                        --v_auto_top_up_value
                        v_maximum_offline_limit
                        --v_maximum_offline_limit
                    FROM
                    cms_customer_limit
                WHERE
                    txn_enabled = 'Y'
                    and max_chip_limit > 0
                    and txn_mode = '01'
                    AND cust_seq_id = v_cust_seq_id;

                    p_allow_auto_top_up := 'Y';
                    p_min_threshhold := v_minimum_threshhold;
                    p_max_offline_limit := v_maximum_offline_limit;
                    p_auto_top_up_value := v_auto_top_up_value;
                   dbms_output.put_line('customer Balance Transfer CP');
                    return;
                END IF;

                return;
            
            END IF;
        END IF;
      end IF; 

    ELSE
        p_allow_auto_top_up := 'N';
        p_min_threshhold := v_minimum_threshhold;
        p_max_offline_limit := v_maximum_offline_limit;
       dbms_output.put_line('Product Balance Transfer END');

        return;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        p_allow_auto_top_up := 'N';
        p_min_threshhold := v_minimum_threshhold;
        p_max_offline_limit := v_maximum_offline_limit;
       dbms_output.put_line('Product Balance Transfer E');

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE validate_process_attempts(p_hash_card_number character varying, p_action character varying, p_sub_action character varying, p_mobile_number character varying, p_cust_seq_id character varying, p_card_ref_number character varying, OUT p_out character varying)
 SECURITY DEFINER
AS $procedure$

    v_failure_cnt       NUMBER := 0;
    v_gen_success_cnt   NUMBER := 0;
    v_max_cnt           NUMBER := 0;--:= 3; --configure as per needed
    v_error_msg1        VARCHAR2(100) := 'Dear Customer, Maximum '
                                     || p_action
                                     || ' limit exceeded for the day. Please try again tomorrow.';
BEGIN
    IF upper(p_sub_action) = 'PIN_SET_GEN_OTP' THEN
        --In case of Pin Generation, there should only be 'v_max_cnt' successful in a row, it resets on PIN_SET_VAL_OTP sub_action
        
    
  select cic.otptrycount
    into v_max_cnt
    from issuer cic
    join card_detail cd on cd.issuer_id = cic.id
    where cd.hash_card_number = p_hash_card_number;        
    
    SELECT
            COUNT(1)
        INTO v_gen_success_cnt
        FROM
            card_activity_process_log
        WHERE
            hash_card_number = p_hash_card_number
            AND action = p_action
            AND sub_action = p_sub_action
            AND upper(status) = 'SUCCESS'
            AND trunc(created_date) = trunc(SYSDATE)
            AND created_date > nvl( (
                SELECT
                    MAX(created_date)
                FROM
                    card_activity_process_log
                WHERE
                    hash_card_number = p_hash_card_number
                    AND upper(action) = upper(p_action)
                    AND upper(sub_action) = 'PIN_SET_VAL_OTP'
                    AND upper(status) = 'SUCCESS'
                    AND trunc(created_date) = trunc(SYSDATE)
            ),trunc(SYSDATE) );

        IF v_gen_success_cnt >= v_max_cnt THEN
            p_out := v_error_msg1;
            return;
        END IF;
    else
    
    
      select pbp.pin_attempt_allowed
    into v_max_cnt
    from prd_bin_profile pbp
    join cms_product cp  on cp.id = pbp.product_id
    join card_detail cd on cd.product_id = cp.id
    where cd.hash_card_number = p_hash_card_number;
    
        SELECT
            COUNT(1)
        INTO v_failure_cnt
        FROM
            (
                SELECT
                    status
                FROM
                    (
                        SELECT
                            status
                        FROM
                            card_activity_process_log
                        WHERE
                            hash_card_number = p_hash_card_number
                            AND action = p_action
                            AND sub_action = p_sub_action
                            AND trunc(created_date) = trunc(SYSDATE)
                        ORDER BY
                            created_date DESC
                    )
                WHERE
                    ROWNUM <= v_max_cnt
            )
        WHERE
            status = 'FAILURE';

            --If latest v_max_cnt transactions are failure, 4th transactions should not be allowed

        IF v_failure_cnt >= v_max_cnt THEN
            p_out := v_error_msg1;
            return;
        END IF;
    END IF;

    p_out := 'SUCCESS';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE validate_process_count(p_hash_card_number character varying, p_action character varying, p_sub_action character varying, p_mobile_number character varying, p_cust_seq_id character varying, p_card_ref_number character varying, OUT p_out numeric)
 SECURITY DEFINER
AS $procedure$

    v_failure_cnt       NUMBER := 0;
    v_gen_success_cnt   NUMBER := 0;
    v_max_cnt           NUMBER := 0; --configure as per needed
    v_error_msg1        VARCHAR2(100) := 'Dear Customer, Maximum '
                                     || p_action
                                     || ' limit exceeded for the day. Please try again tomorrow.';
BEGIN


select pbp.pin_attempt_allowed
    into v_max_cnt
    from prd_bin_profile pbp
    join cms_product cp  on cp.id = pbp.product_id
    join card_detail cd on cd.product_id = cp.id
    where cd.hash_card_number = p_hash_card_number;

    IF upper(p_sub_action) = 'PIN_SET_GEN_OTP' THEN
        --In case of Pin Generation, there should only be 'v_max_cnt' successful in a row, it resets on PIN_SET_VAL_OTP sub_action
        SELECT
            COUNT(1)
        INTO v_gen_success_cnt
        FROM
            card_activity_process_log
        WHERE
            hash_card_number = p_hash_card_number
            AND action = p_action
            AND sub_action = p_sub_action
            AND upper(status) = 'SUCCESS'
            AND trunc(created_date) = trunc(SYSDATE)
            AND created_date > nvl( (
                SELECT
                    MAX(created_date)
                FROM
                    card_activity_process_log
                WHERE
                    hash_card_number = p_hash_card_number
                    AND upper(action) = upper(p_action)
                    AND upper(sub_action) = 'PIN_SET_VAL_OTP'
                    AND upper(status) = 'SUCCESS'
                    AND trunc(created_date) = trunc(SYSDATE)
            ),trunc(SYSDATE) );
           
        p_out :=v_gen_success_cnt;   

--        IF v_gen_success_cnt >= v_max_cnt THEN
--            p_out := v_error_msg1;
--            return;
--        END IF;
    ELSE
        SELECT
            COUNT(1)
        INTO v_failure_cnt
        FROM
            (
                SELECT
                    status
                FROM
                    (
                        SELECT
                            status
                        FROM
                            card_activity_process_log
                        WHERE
                            hash_card_number = p_hash_card_number
                            AND action = p_action
                            AND sub_action = p_sub_action
                            AND trunc(created_date) = trunc(SYSDATE)
                            and created_date > nvl ((
                            	SELECT
				                    MAX(created_date)
				                FROM
				                    card_activity_process_log
				                WHERE
				                    hash_card_number = p_hash_card_number
				                    AND upper(action) = upper(p_action)
				                    AND upper(sub_action) = 'PIN_SET_ATTEMPT'
				                    AND upper(status) = 'SUCCESS'
				                    AND trunc(created_date) = trunc(SYSDATE)
                            ), trunc(SYSDATE)) 
                        ORDER BY
                            created_date DESC
                    )
                WHERE
                    ROWNUM <= v_max_cnt
            )
        WHERE
            status = 'FAILURE';

            --If latest v_max_cnt transactions are failure, 4th transactions should not be allowed

           p_out :=v_failure_cnt;
          
--        IF v_failure_cnt >= v_max_cnt THEN
--            p_out := v_error_msg1;
--            return;
--        END IF;
    END IF;

END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE validate_topup_and_txn_logic(p_card_no character varying, p_txn_type numeric, p_sub_txn_type character varying, p_amount numeric, p_source character varying, p_wallet_id numeric, OUT p_code numeric, OUT p_message character varying, OUT p_first_topup character varying, OUT p_ref_id character varying)
 SECURITY DEFINER
AS $procedure$
    v_bin                     VARCHAR2(20);
    v_status                  VARCHAR2(20);
    v_issuer_id               NUMBER;
    v_instrument_profile_id   NUMBER;
    v_kyc_not_done            NUMBER;
    v_card_ref_Number          card_detail.card_ref_Number%type;
    v_kyc_type                VARCHAR2(20);
    v_product_id              NUMBER;
    v_max_balance             NUMBER;
    v_top_up_amt              NUMBER;
    v_txn_amt                 NUMBER;
    v_dig_top_up              NUMBER;
    v_auth_top_up             NUMBER;
    v_fee_top_up              NUMBER;
    v_auth_txn                NUMBER;
    v_digi_txn                NUMBER;
    v_single_amt              NUMBER;
    v_daily_amt               NUMBER;
    v_monthly_amt             NUMBER;
    v_annual_amt              NUMBER;
    v_balance                 NUMBER;
    v_dig_m_top_up            NUMBER;
    v_auth_m_top_up           NUMBER;
    v_fee_m_top_up            NUMBER;
    v_top_up_m_amt            NUMBER;
    v_dig_y_top_up            NUMBER;
    v_auth_y_top_up           NUMBER;
    v_fee_y_top_up            NUMBER;
    v_top_up_y_amt            NUMBER;
    v_auth_m_txn              NUMBER;
    v_auth_y_txn              NUMBER;
    v_digi_m_txn              NUMBER;
    v_digi_y_txn              NUMBER;
    v_offline_txn             NUMBER;
    v_offline_m_txn           NUMBER;
    v_offline_y_txn           NUMBER;
    v_fy_start                VARCHAR2(20) := '01-Apr-';
    v_fy_end                  VARCHAR2(20) := '31-Mar-';
    v_year                    VARCHAR2(20);
    v_fy_start1               VARCHAR2(20);
    v_first_topup_done        VARCHAR2(10);
    v_min_first_topup         NUMBER;
    v_expiry_date             VARCHAR2(20);
    v_expiry_count            NUMBER;
    v_ref_id                  VARCHAR2(100);
    v_prd_txn_cnt             NUMBER;
    v_event_cnt               NUMBER;
    v_event                   NUMBER;
    exc_prd_txn EXCEPTION;
    exc_bin_not_configured EXCEPTION;
    exc_card_not_active EXCEPTION;
    v_txn_profile_cnt         NUMBER;
    v_full_kyc_done           NUMBER;
    v_card_issued_date        DATE;
    v_card_activation_date    DATE;
    v_icici_card_cnt          NUMBER;
    v_replaced_cnt            NUMBER;
    v_replaced_card           VARCHAR2(2);
    V_topup_amt_multiplier    NUMBER;
    v_cust_seq_id             card_detail.cust_seq_id%type;
    v_cust_limit_cnt          NUMBER;
    v_sub_txn_type varchar2(4) := substr(p_sub_txn_type,-3,2);
    v_pin_type varchar2(1)	   := substr(p_sub_txn_type,-1);	
    v_sub_txn_type_new varchar2(10) := substr(p_sub_txn_type,1,7);             
    v_hotlisted_reason_code card_detail.hotlisted_reason_code%type;
    
    v_fisrt_activated_on  date;
    v_multiplier_flag varchar2(2);
    v_mobile_no 	number;
    v_rbi_max_amt 	number;
    v_balance_card 	number;
   
    v_daily_cnt 		number :=0;
    v_monthly_cnt  		number :=0;
    v_annual_cnt  		number :=0;
    v_auth_m_txn_cnt  	number :=0;
    v_auth_txn_cnt  	number :=0;
    v_auth_y_txn_cnt  	number :=0;
    v_offline_m_txn_cnt number :=0;
    v_offline_txn_cnt 	number :=0;
    v_offline_y_txn_cnt number :=0;
    v_digi_y_txn_cnt    number :=0;
    v_digi_m_txn_cnt    number :=0;
    v_digi_txn_cnt    number :=0;
  
    v_queue_cnt                     NUMBER :=0;
    v_queue_amt     number;
    v_max_chip_amt  number;
    v_wallet_amt    number;
    v_is_gift       varchar2(2);
    v_min_gift      number;
    v_min_nongift   number;
   
BEGIN

  IF  p_amount < 0 then

       p_code := '197';
            p_message := 'Amount should be greater than 0';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

--            --COMMIT;

     return;
  end if;


    SELECT
        COUNT(1)
    INTO v_replaced_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_card_no
        AND old_card_no IS NOT NULL;

    IF v_replaced_cnt = 1 THEN
        v_replaced_card := 'Y';
    ELSE
        v_replaced_card := 'N';
    END IF;

--dbms_output.put_line('before card details');  

    SELECT
        cd.bin,
        cd.status,
        ccde.kyc_flag,
        cd.product_id,
        cd.issuer_id,
        cd.expiry_date,
        cd.is_first_topup_done,
        cde.issued_date,
        cd.card_activated_on,
        cd.cust_seq_id,
        cd.hotlisted_reason_code,
        cd.card_ref_Number,
        cd.mobile_no,
        ins.rbi_max_limit,
        p.is_gift_card,
        ins.min_purchase_gift,
        ins.min_purchase_nongift
    INTO
        v_bin,
        v_status,
        v_kyc_type,
        v_product_id,
        v_issuer_id,
        v_expiry_date,
        v_first_topup_done,
        v_card_issued_date,
        v_card_activation_date,
        v_cust_seq_id,
        v_hotlisted_reason_code,
        v_card_ref_Number,
        v_mobile_no,
        v_rbi_max_amt,
        v_is_gift,
        v_min_gift,
        v_min_nongift
    FROM
        card_detail cd
        JOIN cms_cust_details_extension ccde ON cd.cust_seq_id = ccde.cust_seq_id
        JOIN cms_card_detail_extention cde on cd.card_ref_number = cde.card_ref_no
        join issuer i on i.id = cd.issuer_id
        join institution ins on ins.id = i.inst_id  
        join prd_bin_profile p on p.product_id = cd.product_id
    WHERE
        cd.hash_card_number = p_card_no;
        
   -- dbms_output.put_line('card details');  
        
        
    SELECT
        multiplier_value,multiplier
    INTO V_topup_amt_multiplier,v_multiplier_flag
    FROM
       prd_topup_profile
    WHERE
        product_id = v_product_id;     
       
  --  dbms_output.put_line('card prd_topup_profile');  
           


    IF v_kyc_type = 'MIN' THEN

        SELECT
            min_balance_for_kyc
        INTO v_max_balance
        FROM
            prd_bin_profile
        WHERE
            bin = v_bin
        and product_id = v_product_id;

    ELSE

        SELECT
            max_balance_for_kyc
        INTO v_max_balance
        FROM
            prd_bin_profile
        WHERE
            bin = v_bin
        and product_id = v_product_id;

    END IF;

   -- dbms_output.put_line('before prd_txn_limit_profile'); 

    
  SELECT
        count(1)
        INTO v_prd_txn_cnt
    FROM
        prd_txn_limit_profile t
        join sub_transaction_type s on s.txn_type = t.txn_type 
        join prd_txn_profile p on p.sub_txn_type = s.sub_txn_type and p.product_id = t.product_id
    WHERE
        t.product_id = v_product_id
        AND t.txn_type = p_txn_type
        and p.sub_txn_type = v_sub_txn_type_new
        and p.is_enable = 'Y'
       AND t.kyc_type = v_kyc_type;

   -- DBMS_OUTPUT.put_line('p_txn_type '||p_txn_type||' v_sub_txn_type_new: '||v_sub_txn_type_new);


    IF v_prd_txn_cnt = 0 THEN
        RAISE exc_prd_txn;
    END IF;
    SELECT
        offus_dom_single_amt,
        offus_dom_daily_amt,
        offus_dom_monthly_amt,
        offus_dom_annual_amt,
        offus_dom_daily_cnt,
        offus_dom_monthly_cnt,
        offus_dom_annual_cnt
    INTO
        v_single_amt,
        v_daily_amt,
        v_monthly_amt,
        v_annual_amt,
        v_daily_cnt,
        v_monthly_cnt,
        v_annual_cnt
    FROM
        prd_txn_limit_profile
    WHERE       
        product_id = v_product_id
        AND txn_type = p_txn_type
         AND kyc_type = v_kyc_type;

  --To find out the current financial year
        
   --    dbms_output.put_line('after prd_txn_limit_profile');    

    SELECT
        TO_CHAR(SYSDATE,'YYYY')
    INTO v_year
    FROM
        dual;

    v_fy_start1 := v_fy_start || v_year;
	
	--dbms_output.put_line('v_fy_start1'||v_fy_start1);  

    --If SYSDATE is than than 1st April,then take previous year as Financial year,if not,take next year as Financial year
    IF trunc(SYSDATE) < v_fy_start1 THEN		
        v_fy_start := v_fy_start || to_number(v_year - 1);
        v_fy_end := v_fy_end || to_number(v_year);
    ELSE
	--dbms_output.put_line('esle '|| v_fy_start);  
        v_fy_start := v_fy_start || to_number(v_year);
        v_fy_end := v_fy_end || to_number(v_year + 1);
    END IF;
   --dbms_output.put_line('v_fy_end'||v_fy_end);  

     if v_status='THL' AND v_hotlisted_reason_code='1001' then

       p_code := '233';
            p_message := 'Card unused from last one year';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );  
     return;

    end if;

  --For Top Up transaction
    IF p_txn_type = '21028' THEN
        --dbms_output.put_line('Top Up');

        SELECT
            COUNT(expiry_date)
        INTO v_expiry_count
        FROM
            card_detail
        WHERE
            hash_card_number = p_card_no;

        IF v_expiry_count = 0 THEN
            p_code := '185';
            p_message := 'Expiry Date is null';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

--dbms_output.put_line('v_expiry_date'||v_expiry_date); 
        IF TO_DATE(v_expiry_date,'MMYY') < TO_DATE(TO_CHAR(SYSDATE,'MMYY'),'MMYY') THEN
            p_code := '72';
            p_message := 'Card is expired';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

       if v_kyc_type = 'MAX'  then
       
        SELECT
            COUNT(1)
        INTO v_kyc_not_done
        FROM
            card_detail cd,
            cms_cust_details ccd
        WHERE
            cd.cust_seq_id = ccd.cust_seq_id
            AND ( aadhar_number IS NULL
                  AND pan_number IS NULL
                  AND passport_number IS NULL
                  AND license_number IS NULL
                  AND n_rega_job_card IS NULL
                  AND voter_id IS NULL )
            AND hash_card_number = p_card_no;


           IF
            v_kyc_not_done > 0
        THEN
            p_code := '73';
            p_message := 'Top Up is rejected. KYC details are not present';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF; 
       
       end if;

          ---To check if full kyc completed after 2 years  v_card_activation_date
--dbms_output.put_line('v_fisrt_activated_on'||v_fisrt_activated_on);  


       IF  add_months(trunc(v_fisrt_activated_on),24) < trunc(sysdate) and  v_kyc_type != 'MAX' then

            p_code := '74';
            p_message := 'Full KYC not completed';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;

       end if;   

--dbms_output.put_line('V_topup_amt_multiplier'||V_topup_amt_multiplier);  
       if V_topup_amt_multiplier = 1  then 
         
         null;

         else 

         IF mod(p_amount,V_topup_amt_multiplier) <> 0 and v_multiplier_flag = 'Y' then
            p_code := '40';
            p_message := 'Top Up should be multiplier of '||V_topup_amt_multiplier;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
               p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF;
       end if;

        --Retrieving current total balance of the card

        SELECT
            --balance_check_card(p_card_no)
              balance_check_mobile(v_mobile_no)
        INTO v_balance
        FROM
            dual;
           
       
        --To check if balance does not exceed rbi limit after top up

        IF v_balance + p_amount > v_rbi_max_amt THEN
            p_code := '90';
            p_message := 'Top Up amount exceeds the maximum balance limit of ' || v_rbi_max_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

       
         SELECT            
              balance_check_card(p_card_no)
        INTO v_balance_card
        FROM
            dual;   

        --To check if balance does not exceed limit after top up

        IF v_balance_card + p_amount > v_max_balance THEN
            p_code := '90';
            p_message := 'Top Up amount exceeds the maximum card balance limit of ' || v_max_balance;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       
        --Single--To check if the Top Up amount transaction does not exceed the single transaction limit

        IF p_amount > v_single_amt THEN
            p_code := '91';
            p_message := 'Top Up amount exceeds the single transaction limit of ' || v_single_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
        
   select count(1), nvl(sum(fee_amt),0) 
   into v_queue_cnt,v_queue_amt 
   from cs_fee_queue 
   where card_number=p_card_no 
   and drcr in ('Dr','D') 
   and QUEUE_RELEASED_FLAG='N';
   
    select balance_check_wallet(p_card_no,p_wallet_id)
  into v_wallet_amt 
 from dual;
  
  
   IF v_queue_cnt > 0 then         
        
        if v_wallet_amt + p_amount < v_queue_amt then
      
            p_code := '20';
            p_message := 'Pending dues for recovery.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
         end if;
         
     end if;    

        --Annually -- To check if the Top Up amount transaction does not exceed the Annual transaction limit

          --Retrieving topups on that card from Digital table for that year

        SELECT
            nvl(SUM(txn_amount),0)
        INTO v_dig_y_top_up
        FROM
            digital_txn_authorization -- digital top up
        where card_enc = p_card_no
            and txn_type='21028'
            AND dr_cr_flag <> 'R'
            AND response_code = '00' 
            AND trunc(date_time) BETWEEN v_fy_start AND v_fy_end;

          --Retrieving topups on that card from Auth table for that year

        SELECT
            nvl(SUM(f004 / 100),0)
        INTO v_auth_y_top_up
        FROM
            aswt_switch_txn_authrization
        where f002 = p_card_no
            and txn_type = p_txn_type
            AND drcr <> 'R'
            AND f039 = '00'
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end;

          --Retrieving fees deducted on that card from fee table for that year

        SELECT
            nvl(SUM(fee_amt),0)
        INTO v_fee_y_top_up
        FROM
            cs_fee_temp
        where card_number = p_card_no
            and fee_description like '%TOP%'
            AND trunc(date_time) BETWEEN v_fy_start AND v_fy_end;

          --Total Annual Top up = Digital Annual Top up + Auth Annual Top Up - Annual Fee

        v_top_up_y_amt := nvl(v_dig_y_top_up,0) + nvl(v_auth_y_top_up,0) - nvl(v_fee_y_top_up,0);

          --To check if the Top Up amount transaction does not exceed the Annual transaction limit
        IF v_top_up_y_amt + p_amount > v_annual_amt THEN
            p_code := '92';
            p_message := 'Top Up amount exceeds the annual transaction limit of ' || v_annual_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Monthly -- To check if the Top Up amount transaction does not exceed the Monthly transaction limit

          --Retrieving topups on that card from Digital table for that month

        SELECT
            nvl(SUM(txn_amount),0)
        INTO v_dig_m_top_up
        FROM
            digital_txn_authorization
        where card_enc = p_card_no
            and txn_type='21028'
            AND dr_cr_flag <> 'R'
            AND response_code = '00'
            AND TO_CHAR(date_time,'MMYY') = TO_CHAR(SYSDATE,'MMYY');

          --Retrieving topups on that card from Auth table for that month

        SELECT
            nvl(SUM(f004 / 100),0)
        INTO v_auth_m_top_up
        FROM
            aswt_switch_txn_authrization
        where f002 = p_card_no
            and txn_type = p_txn_type
            AND drcr <> 'R'
            AND f039 = '00'
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY');

          --Retrieving fees deducted on that card from fee table for that month

        SELECT
            nvl(SUM(fee_amt),0)
        INTO v_fee_m_top_up
        FROM
            cs_fee_temp
        where card_number = p_card_no
            and fee_description like '%TOP%'
            AND TO_CHAR(date_time,'MMYY') = TO_CHAR(SYSDATE,'MMYY');

          --Total Monthly Top up = Digital Monthly Top up + Auth Monthly Top Up - Monthly Fee

        v_top_up_m_amt := nvl(v_dig_m_top_up,0) + nvl(v_auth_m_top_up,0) - nvl(v_fee_m_top_up,0);

          --To check if the Top Up amount transaction does not exceed the Monthly transaction limit
        IF v_top_up_m_amt + p_amount > v_monthly_amt THEN
            p_code := '93';
            p_message := 'Top Up amount exceeds the monthly transaction limit of ' || v_monthly_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            --COMMIT;
            return;
        END IF;

        --Daily -- To check if the Top Up amount transaction does not exceed the daily transaction limit

          --Retrieving topups on that card from Digital table for that day

        SELECT
            nvl(SUM(txn_amount),0)
        INTO v_dig_top_up
        FROM
            digital_txn_authorization
        where card_enc = p_card_no
            and txn_type='21028'
            AND dr_cr_flag <> 'R'
            AND response_code = '00'
            AND trunc(date_time) = trunc(SYSDATE);

          --Retrieving topups on that card from Auth table for that day

        SELECT
            nvl(SUM(f004 / 100),0)
        INTO v_auth_top_up
        FROM
            aswt_switch_txn_authrization
        where f002 = p_card_no
            and txn_type = p_txn_type
            AND drcr <> 'R'
            AND f039 = '00'
            AND trunc(sys_txn_date) = trunc(SYSDATE)
            ;

          --Retrieving fees deducted on that card from fee table for that day

        SELECT
            nvl(SUM(fee_amt),0)
        INTO v_fee_top_up
        FROM
            cs_fee_temp
        where  card_number = p_card_no
            and trunc(date_time) = trunc(SYSDATE)
            AND fee_description like '%TOP%';

          --Total Top up = Digital Top up + Auth Top Up - Fee

        v_top_up_amt := nvl(v_dig_top_up,0) + nvl(v_auth_top_up,0) - nvl(v_fee_top_up,0);

          --To check if the Top Up amount transaction does not exceed the Daily transaction limit
        IF v_top_up_amt + p_amount > v_daily_amt THEN
            p_code := '94';
            p_message := 'Top Up amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

         -- If the top up amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
        IF nvl(v_first_topup_done,'N') = 'N' THEN
            p_first_topup := 'Y';
            SELECT
                TO_CHAR(SYSDATE,'DDMMYY')
                || lpad(first_topup_log_ref_id.NEXTVAL,9,'0')
            INTO v_ref_id
            FROM
                dual;

            INSERT INTO first_topup_log (
                id,
                ref_id,
                card_no,
                source,
                status,
                date_time
            ) VALUES (
                first_topup_log_seq_id.NEXTVAL,
                v_ref_id,
                p_card_no,
                p_source,
                'V',
                SYSDATE
            );

            --COMMIT;
            p_ref_id := v_ref_id;
        ELSIF  v_first_topup_done = 'Y' and v_status = 'INA' then    
              p_first_topup := 'Y';
               SELECT
                TO_CHAR(SYSDATE,'DDMMYY')
                || lpad(first_topup_log_ref_id.NEXTVAL,9,'0')
            INTO v_ref_id
            FROM
                dual;

            INSERT INTO first_topup_log (
                id,
                ref_id,
                card_no,
                source,
                status,
                date_time
            ) VALUES (
                first_topup_log_seq_id.NEXTVAL,
                v_ref_id,
                p_card_no,
                p_source,
                'V',
                SYSDATE
            );

            --COMMIT;
            p_ref_id := v_ref_id;
        ELSE
            p_first_topup := 'N';
        END IF;

    ELSIF  p_txn_type = 21000 then --For txn type 21000
--        dbms_output.put_line('Retail/Transit');
    
    
    
     if upper(v_is_gift) = 'Y' then 
     
        if p_amount < v_min_gift then 
        
         p_code := '190';
            p_message := 'Minimum Purchase value for GIFT Product is '|| v_min_gift;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        
        end if;
     
     else 
     
          if p_amount < v_min_nongift then 
        
         p_code := '190';
            p_message := 'Minimum Purchase value for NON-GIFT Product is '|| v_min_nongift;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        
        end if;
     
     end if;
    
    
    
      
 if v_sub_txn_type='81' then
        --check for enable/disable customer ecom limit txn
        

        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N';

        if v_cust_limit_cnt > 0 then
        --DBMS_OUTPUT.PUT_LINE('E-com disabled ');

           p_code := '230';
            p_message := 'Customer E-Comm transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;

        end if;


   IF v_cust_limit_cnt = 0 THEN
        --DBMS_OUTPUT.PUT_LINE('E-com enabled limit check ');
        -- Checking for customer which is not present in cms_customer_limit
        -----------------------------------------------------------------------
        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new;  
        
        
        if v_cust_limit_cnt > 0 then
        
        select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where card_ref_number=v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y';
        
        end if;
        
        -----------------------------------------------------------------------
   IF p_amount > v_single_amt THEN
            p_code := '186';
            p_message := 'Retail/Transit amount exceeds the single transaction limit of ' || v_single_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_y_txn,v_auth_y_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr ='D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND F022 like '%81%'
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end;

          --Retrieving Transit transaction amount on that card for that year


         IF
             v_auth_y_txn_cnt + 1 > v_annual_cnt
         THEN
             p_code := '22';
             p_message := 'Retail/Ecom amount exceeds the annual transaction count of ' || v_annual_cnt;
             INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

             return;
         END IF;  
              
           

        --To check if the Retail transaction amount does not exceed the Annual transaction limit

        IF v_auth_y_txn  + p_amount > v_annual_amt THEN
            p_code := '187';
            p_message := 'Retail/Transit amount exceeds the annual transaction limit of ' || v_annual_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Monthly -- To check if the Retail transaction amount does not exceed the monthly transaction limit

          --Retrieving retail transaction amount on that card for that month

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_m_txn,v_auth_m_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr= 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND F022 like '%81%'
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY');
           
         
         IF
            v_auth_m_txn_cnt  + 1 > v_monthly_cnt
        THEN
            p_code := '23';
            p_message := 'Retail/Ecom amount exceeds the monthly transaction count of ' || v_monthly_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
           
            return;
        END IF;
  


        --To check if the Retail transaction amount does not exceed the Monthly transaction limit

        IF v_auth_m_txn  + p_amount > v_monthly_amt THEN
            p_code := '188';
            p_message := 'Retail/Transit amount exceeds the monthly transaction limit of ' || v_monthly_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Daily -- To check if the Retail transaction amount does not exceed the daily transaction limit

         --Retrieving retail transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr ='D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND F022 like '%81%'
            AND trunc(sys_txn_date) = trunc(SYSDATE);
           
           
        IF
             v_auth_txn_cnt + 1 > v_daily_cnt
         THEN
             p_code := '24';
             p_message := 'Retail/Ecom amount exceeds the daily transaction count of ' || v_daily_cnt;
             INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

             return;
         END IF;   


        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit

        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
      

END IF;
     
elsif  v_sub_txn_type ='05' then   --contact
      --  DBMS_OUTPUT.PUT_LINE('inside 51 contact');

        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N';

--Removed due to as discussed with ba and pm test team pos contact allowed to due txn in any case
 if v_cust_limit_cnt > 0 then
            p_code := '231';
            p_message := 'Customer POS contact transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            --COMMIT;
            return;


end if;

if v_cust_limit_cnt = 0 then

      --  DBMS_OUTPUT.PUT_LINE('inside 51 enabled contact');
       select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new;  

        
        if v_cust_limit_cnt > 0 then
        
        select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where card_ref_number=v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y';
        
        end if;


   IF p_amount > v_single_amt THEN

            p_code := '186';        
            p_message := 'Retail/Transit amount exceeds the single transaction limit of ' || v_single_amt;

            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


          --Daily -- To check if the Retail transaction amount does not exceed the daily transaction limit

         --Retrieving retail transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND f022 like '%05%'
            AND trunc(sys_txn_date) = trunc(SYSDATE);
           
          SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_txn,v_offline_txn_cnt
        FROM
            aswt_switch_txn_offline
        where f002 = p_card_no
            and drcr = 'D'
            AND f039 = '00'
            and txn_type= '23000'
            AND trunc(sys_txn_date) =trunc(sysdate)
            ;  

        IF
            v_auth_txn_cnt + v_offline_txn_cnt + 1 > v_daily_cnt
        THEN
            p_code := '27';
            p_message := 'Retail/Transit amount exceeds the daily transaction count of ' || v_daily_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF;    

         --Retrieving Transit transaction amount on that card for that day

        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit

        IF v_auth_txn + v_offline_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_y_txn,v_auth_y_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr ='D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND f022 like '%05%'
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end;
           
           
         SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_y_txn,v_offline_y_txn_cnt
        FROM
            aswt_switch_txn_offline
        where f002 = p_card_no
            and drcr = 'D'
            AND f039 = '00'
             and txn_type= '23000'
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end
            ;   

        IF
            v_auth_y_txn_cnt + v_offline_y_txn_cnt + 1 > v_annual_cnt
        THEN
            p_code := '25';
            p_message := 'Retail/Transit amount exceeds the annual transaction count of ' || v_annual_cnt;
           INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );


            return;
        END IF;
           
        --To check if the Retail transaction amount does not exceed the Annual transaction limit

        IF v_auth_y_txn + v_offline_y_txn + p_amount > v_annual_amt THEN

            p_code := '187';                     
            p_message := 'Retail/Transit amount exceeds the annual transaction limit of ' || v_annual_amt;
            --p_message := 'Retail/Transit amount '||v_annual_amt;                    

            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Monthly -- To check if the Retail transaction amount does not exceed the monthly transaction limit

          --Retrieving retail transaction amount on that card for that month

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_m_txn,v_auth_m_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND f022 like '%05%'
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY');
           
           
            SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_m_txn,v_offline_m_txn_cnt
        FROM
            aswt_switch_txn_offline
        where f002 = p_card_no
            and drcr = 'D'
            AND f039 = '00'
             and txn_type= '23000'
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY')
             ;

            
        IF
            v_auth_m_txn_cnt + v_offline_m_txn_cnt + 1 > v_monthly_cnt
        THEN
            p_code := '26';
            p_message := 'Retail/Transit amount exceeds the monthly transaction count of ' || v_monthly_cnt;
           INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            return;
        END IF;    

        --To check if the Retail transaction amount does not exceed the Monthly transaction limit

        IF v_auth_m_txn + v_offline_m_txn+ p_amount > v_monthly_amt THEN
            p_code := '188';
            p_message := 'Retail/Transit amount exceeds the monthly transaction limit of ' || v_monthly_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
        --DBMS_OUTPUT.PUT_LINE('inside 51 enabled contact success');
end if;      
       

elsif  v_sub_txn_type ='07' then     --contactless


    select max_chip_amt into v_max_chip_amt 
   from cms_limit_transaction_type where txn_type_mode = v_sub_txn_type_new;
  
  IF p_amount > v_max_chip_amt and v_pin_type='0' THEN
            p_code := '186';
            p_message := 'Retail/Transit amount exceeds the max RBI chip limit of ' || v_max_chip_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


--        DBMS_OUTPUT.PUT_LINE('inside 71  contactless');
        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y';

      if v_cust_limit_cnt =0 then
            p_code := '232';
            p_message := 'Customer POS contactless transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;


end if;

  if v_cust_limit_cnt > 0 then
        --DBMS_OUTPUT.PUT_LINE('inside 07 enabled contactless');


    select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where card_ref_number=v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y';
        

   IF p_amount > v_single_amt THEN
            p_code := '186';
            p_message := 'Retail/Transit amount exceeds the single transaction limit of ' || v_single_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_y_txn,v_auth_y_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND f022 like '%07%'
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end;
           
           
          SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_y_txn,v_offline_y_txn_cnt
        FROM
            aswt_switch_txn_offline
        where f002 = p_card_no 
            and drcr = 'D'
            AND f039 = '00'
            and txn_type= '23000'
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end
            ;  


        --To check if the Retail transaction amount does not exceed the Annual transaction limit

        IF v_auth_y_txn + v_offline_y_txn + p_amount > v_annual_amt THEN
            p_code := '187';
            p_message := 'Retail/Transit amount exceeds the annual transaction limit of ' || v_annual_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       
       IF
            v_auth_y_txn_cnt + v_offline_y_txn_cnt + 1 > v_annual_cnt
        THEN
            p_code := '25';
            p_message := 'Retail/Transit amount exceeds the annual transaction count of ' || v_annual_cnt;
           INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );


            return;
        END IF;

        --Monthly -- To check if the Retail transaction amount does not exceed the monthly transaction limit

          --Retrieving retail transaction amount on that card for that month

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_m_txn,v_auth_m_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND f022 like '%07%'
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY');
           
        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_m_txn,v_offline_m_txn_cnt
        FROM
            aswt_switch_txn_offline
        where f002 = p_card_no
            and drcr = 'D'
            AND f039 = '00'
            and txn_type= '23000'
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY')
             ;   

        --To check if the Retail transaction amount does not exceed the Monthly transaction limit

        IF v_auth_m_txn + v_offline_m_txn + p_amount > v_monthly_amt THEN
            p_code := '188';
            p_message := 'Retail/Transit amount exceeds the monthly transaction limit of ' || v_monthly_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       
       IF
            v_auth_m_txn_cnt + v_offline_m_txn_cnt + 1 > v_monthly_cnt
        THEN
            p_code := '26';
            p_message := 'Retail/Transit amount exceeds the monthly transaction count of ' || v_monthly_cnt;
           INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            return;
        END IF;    


        --Daily -- To check if the Retail transaction amount does not exceed the daily transaction limit

         --Retrieving retail transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND f022 like '%07%'
            AND trunc(sys_txn_date) = trunc(SYSDATE);
           
         --  DBMS_OUTPUT.PUT_LINE('inside 71  v_auth_txn'||v_auth_txn_cnt);   
           
          SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_txn,v_offline_txn_cnt
        FROM
            aswt_switch_txn_offline
        where f002 = p_card_no
            and drcr = 'D'
            AND f039 = '00'
            and txn_type= '23000'
            AND trunc(sys_txn_date) = trunc(SYSDATE)
             ;  

        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit

        IF v_auth_txn + v_offline_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       
       IF
            v_auth_txn_cnt + v_offline_txn_cnt + 1 > v_daily_cnt
        THEN
            p_code := '27';
            p_message := 'Retail/Transit amount exceeds the daily transaction count of ' || v_daily_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF; 

        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
      --  DBMS_OUTPUT.PUT_LINE('inside 71 enabled contactless success');

end if;
end if;

ELSIF p_txn_type = 21001  then


 select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N';

--Removed due to as discussed with ba and pm test team pos contact allowed to due txn in any case
 if v_cust_limit_cnt > 0 then
            p_code := '231';
            p_message := 'Customer ATM transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            --COMMIT;
            return;


end if;

if v_cust_limit_cnt = 0 then

       select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where card_ref_number =v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new;  

        
        if v_cust_limit_cnt > 0 then
        
        select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where card_ref_number=v_card_ref_Number 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y';
        
        end if;


   IF p_amount > v_single_amt THEN

            p_code := '186';        
            p_message := 'Retail/Transit amount exceeds the single transaction limit of ' || v_single_amt;

            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


          --Daily -- To check if the Retail transaction amount does not exceed the daily transaction limit

         --Retrieving retail transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND trunc(sys_txn_date) = trunc(SYSDATE);
           


        IF
            v_auth_txn_cnt + 1 > v_daily_cnt
        THEN
            p_code := '27';
            p_message := 'Retail/Transit amount exceeds the daily transaction count of ' || v_daily_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF;    

         --Retrieving Transit transaction amount on that card for that day

        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit

        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_y_txn,v_auth_y_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr ='D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end;
            

        IF
            v_auth_y_txn_cnt + 1 > v_annual_cnt
        THEN
            p_code := '25';
            p_message := 'Retail/Transit amount exceeds the annual transaction count of ' || v_annual_cnt;
           INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );


            return;
        END IF;
           
        --To check if the Retail transaction amount does not exceed the Annual transaction limit

        IF v_auth_y_txn + p_amount > v_annual_amt THEN

            p_code := '187';                     
            p_message := 'Retail/Transit amount exceeds the annual transaction limit of ' || v_annual_amt;
            --p_message := 'Retail/Transit amount '||v_annual_amt;                    

            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Monthly -- To check if the Retail transaction amount does not exceed the monthly transaction limit

          --Retrieving retail transaction amount on that card for that month

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_m_txn,v_auth_m_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND f002 = p_card_no
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY');           

            
        IF
            v_auth_m_txn_cnt + 1 > v_monthly_cnt
        THEN
            p_code := '26';
            p_message := 'Retail/Transit amount exceeds the monthly transaction count of ' || v_monthly_cnt;
           INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            return;
        END IF;    

        --To check if the Retail transaction amount does not exceed the Monthly transaction limit

        IF v_auth_m_txn + p_amount > v_monthly_amt THEN
            p_code := '188';
            p_message := 'Retail/Transit amount exceeds the monthly transaction limit of ' || v_monthly_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
end if;      

ELSE
        --DBMS_OUTPUT.PUT_LINE('inside product level limit check');
        
        

          --Single--To check if the Retail amount transaction does not exceed the single transaction limit
        IF p_amount > v_single_amt THEN
            p_code := '186';
            p_message := 'Retail/Transit amount exceeds the single transaction limit of ' || v_single_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Annually -- To check if the Retail transaction amount does not exceed the annual transaction limit

          --Retrieving retail transaction amount on that card for that year

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_y_txn,v_auth_y_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr <> 'R'
            AND f039 = '00'
            AND f002 = p_card_no
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end;

          --Retrieving Transit transaction amount on that card for that year

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_y_txn,v_offline_y_txn_cnt
        FROM
            aswt_switch_txn_offline
        WHERE
            drcr = 'D'
            AND f039 = '00'
            and txn_type = p_txn_type
            AND trunc(sys_txn_date) BETWEEN v_fy_start AND v_fy_end
            AND f002 = p_card_no;

        --Digital retail transactions of that year

        SELECT
            nvl(SUM(txn_amount),0),count(1)
        INTO v_digi_y_txn,v_digi_y_txn_cnt
        FROM
            digital_txn_authorization
        WHERE
            dr_cr_flag = 'Dr'
            AND response_code = '00'
            AND card_enc = p_card_no
            and txn_type = p_txn_type
            AND trunc(date_time) BETWEEN v_fy_start AND v_fy_end;
           
           
            IF v_auth_y_txn_cnt + v_offline_y_txn_cnt + v_digi_y_txn_cnt + 1 > v_annual_cnt THEN
            p_code := '187';
            p_message := 'Retail/Transit amount exceeds the annual transaction count of ' || v_annual_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;   

        --To check if the Retail transaction amount does not exceed the Annual transaction limit

        IF v_auth_y_txn + v_offline_y_txn + v_digi_y_txn + p_amount > v_annual_amt THEN
            p_code := '187';
            p_message := 'Retail/Transit amount exceeds the annual transaction limit of ' || v_annual_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Monthly -- To check if the Retail transaction amount does not exceed the monthly transaction limit

          --Retrieving retail transaction amount on that card for that month

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_m_txn,v_auth_m_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr <> 'R'
            AND f039 = '00'
            AND f002 = p_card_no
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY');

          --Retrieving Transit transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_m_txn,v_offline_m_txn_cnt
        FROM
            aswt_switch_txn_offline
        WHERE
            drcr <> 'R'
            AND f039 = '00'
            and txn_type = p_txn_type
            AND TO_CHAR(sys_txn_date,'MMYY') = TO_CHAR(SYSDATE,'MMYY')
            AND f002 = p_card_no;

        --Digital retail transactions of that month

        SELECT
            nvl(SUM(txn_amount),0),count(1)
        INTO v_digi_m_txn,v_digi_m_txn_cnt
        FROM
            digital_txn_authorization
        WHERE
            dr_cr_flag = 'Dr'
            AND response_code = '00'
            AND card_enc = p_card_no
            and txn_type = p_txn_type
            AND TO_CHAR(date_time,'MMYY') = TO_CHAR(SYSDATE,'MMYY');
           
           
          IF v_auth_m_txn_cnt + v_offline_m_txn_cnt + v_digi_m_txn_cnt + 1 > v_monthly_cnt THEN
            p_code := '188';
            p_message := 'Retail/Transit amount exceeds the monthly transaction count of ' || v_monthly_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;   

        --To check if the Retail transaction amount does not exceed the Monthly transaction limit

        IF v_auth_m_txn + v_offline_m_txn + v_digi_m_txn + p_amount > v_monthly_amt THEN
            p_code := '188';
            p_message := 'Retail/Transit amount exceeds the monthly transaction limit of ' || v_monthly_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

        --Daily -- To check if the Retail transaction amount does not exceed the daily transaction limit

         --Retrieving retail transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            aswt_switch_txn_authrization
        WHERE
            txn_type = p_txn_type
            AND drcr <> 'R'
            AND f039 = '00'
            AND trunc(sys_txn_date) = trunc(SYSDATE)
            AND f002 = p_card_no;

         --Retrieving Transit transaction amount on that card for that day

        SELECT
            nvl(SUM(f004 / 100),0),count(1)
        INTO v_offline_txn,v_offline_txn_cnt
        FROM
            aswt_switch_txn_offline
        WHERE f002 = p_card_no
            and txn_type = p_txn_type
            AND drcr = 'D'
            AND f039 = '00'
            AND trunc(sys_txn_date) = trunc(SYSDATE)
            ;

        --Digital retail transactions of that day

        SELECT
            nvl(SUM(txn_amount),0),count(1)
        INTO v_digi_txn,v_digi_txn_cnt
        FROM
            digital_txn_authorization
        WHERE
            dr_cr_flag = 'Dr'
            AND response_code = '00'
            AND card_enc = p_card_no
            and txn_type = p_txn_type
            AND trunc(date_time) = trunc(SYSDATE);

        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit


 --DBMS_OUTPUT.PUT_LINE('inside product level limit check 1 '||v_auth_txn ||' v_auth_txn ' ||v_offline_txn||' v_offline_txn '||v_digi_txn||' v_digi_txn '||p_amount);

        IF v_auth_txn + v_offline_txn + v_digi_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       
       IF v_auth_txn_cnt + v_offline_txn_cnt + v_digi_txn_cnt +1 > v_daily_cnt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction count of ' || v_daily_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
        --DBMS_OUTPUT.PUT_LINE('inside product level limit check success ');

  END IF;

--END IF;

 INSERT INTO validate_topup_and_txn_log (
        card_no,
        txn_type,
        amount,
        source,
        response_code,
        response_message,
        sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

EXCEPTION
    WHEN exc_bin_not_configured THEN
        p_code := '192';
        p_message := 'Bin not configured';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
    WHEN exc_card_not_active THEN
         p_code :=  CASE v_status
            WHEN 'GNI' THEN '38'
            WHEN 'THL' THEN '36'
            WHEN 'PHL' THEN '37'
            WHEN 'INA' THEN '38'
            ELSE '38'
        END;
        p_message := 'Card is '
                     || CASE v_status
            WHEN 'GNI' THEN 'Generated but not Issued'
            WHEN 'THL' THEN 'Temporarily Hotlisted'
            WHEN 'PHL' THEN 'Permanently Hotlisted'
            WHEN 'INA' THEN 'Issued but not Active'
            ELSE 'not active'
        END;

        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
    WHEN exc_prd_txn THEN
        p_code := '99';
        p_message := 'Transaction not configured';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );


    WHEN OTHERS THEN

        proc_processlog('PRC','VALIDATE_TOPUP_AND_TXN_LOGIC','PROCEDURE','Exception - WHEN OTHERS - Start. Values of p_card_no :: '|| p_card_no|| ' p_txn_type :: '|| p_txn_type || ' p_amount :: '|| p_amount || ' p_source '|| p_source,SYSTIMESTAMP);

        p_code := '160';
        p_message := 'Error '  ||SQLCODE||SQLERRM ;
        proc_processlog('PRC','VALIDATE_TOPUP_AND_TXN_LOGIC','PROCEDURE','Exception - WHEN OTHERS - After p_code... Values of p_card_no :: '|| p_card_no|| ' p_txn_type :: '|| p_txn_type || ' p_amount :: '|| p_amount || ' p_source '|| p_source   || ' p_message '|| p_message,SYSTIMESTAMP);


END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE validate_topup_and_txn_main(p_card_no character varying, p_txn_type numeric, p_sub_txn_type character varying, p_amount numeric, p_source character varying, p_wallet_id numeric, OUT p_code numeric, OUT p_message character varying, OUT p_first_topup character varying, OUT p_ref_id character varying)
 SECURITY DEFINER
AS $procedure$
    PRAGMA autonomous_transaction;
BEGIN

    validate_topup_and_txn_logic(p_card_no,p_txn_type,p_sub_txn_type,p_amount,p_source,p_wallet_id,p_code,p_message,p_first_topup,p_ref_id);

--    INSERT INTO validate_topup_and_txn_log (
--        card_no,
--        txn_type,
--        amount,
--        source,
--        response_code,
--        response_message,
--        sys_txn_date,
--        wallet_id,
--        sub_txn_type
--    ) VALUES (
--        p_card_no,
--        p_txn_type,
--        p_amount,
--        p_source,
--        p_code,
--        p_message,
--        SYSDATE,
--        p_wallet_id,
--        p_sub_txn_type
--    );

    COMMIT;
    IF
        p_code = 0
    THEN
        dbms_output.put_line('Inserted successfully');
    ELSE
        dbms_output.put_line('Failed');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error: '
                               || sqlerrm
                               || ' ');
        p_message := 'Error: '
                     || sqlerrm
                     || ' ';
END$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE PROCEDURE validate_txn_logic(p_card_no character varying, p_txn_type numeric, p_sub_txn_type character varying, p_amount numeric, p_source character varying, p_wallet_id numeric, p_txn_flag character varying, p_card_usage_flag numeric, OUT p_code numeric, OUT p_message character varying, OUT p_first_topup character varying, OUT p_ref_id character varying)
 SECURITY DEFINER
AS $procedure$
    v_bin                     VARCHAR2(20);
    v_status                  VARCHAR2(20);
    v_issuer_id               NUMBER;
    v_instrument_profile_id   NUMBER;
    v_kyc_not_done            NUMBER;
    v_card_ref_Number          card_detail.card_ref_Number%type;
    v_kyc_type                VARCHAR2(20);
    v_product_id              NUMBER;
    v_max_balance             NUMBER;
    v_top_up_amt              NUMBER;
    v_txn_amt                 NUMBER;
    v_dig_top_up              NUMBER;
    v_auth_top_up             NUMBER;
    v_fee_top_up              NUMBER;
    v_auth_txn                NUMBER;
    v_digi_txn                NUMBER;
    v_single_amt              NUMBER;
    v_daily_amt               varchar2(20);--NUMBER;
    v_monthly_amt             NUMBER;
    v_annual_amt              NUMBER;
    v_balance                 NUMBER;
    v_dig_m_top_up            NUMBER;
    v_auth_m_top_up           NUMBER;
    v_fee_m_top_up            NUMBER;
    v_top_up_m_amt            NUMBER;
    v_dig_y_top_up            NUMBER;
    v_auth_y_top_up           NUMBER;
    v_fee_y_top_up            NUMBER;
    v_top_up_y_amt            NUMBER;
    v_auth_m_txn              NUMBER;
    v_auth_y_txn              NUMBER;
    v_digi_m_txn              NUMBER;
    v_digi_y_txn              NUMBER;
    v_offline_txn             NUMBER;
    v_offline_m_txn           NUMBER;
    v_offline_y_txn           NUMBER;
    v_fy_start                VARCHAR2(20) := '01-Apr-';
    v_fy_end                  VARCHAR2(20) := '31-Mar-';
    v_year                    VARCHAR2(20);
    v_fy_start1               VARCHAR2(20);
    v_first_topup_done        VARCHAR2(10);
    v_min_first_topup         NUMBER;
    v_expiry_date             VARCHAR2(20);
    v_expiry_count            NUMBER;
    v_ref_id                  VARCHAR2(100);
    v_prd_txn_cnt             NUMBER;
    v_event_cnt               NUMBER;
    v_event                   NUMBER;
    exc_prd_txn EXCEPTION;
    exc_bin_not_configured EXCEPTION;
    exc_card_not_active EXCEPTION;
    v_txn_profile_cnt         NUMBER;
    v_full_kyc_done           NUMBER;
    v_card_issued_date        DATE;
    v_card_activation_date    DATE;
    v_icici_card_cnt          NUMBER;
    v_replaced_cnt            NUMBER;
    v_replaced_card           VARCHAR2(2);
    V_topup_amt_multiplier    NUMBER;
    v_cust_seq_id             card_detail.cust_seq_id%type;
    v_cust_limit_cnt          NUMBER;
    v_sub_txn_type varchar2(4) := substr(p_sub_txn_type,-3,2);
    v_pin_type varchar2(1)	   := substr(p_sub_txn_type,-1);	
    v_sub_txn_type_new varchar2(10) := substr(p_sub_txn_type,1,7);             
    v_hotlisted_reason_code card_detail.hotlisted_reason_code%type;
    
    v_fisrt_activated_on  date;
    v_multiplier_flag varchar2(2);
    v_mobile_no 	number;
    v_rbi_max_amt 	number;
    v_balance_card 	number;
   
    v_daily_cnt 		number :=0;
    v_monthly_cnt  		number :=0;
    v_annual_cnt  		number :=0;
    v_auth_m_txn_cnt  	number :=0;
    v_auth_txn_cnt  	number :=0;
    v_auth_y_txn_cnt  	number :=0;
    v_offline_m_txn_cnt number :=0;
    v_offline_txn_cnt 	number :=0;
    v_offline_y_txn_cnt number :=0;
    v_digi_y_txn_cnt    number :=0;
    v_digi_m_txn_cnt    number :=0;
    v_digi_txn_cnt    number :=0;
  
    v_queue_cnt                     NUMBER :=0;
    v_queue_amt     number;
    v_max_chip_amt  number;
    v_wallet_amt    number;
    v_is_gift       varchar2(2);
    v_min_gift      number;
    v_min_nongift   number;
   v_wallet_limit_flag varchar2(2);
  
    v_count  number :=0;
   
BEGIN

  IF  p_amount < 0 then

       p_code := '197';
            p_message := 'Amount should be greater than 0';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

--            --COMMIT;

     return;
  end if;


    SELECT
        COUNT(1)
    INTO v_replaced_cnt
    FROM
        card_detail
    WHERE
        hash_card_number = p_card_no
        AND old_card_no IS NOT NULL;

    IF v_replaced_cnt = 1 THEN
        v_replaced_card := 'Y';
    ELSE
        v_replaced_card := 'N';
    END IF;

dbms_output.put_line('before card details');  

    SELECT
        cd.bin,
        cd.status,
        ccde.kyc_flag,
        cd.product_id,
        cd.issuer_id,
        cd.expiry_date,
        cd.is_first_topup_done,
        cde.issued_date,
        cd.card_activated_on,
        cd.cust_seq_id,
        cd.hotlisted_reason_code,
        cd.card_ref_Number,
        cd.mobile_no,
        ins.rbi_max_limit,
        p.is_gift_card,
        ins.min_purchase_gift,
        ins.min_purchase_nongift
    INTO
        v_bin,
        v_status,
        v_kyc_type,
        v_product_id,
        v_issuer_id,
        v_expiry_date,
        v_first_topup_done,
        v_card_issued_date,
        v_card_activation_date,
        v_cust_seq_id,
        v_hotlisted_reason_code,
        v_card_ref_Number,
        v_mobile_no,
        v_rbi_max_amt,
        v_is_gift,
        v_min_gift,
        v_min_nongift
    FROM
        card_detail cd
        JOIN cms_cust_details_extension ccde ON cd.cust_seq_id = ccde.cust_seq_id
        JOIN cms_card_detail_extention cde on cd.card_ref_number = cde.card_ref_no
        join issuer i on i.id = cd.issuer_id
        join institution ins on ins.id = i.inst_id  
        join prd_bin_profile p on p.product_id = cd.product_id
    WHERE
        cd.hash_card_number = p_card_no;
        
    dbms_output.put_line('card details');  
        
        
--    SELECT
--        multiplier_value,multiplier
--    INTO V_topup_amt_multiplier,v_multiplier_flag
--    FROM
--       prd_topup_profile
--    WHERE
--        product_id = v_product_id;     
       
   -- dbms_output.put_line('card prd_topup_profile');  
   
   
   if p_txn_flag = 'R' then
   
   p_code := '00';
   p_message := 'Success';
       
 
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt - p_amount,
          daily_dom_cnt = daily_dom_cnt - 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            and daily_dom_amt !=0
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                'Reversal '||p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

      return;
   end if;
           


    IF v_kyc_type = 'MIN' THEN

        SELECT
            min_balance_for_kyc
        INTO v_max_balance
        FROM
            prd_bin_profile
        WHERE
            bin = v_bin
        and product_id = v_product_id;

    ELSE

        SELECT
            max_balance_for_kyc
        INTO v_max_balance
        FROM
            prd_bin_profile
        WHERE
            bin = v_bin
        and product_id = v_product_id;

    END IF;

    dbms_output.put_line('before prd_txn_limit_profile'); 

    
  SELECT
        count(1)
        INTO v_prd_txn_cnt
    FROM
        prd_txn_limit_profile t
        join sub_transaction_type s on s.txn_type = t.txn_type 
        join prd_txn_profile p on p.sub_txn_type = s.sub_txn_type and p.product_id = t.product_id
    WHERE
        t.product_id = v_product_id
        AND t.txn_type = p_txn_type
        and p.sub_txn_type = v_sub_txn_type_new
        and p.is_enable = 'Y'
       AND t.kyc_type = v_kyc_type;

    DBMS_OUTPUT.put_line('p_txn_type '||p_txn_type||' v_sub_txn_type_new: '||v_sub_txn_type_new);


    IF v_prd_txn_cnt = 0 THEN
        RAISE exc_prd_txn;
    END IF;
    SELECT
        offus_dom_single_amt,
        offus_dom_daily_amt,
        offus_dom_monthly_amt,
        offus_dom_annual_amt,
        offus_dom_daily_cnt,
        offus_dom_monthly_cnt,
        offus_dom_annual_cnt
    INTO
        v_single_amt,
        v_daily_amt,
        v_monthly_amt,
        v_annual_amt,
        v_daily_cnt,
        v_monthly_cnt,
        v_annual_cnt
    FROM
        prd_txn_limit_profile
    WHERE       
        product_id = v_product_id
        AND txn_type = p_txn_type
         AND kyc_type = v_kyc_type;

  --To find out the current financial year
        
   --    dbms_output.put_line('after prd_txn_limit_profile');    

    SELECT
        TO_CHAR(SYSDATE,'YYYY')
    INTO v_year
    FROM
        dual;

    v_fy_start1 := v_fy_start || v_year;
	
	--dbms_output.put_line('v_fy_start1'||v_fy_start1);  

    --If SYSDATE is than than 1st April,then take previous year as Financial year,if not,take next year as Financial year
    IF trunc(SYSDATE) < v_fy_start1 THEN		
        v_fy_start := v_fy_start || to_number(v_year - 1);
        v_fy_end := v_fy_end || to_number(v_year);
    ELSE
	--dbms_output.put_line('esle '|| v_fy_start);  
        v_fy_start := v_fy_start || to_number(v_year);
        v_fy_end := v_fy_end || to_number(v_year + 1);
    END IF;
   --dbms_output.put_line('v_fy_end'||v_fy_end);  

     if v_status='THL' AND v_hotlisted_reason_code='1001' then

       p_code := '233';
            p_message := 'Card unused from last one year';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );  
     return;

    end if;
   
      dbms_output.put_line('before cms_cardwise_limit'); 
   
      SELECT
           count(1)
           into v_count
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
           
           
     if v_count = 0 then
     
     insert into cms_cardwise_limit(hash_Card_no,txn_type,txn_type_mode,created_date,daily_dom_amt,daily_dom_cnt,daily_intl_amt,daily_intl_cnt)
     values(p_card_no,p_txn_type,v_sub_txn_type_new,sysdate,0,0,0,0);
     end if;
           
 dbms_output.put_line('after cms_cardwise_limit: '||v_count); 

            SELECT
            COUNT(expiry_date)
        INTO v_expiry_count
        FROM
            card_detail
        WHERE
            hash_card_number = p_card_no;

        IF v_expiry_count = 0 THEN
            p_code := '185';
            p_message := 'Expiry Date is null';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

--dbms_output.put_line('v_expiry_date'||v_expiry_date); 
        IF TO_DATE(v_expiry_date,'MMYY') < TO_DATE(TO_CHAR(SYSDATE,'MMYY'),'MMYY') THEN
            p_code := '72';
            p_message := 'Card is expired';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
    
  --For Top Up transaction
    IF p_txn_type = '21028' THEN
        --dbms_output.put_line('Top Up');

        SELECT
            COUNT(expiry_date)
        INTO v_expiry_count
        FROM
            card_detail
        WHERE
            hash_card_number = p_card_no;

        IF v_expiry_count = 0 THEN
            p_code := '185';
            p_message := 'Expiry Date is null';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

--dbms_output.put_line('v_expiry_date'||v_expiry_date); 
        IF TO_DATE(v_expiry_date,'MMYY') < TO_DATE(TO_CHAR(SYSDATE,'MMYY'),'MMYY') THEN
            p_code := '72';
            p_message := 'Card is expired';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

       if v_kyc_type = 'MAX'  then
       
        SELECT
            COUNT(1)
        INTO v_kyc_not_done
        FROM
            card_detail cd,
            cms_cust_details ccd
        WHERE
            cd.cust_seq_id = ccd.cust_seq_id
            AND ( aadhar_number IS NULL
                  AND pan_number IS NULL
                  AND passport_number IS NULL
                  AND license_number IS NULL
                  AND n_rega_job_card IS NULL
                  AND voter_id IS NULL )
            AND hash_card_number = p_card_no;


           IF
            v_kyc_not_done > 0
        THEN
            p_code := '73';
            p_message := 'Top Up is rejected. KYC details are not present';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF; 
       
       end if;

          ---To check if full kyc completed after 2 years  v_card_activation_date
--dbms_output.put_line('v_fisrt_activated_on'||v_fisrt_activated_on);  


       IF  add_months(trunc(v_fisrt_activated_on),24) < trunc(sysdate) and  v_kyc_type != 'MAX' then

            p_code := '74';
            p_message := 'Full KYC not completed';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;

       end if;   

--dbms_output.put_line('V_topup_amt_multiplier'||V_topup_amt_multiplier);  
       if V_topup_amt_multiplier = 1  then 
         
         null;

         else 

         IF mod(p_amount,V_topup_amt_multiplier) <> 0 and v_multiplier_flag = 'Y' then
            p_code := '40';
            p_message := 'Top Up should be multiplier of '||V_topup_amt_multiplier;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
               p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF;
       end if;

        --Retrieving current total balance of the card

        SELECT
            --balance_check_card(p_card_no)
              balance_check_mobile(v_mobile_no)
        INTO v_balance
        FROM
            dual;
           
       
        --To check if balance does not exceed rbi limit after top up

        IF v_balance + p_amount > v_rbi_max_amt THEN
            p_code := '90';
            p_message := 'Top Up amount exceeds the maximum balance limit of ' || v_rbi_max_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;

       
        
   select count(1), nvl(sum(fee_amt),0) 
   into v_queue_cnt,v_queue_amt 
   from cs_fee_queue 
   where card_number=p_card_no 
   and drcr in ('Dr','D') 
   and QUEUE_RELEASED_FLAG='N';
   
    select balance_check_wallet(p_card_no,p_wallet_id)
  into v_wallet_amt 
 from dual;
  
  
   IF v_queue_cnt > 0 then         
        
        if v_wallet_amt + p_amount < v_queue_amt then
      
            p_code := '20';
            p_message := 'Pending dues for recovery.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
         end if;
         
     end if;    

       
        SELECT
            nvl(SUM(daily_dom_amt),0)
        INTO v_top_up_amt
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type='21028'
            AND trunc(created_date) = trunc(SYSDATE);


       if upper(v_daily_amt) != 'NA' then
          --To check if the Top Up amount transaction does not exceed the Daily transaction limit
        IF v_top_up_amt + p_amount > v_daily_amt THEN
            p_code := '94';
            p_message := 'Top Up amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       end if;

         -- If the top up amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
       
       
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt + p_amount,
          daily_dom_cnt = daily_dom_cnt + 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
          --  and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
        IF nvl(v_first_topup_done,'N') = 'N' THEN
            p_first_topup := 'Y';
            SELECT
                TO_CHAR(SYSDATE,'DDMMYY')
                || lpad(first_topup_log_ref_id.NEXTVAL,9,'0')
            INTO v_ref_id
            FROM
                dual;

            INSERT INTO first_topup_log (
                id,
                ref_id,
                card_no,
                source,
                status,
                date_time
            ) VALUES (
                first_topup_log_seq_id.NEXTVAL,
                v_ref_id,
                p_card_no,
                p_source,
                'V',
                SYSDATE
            );

            --COMMIT;
            p_ref_id := v_ref_id;
        ELSIF  v_first_topup_done = 'Y' and v_status = 'INA' then    
              p_first_topup := 'Y';
               SELECT
                TO_CHAR(SYSDATE,'DDMMYY')
                || lpad(first_topup_log_ref_id.NEXTVAL,9,'0')
            INTO v_ref_id
            FROM
                dual;

            INSERT INTO first_topup_log (
                id,
                ref_id,
                card_no,
                source,
                status,
                date_time
            ) VALUES (
                first_topup_log_seq_id.NEXTVAL,
                v_ref_id,
                p_card_no,
                p_source,
                'V',
                SYSDATE
            );

            --COMMIT;
            p_ref_id := v_ref_id;
        ELSE
            p_first_topup := 'N';
        END IF;

    ELSIF  p_txn_type = 21000 then --For txn type 21000
--        dbms_output.put_line('Retail/Transit');
    
      
 if v_sub_txn_type='81' then
        --check for enable/disable customer ecom limit txn
        

        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;

        if v_cust_limit_cnt > 0 then
        --DBMS_OUTPUT.PUT_LINE('E-com disabled ');

           p_code := '230';
            p_message := 'Customer E-Comm transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;

        end if;


   IF v_cust_limit_cnt = 0 THEN
        --DBMS_OUTPUT.PUT_LINE('E-com enabled limit check ');
        -- Checking for customer which is not present in cms_customer_limit
        -----------------------------------------------------------------------
        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new
       and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;  
        
        
        if v_cust_limit_cnt > 0 then
        
        select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT::text
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where cust_seq_id=v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y'
       and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;
        
        end if;
        
           
     end if; 
    
    
         SELECT
            daily_dom_amt,daily_dom_cnt
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
    
          dbms_output.put_line(' Ecom '||v_auth_txn);  
    
        -----------------------------------------------------------------------
        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit

             IF
             v_auth_txn_cnt + 1 > v_daily_cnt
         THEN
             p_code := '24';
             p_message := 'Retail/Ecom amount exceeds the daily transaction count of ' || v_daily_cnt;
             INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

             return;
         END IF;   

           
           
           
           if upper(v_daily_amt) != 'NA' then
        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Ecom amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       end if;
        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
       
       
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt + p_amount,
          daily_dom_cnt = daily_dom_cnt + 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
      

     
elsif  v_sub_txn_type ='05' then   --contact
        DBMS_OUTPUT.PUT_LINE('inside 51 contact');

        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;

--Removed due to as discussed with ba and pm test team pos contact allowed to due txn in any case
 if v_cust_limit_cnt > 0 then
            p_code := '231';
            p_message := 'Customer POS contact transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            --COMMIT;
            return;


end if;

if v_cust_limit_cnt = 0 then

      --  DBMS_OUTPUT.PUT_LINE('inside 51 enabled contact');
       select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id  
        and txn_mode=v_sub_txn_type_new
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;  

        
        if v_cust_limit_cnt > 0 then
        
        select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT::text
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;
        
        end if;

        end if; 

         SELECT
            daily_dom_amt,daily_dom_cnt
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
           
           
           
             IF
             v_auth_txn_cnt + 1 > v_daily_cnt
         THEN
             p_code := '24';
             p_message := 'Retail/Ecom amount exceeds the daily transaction count of ' || v_daily_cnt;
             INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

             return;
         END IF;   

           
   
        if upper(v_daily_amt) != 'NA' then
        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       end if;



        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
       
       
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt + p_amount,
          daily_dom_cnt = daily_dom_cnt + 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
        --DBMS_OUTPUT.PUT_LINE('inside 51 enabled contact success');
             

elsif  v_sub_txn_type ='07' then     --contactless


    select max_chip_amt into v_max_chip_amt 
   from cms_limit_transaction_type where txn_type_mode = v_sub_txn_type_new;
  
  IF p_amount > v_max_chip_amt and v_pin_type='0' THEN
            p_code := '186';
            p_message := 'Retail/Transit amount exceeds the max RBI chip limit of ' || v_max_chip_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;


        
        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;

      if v_cust_limit_cnt > 0 then
            p_code := '232';
            p_message := 'Customer POS contactless transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;


end if;


   IF v_cust_limit_cnt = 0 THEN
        --DBMS_OUTPUT.PUT_LINE('E-com enabled limit check ');
        -- Checking for customer which is not present in cms_customer_limit
        -----------------------------------------------------------------------
        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id  
        and txn_mode=v_sub_txn_type_new
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;  

  if v_cust_limit_cnt > 0 then
        --DBMS_OUTPUT.PUT_LINE('inside 07 enabled contactless');


    select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT::text
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where cust_seq_id =v_cust_seq_id  
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;
  
          end if;
       
       
     end if; 

         
         SELECT
            daily_dom_amt,daily_dom_cnt
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);

        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit

        IF
             v_auth_txn_cnt + 1 > v_daily_cnt
         THEN
             p_code := '24';
             p_message := 'Retail/Ecom amount exceeds the daily transaction count of ' || v_daily_cnt;
             INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

             return;
         END IF;   

           
   
        if upper(v_daily_amt) != 'NA' then
        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       end if;


       
        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
       
       
       
       
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt + p_amount,
          daily_dom_cnt = daily_dom_cnt + 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
      --  DBMS_OUTPUT.PUT_LINE('inside 71 enabled contactless success');

end if;


ELSIF p_txn_type = 21001  then

  
        
        select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='N'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;

if v_cust_limit_cnt > 0 then
            p_code := '231';
            p_message := 'Customer ATM transaction is disabled.';
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );
            --COMMIT;
            return;


end if;

if v_cust_limit_cnt = 0 then

      --  DBMS_OUTPUT.PUT_LINE('inside 51 enabled contact');
       select count(1) 
        into v_cust_limit_cnt 
        from cms_customer_limit 
        where cust_seq_id =v_cust_seq_id  
        and txn_mode=v_sub_txn_type_new
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;  

        
        if v_cust_limit_cnt > 0 then
        
        select case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.DAILY_LIMIT::text
         else v_daily_amt end d,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.MONTHLY_LIMIT
         else v_monthly_amt end m,
         case when nvl(LIMIT_ENABLED,'N') = 'Y' then c.ANNUAL_LIMIT
         else v_annual_amt end y 
        into v_daily_amt,v_monthly_amt,v_annual_amt 
        from cms_customer_limit c
        where cust_seq_id =v_cust_seq_id 
        and txn_mode=v_sub_txn_type_new  
        and txn_enabled='Y'
        and card_usage  = case when p_card_usage_flag = 1 then 'intl' else 'dom' end;
        
        end if;

        end if; 
 

-------------
   
   
         SELECT
            daily_dom_amt,daily_dom_cnt
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
   
  

        IF
            v_auth_txn_cnt + 1 > v_daily_cnt
        THEN
            p_code := '27';
            p_message := 'Retail/Transit amount exceeds the daily transaction count of ' || v_daily_cnt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            return;
        END IF;    

         --Retrieving Transit transaction amount on that card for that day

        --To check if the Retail and transit transaction amounts does not exceed the Daily transaction limit
        if upper(v_daily_amt) != 'NA' then
        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
        end if;
       

        
        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
       
       
       
       
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt + p_amount,
          daily_dom_cnt = daily_dom_cnt + 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;     

ELSE
        --DBMS_OUTPUT.PUT_LINE('inside product level limit check');
        
            SELECT
            daily_dom_amt,daily_dom_cnt
        INTO v_auth_txn,v_auth_txn_cnt
        FROM
            cms_cardwise_limit
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
        
           IF
             v_auth_txn_cnt + 1 > v_daily_cnt
         THEN
             p_code := '24';
             p_message := 'Retail/Ecom amount exceeds the daily transaction count of ' || v_daily_cnt;
             INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

             return;
         END IF;   

           
   
        if upper(v_daily_amt) != 'NA' then
        IF v_auth_txn + p_amount > v_daily_amt THEN
            p_code := '189';
            p_message := 'Retail/Transit amount exceeds the daily transaction limit of ' || v_daily_amt;
            INSERT INTO validate_topup_and_txn_log (
                card_no,
                txn_type,
                amount,
                source,
                response_code,
                response_message,
                sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

            --COMMIT;
            return;
        END IF;
       end if;



        -- If the retail transaction amount doesn't exceed any limit,the transaction will be successful.

        p_code := '00';
        p_message := 'Success';
       
       
       
       
       update cms_cardwise_limit
       set daily_dom_amt = daily_dom_amt + p_amount,
          daily_dom_cnt = daily_dom_cnt + 1
        where hash_Card_no = p_card_no
            and txn_type = p_txn_type
            and txn_type_mode=v_sub_txn_type_new
            AND trunc(created_date) = trunc(SYSDATE);
       
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
        --DBMS_OUTPUT.PUT_LINE('inside product level limit check success ');

  END IF;

--END IF;

 INSERT INTO validate_topup_and_txn_log (
        card_no,
        txn_type,
        amount,
        source,
        response_code,
        response_message,
        sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

EXCEPTION
    WHEN exc_bin_not_configured THEN
        p_code := '192';
        p_message := 'Bin not configured';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
    WHEN exc_card_not_active THEN
         p_code :=  CASE v_status
            WHEN 'GNI' THEN '38'
            WHEN 'THL' THEN '36'
            WHEN 'PHL' THEN '37'
            WHEN 'INA' THEN '38'
            ELSE '38'
        END;
        p_message := 'Card is '
                     || CASE v_status
            WHEN 'GNI' THEN 'Generated but not Issued'
            WHEN 'THL' THEN 'Temporarily Hotlisted'
            WHEN 'PHL' THEN 'Permanently Hotlisted'
            WHEN 'INA' THEN 'Issued but not Active'
            ELSE 'not active'
        END;

        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );

        --COMMIT;
    WHEN exc_prd_txn THEN
        p_code := '99';
        p_message := 'Transaction not configured';
        INSERT INTO validate_topup_and_txn_log (
            card_no,
            txn_type,
            amount,
            source,
            response_code,
            response_message,
            sys_txn_date,
                wallet_id,
                sub_txn_type
            ) VALUES (
                p_card_no,
                p_txn_type,
                p_amount,
                p_source,
                p_code,
                p_message,
                SYSDATE,
                p_wallet_id,
                p_sub_txn_type
            );


    WHEN OTHERS THEN

        proc_processlog('PRC','VALIDATE_TOPUP_AND_TXN_LOGIC','PROCEDURE','Exception - WHEN OTHERS - Start. Values of p_card_no :: '|| p_card_no|| ' p_txn_type :: '|| p_txn_type || ' p_amount :: '|| p_amount || ' p_source '|| p_source,SYSTIMESTAMP);

        p_code := '160';
        p_message := 'Error '  ||SQLCODE||SQLERRM ;
        proc_processlog('PRC','VALIDATE_TOPUP_AND_TXN_LOGIC','PROCEDURE','Exception - WHEN OTHERS - After p_code... Values of p_card_no :: '|| p_card_no|| ' p_txn_type :: '|| p_txn_type || ' p_amount :: '|| p_amount || ' p_source '|| p_source   || ' p_message '|| p_message,SYSTIMESTAMP);


END
$procedure$
 LANGUAGE edbspl
;

CREATE OR REPLACE FUNCTION wrapperd()
 RETURNS character varying
 LANGUAGE edbspl
 SECURITY DEFINER
AS $function$
$__EDBwrapped__$
UTF8
d4zzpXrRcPHKp7N8WxwFcSa68XVQTtmwGmreOAUcouCi/CsUlWRhsAqV8NhMa0uuqZ3IryOlQFyv
Tbljys/5FEibNoaW4DHdx6UWd6q+AkO8aSNgRV1Gi/cFUvyt+2GKD3xJUudzIdKhiFZ0wiWukyAt
4Vfin4A=
$__EDBwrapped__$$function$
;

